{
    "commands": [
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This command is used to convert an aff file to a Final Cut Pro (fcp) xml file The conversion process can take several seconds to complete and the command is meant to be run asynchronously.",
            "name": "aaf2fcp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "aaf2fcp([deleteFile=boolean], [dstPath=string], [getFileName=int], [progress=int], [srcFile=string], [terminate=int], [waitCompletion=int])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command displays version information about the application if it is executed without flags.",
            "name": "about",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The application's version information.",
                    "type": "string"
                }
            ],
            "synopsis": "about([apiVersion=boolean], [application=boolean], [batch=boolean], [buildDirectory=boolean], [buildVariant=boolean], [codeset=boolean], [compositingManager=boolean], [connected=boolean], [ctime=boolean], [currentDate=boolean], [currentTime=boolean], [customVersion=boolean], [customVersionClient=boolean], [customVersionMajor=boolean], [customVersionMinor=boolean], [customVersionString=boolean], [cutIdentifier=boolean], [date=boolean], [environmentFile=boolean], [evalVersion=boolean], [file=boolean], [fontInfo=boolean], [helpDataDirectory=boolean], [installedVersion=boolean], [ioVersion=boolean], [irix=boolean], [is64=boolean], [languageResources=boolean], [linux=boolean], [linux64=boolean], [liveUpdate=boolean], [localizedResourceLocation=boolean], [ltVersion=boolean], [macOS=boolean], [macOSppc=boolean], [macOSx86=boolean], [majorVersion=boolean], [minorVersion=boolean], [ntOS=boolean], [operatingSystem=boolean], [operatingSystemVersion=boolean], [patchVersion=boolean], [preferences=boolean], [product=boolean], [qtVersion=boolean], [tablet=boolean], [tabletMode=boolean], [uiLanguage=boolean], [uiLanguageForStartup=boolean], [uiLanguageIsLocalized=boolean], [uiLocaleLanguage=boolean], [version=boolean], [win64=boolean], [windowManager=boolean], [windows=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command is used to add a dynamic attribute to a node or nodes.",
            "name": "addAttr",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "addAttr([attributeType=string], [binaryTag=string], [cachedInternally=boolean], [category=string], [dataType=string], [defaultValue=float], [disconnectBehaviour=uint], [enumName=string], [exists=boolean], [fromPlugin=boolean], [hasMaxValue=boolean], [hasMinValue=boolean], [hasSoftMaxValue=boolean], [hasSoftMinValue=boolean], [hidden=boolean], [indexMatters=boolean], [internalSet=boolean], [keyable=boolean], [longName=string], [maxValue=float], [minValue=float], [multi=boolean], [niceName=string], [numberOfChildren=uint], [parent=string], [proxy=string], [readable=boolean], [shortName=string], [softMaxValue=float], [softMinValue=float], [storable=boolean], [usedAsColor=boolean], [usedAsFilename=boolean], [usedAsProxy=boolean], [worldSpace=boolean], [writable=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "Makes the \"object\" specified as second argument the source of an existing field or emitter specified as the first argument.",
            "name": "addDynamic",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the source object and the field or emitter which was attached to it.",
                    "type": "string"
                }
            ],
            "synopsis": "addDynamic( object object )"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command is used to add an extension attribute to a node type.",
            "name": "addExtension",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "addExtension([attributeType=string], [binaryTag=string], [cachedInternally=boolean], [category=string], [dataType=string], [defaultValue=float], [disconnectBehaviour=uint], [enumName=string], [exists=boolean], [fromPlugin=boolean], [hasMaxValue=boolean], [hasMinValue=boolean], [hasSoftMaxValue=boolean], [hasSoftMinValue=boolean], [hidden=boolean], [indexMatters=boolean], [internalSet=boolean], [keyable=boolean], [longName=string], [maxValue=float], [minValue=float], [multi=boolean], [niceName=string], [nodeType=string], [numberOfChildren=uint], [parent=string], [proxy=string], [readable=boolean], [shortName=string], [softMaxValue=float], [softMinValue=float], [storable=boolean], [usedAsColor=boolean], [usedAsFilename=boolean], [usedAsProxy=boolean], [worldSpace=boolean], [writable=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Defines the attachment of a metadata structure to one or more selected objects.",
            "name": "addMetadata",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of nodes to which a new Stream was successfully added (create mode)",
                    "type": "string[]"
                },
                {
                    "description": "List of channel types containing metadata on an object when querying the channelName flag",
                    "type": "string[]"
                },
                {
                    "description": "List of stream names on an object when querying the streamName flag",
                    "type": "string[]"
                },
                {
                    "description": "List of structures used by an object's metadata Streams when querying the structure flag",
                    "type": "string[]"
                },
                {
                    "description": "List of index types used by an object when querying the indexType flag",
                    "type": "string[]"
                }
            ],
            "synopsis": "addMetadata([channelName=string], [channelType=string], [indexType=string], [scene=boolean], [streamName=string], [structure=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "Adds per-point (per-cv, per-vertex, or per-particle) attribute capability for an attribute of an emitter or field.",
            "name": "addPP",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Returns names of emitters/fields for which the per-point capability was added for the specified attribute.",
                    "type": "string[]"
                }
            ],
            "synopsis": "addPP( objects , [attribute=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command gets the list of attributes on a node or node type and creates nodes of type TdnAffect, one for each attribute, that are connected iff the source node's attribute affects the destination node's attribute.",
            "name": "affectedNet",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "affectedNet( [node...] , [type=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command returns the list of attributes on a node or node type which affect the named attribute.",
            "name": "affects",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of affected/affecting attributes",
                    "type": "string"
                }
            ],
            "synopsis": "affects(string, [by=boolean], [type=string])"
        },
        {
            "categories": [
                "Animation",
                "Constraints"
            ],
            "description": "Constrain an object's orientation to point at a target object or at the average position of a number of targets.",
            "name": "aimConstraint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "name of the created constraint node",
                    "type": "string[]"
                }
            ],
            "synopsis": "aimConstraint( [target...] object , [aimVector=[float, float, float]], [layer=string], [maintainOffset=boolean], [name=string], [offset=[float, float, float]], [remove=boolean], [skip=string], [targetList=boolean], [upVector=[float, float, float]], [weight=float], [weightAliasList=boolean], [worldUpObject=name], [worldUpType=string], [worldUpVector=[float, float, float]])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "For each listed object, the command creates a new field.",
            "name": "air",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "air( [objects] , [attenuation=float], [directionX=float], [directionY=float], [directionZ=float], [enableSpread=boolean], [fanSetup=boolean], [inheritRotation=boolean], [inheritVelocity=float], [magnitude=float], [maxDistance=linear], [name=string], [perVertex=boolean], [position=[linear, linear, linear]], [speed=float], [spread=float], [torusSectionRadius=linear], [velocityComponentOnly=boolean], [volumeExclusion=boolean], [volumeOffset=[linear, linear, linear]], [volumeShape=string], [volumeSweep=angle], [wakeSetup=boolean], [windSetup=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Allows aliases (alternate names) to be defined for any attribute of a specified node.",
            "name": "aliasAttr",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "in query mode.",
                    "type": "string[]"
                }
            ],
            "synopsis": "aliasAttr([remove=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Align or spread objects along X Y and Z axis.",
            "name": "align",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "true/false",
                    "type": "boolean"
                }
            ],
            "synopsis": "align([alignToLead=boolean], [coordinateSystem=name], [xAxis=string], [yAxis=string], [zAxis=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The alignCtx command creates a tool for aligning and distributing objects.",
            "name": "alignCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "alignCtx( [contextName] , [align=boolean], [anchorFirstObject=boolean], [distribute=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [showAlignTouch=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The curve align command is used to align curves in maya.",
            "name": "alignCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "alignCurve( [curve] [curve] , [attach=boolean], [caching=boolean], [constructionHistory=boolean], [curvatureContinuity=boolean], [curvatureScale1=float], [curvatureScale2=float], [joinParameter=float], [keepMultipleKnots=boolean], [name=string], [nodeState=int], [object=boolean], [positionalContinuity=boolean], [positionalContinuityType=int], [replaceOriginal=boolean], [reverse1=boolean], [reverse2=boolean], [tangentContinuity=boolean], [tangentContinuityType=int], [tangentScale1=float], [tangentScale2=float])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The surface align command is used to align surfaces in maya.",
            "name": "alignSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "alignSurface( [surface] [surface] , [attach=boolean], [caching=boolean], [constructionHistory=boolean], [curvatureContinuity=boolean], [curvatureScale1=float], [curvatureScale2=float], [directionU=boolean], [joinParameter=float], [keepMultipleKnots=boolean], [name=string], [nodeState=int], [object=boolean], [positionalContinuity=boolean], [positionalContinuityType=int], [replaceOriginal=boolean], [reverse1=boolean], [reverse2=boolean], [swap1=boolean], [swap2=boolean], [tangentContinuity=boolean], [tangentContinuityType=int], [tangentScale1=float], [tangentScale2=float], [twist=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This command returns a list containing the type names of every kind of creatable node registered with the system.",
            "name": "allNodeTypes",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of node types",
                    "type": "string[]"
                }
            ],
            "synopsis": "allNodeTypes([includeAbstract=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Lights"
            ],
            "description": "TlightCmd is the base class for other light commands.",
            "name": "ambientLight",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "when querying the rgb or shadowColor flags double when querying the intensity flag boolean when querying the useRayTraceShadows or exclusive flags linear[] when querying the position flag angle[] when querying the rotation flag string when querying the name flag",
                    "type": "double[]"
                },
                {
                    "description": "Light shape name",
                    "type": "string"
                }
            ],
            "synopsis": "ambientLight([ambientShade=float], [discRadius=linear], [exclusive=boolean], [intensity=float], [name=string], [position=[linear, linear, linear]], [rgb=[float, float, float]], [rotation=[angle, angle, angle]], [shadowColor=[float, float, float]], [shadowDither=float], [shadowSamples=int], [softShadow=boolean], [useRayTraceShadows=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "Returns the axis and angle required to rotate one vector onto another.",
            "name": "angleBetween",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "3 Euler angles or axis and angle",
                    "type": "float[]"
                },
                {
                    "description": "When constructionHistory flag is used.",
                    "type": "string"
                }
            ],
            "synopsis": "angleBetween([caching=boolean], [constructionHistory=boolean], [euler=boolean], [nodeState=int], [vector1=[linear, linear, linear]], [vector1X=linear], [vector1Y=linear], [vector1Z=linear], [vector2=[linear, linear, linear]], [vector2X=linear], [vector2Y=linear], [vector2Z=linear])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Edit a characteristic of a graph editor.",
            "name": "animCurveEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Editor name",
                    "type": "string"
                }
            ],
            "synopsis": "animCurveEditor( editorName , [areCurvesSelected=boolean], [autoFit=string], [autoFitTime=string], [classicMode=boolean], [clipTime=string], [constrainDrag=uint], [control=boolean], [curvesShown=boolean], [curvesShownForceUpdate=boolean], [defineTemplate=string], [denormalizeCurvesCommand=string], [displayActiveKeyTangents=string], [displayActiveKeys=string], [displayInfinities=string], [displayKeys=string], [displayNormalized=boolean], [displayTangents=string], [displayValues=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [highlightAffectedCurves=boolean], [highlightConnection=string], [keyMinScale=float], [keyScale=float], [keyingTime=string], [lockMainConnection=boolean], [lockPlayRangeShades=string], [lookAt=string], [mainListConnection=string], [menu=script], [normalizeCurvesCommand=string], [outliner=string], [panel=string], [parent=string], [preSelectionHighlight=boolean], [renormalizeCurves=boolean], [resultSamples=time], [resultScreenSamples=int], [resultUpdate=string], [selectionConnection=string], [showActiveCurveNames=boolean], [showBufferCurves=string], [showCurveNames=boolean], [showPlayRangeShades=string], [showResults=string], [showUpstreamCurves=boolean], [simpleKeyView=boolean], [smoothness=string], [snapTime=string], [snapValue=string], [stackedCurves=boolean], [stackedCurvesMax=float], [stackedCurvesMin=float], [stackedCurvesSpace=float], [stateString=boolean], [timelinePositionTop=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string], [valueLinesToggle=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command changes certain display options used by animation windows.",
            "name": "animDisplay",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "animDisplay([modelUpdate=string], [refAnimCurvesEditable=boolean], [timeCode=string], [timeCodeOffset=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command creates and edits animation layers.",
            "name": "animLayer",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Return values currently not documented.",
                    "type": "string"
                }
            ],
            "synopsis": "animLayer([addRelatedKG=boolean], [addSelectedObjects=boolean], [affectedLayers=boolean], [animCurves=boolean], [attribute=string], [baseAnimCurves=boolean], [bestAnimLayer=boolean], [bestLayer=boolean], [blendNodes=boolean], [children=string], [collapse=boolean], [copy=string], [copyAnimation=string], [copyNoAnimation=string], [excludeBoolean=boolean], [excludeDynamic=boolean], [excludeEnum=boolean], [excludeRotate=boolean], [excludeScale=boolean], [excludeTranslate=boolean], [excludeVisibility=boolean], [exists=boolean], [extractAnimation=string], [findCurveForPlug=string], [forceUIRebuild=boolean], [forceUIRefresh=boolean], [layeredPlug=string], [lock=boolean], [maxLayers=boolean], [moveLayerAfter=string], [moveLayerBefore=string], [mute=boolean], [override=boolean], [parent=string], [passthrough=boolean], [preferred=boolean], [removeAllAttributes=boolean], [removeAttribute=string], [root=string], [selected=boolean], [solo=boolean], [weight=float], [writeBlendnodeDestinations=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command allows you to specify the current view range within an animation editor.",
            "name": "animView",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "animView( string[] , [endTime=time], [maxValue=float], [minValue=float], [nextView=boolean], [previousView=boolean], [startTime=time])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command is used to create an annotation to be attached to the specified objects at the specified point.",
            "name": "annotate",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Annotation added",
                    "type": "string"
                }
            ],
            "synopsis": "annotate( [objects] , [point=[linear, linear, linear]], [text=string])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "Used for displaying and hiding application home.",
            "name": "appHome",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "appHome([iconVisible=boolean], [instrument=string], [setTab=string], [toggleVisibility=boolean], [updateRecentFiles=boolean], [visible=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Take the attribute structure described by a pre-defined pattern and apply it either to a node (as dynamic attributes) or a node type (as extension attributes).",
            "name": "applyAttrPattern",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of nodes or node types to which the attribute were added",
                    "type": "int"
                }
            ],
            "synopsis": "applyAttrPattern([nodeType=string], [patternName=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Define the values of a particular set of metadata on selected objects.",
            "name": "applyMetadata",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "True if the application succeeded",
                    "type": "Boolean"
                }
            ],
            "synopsis": "applyMetadata([format=string], [scene=boolean], [value=string])"
        },
        {
            "categories": [
                "Animation",
                "MoCap"
            ],
            "description": "This command takes data in a device (refered to as a take) and converts it into a form that may be played back and reviewed.",
            "name": "applyTake",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "applyTake([channel=string], [device=string], [filter=string], [preview=boolean], [recurseChannel=boolean], [reset=boolean], [specifyChannel=boolean], [startTime=time])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "This command returns the arclength of a curve if the history flag is not set (the default).",
            "name": "arclen",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Length in non history mode.",
                    "type": "float"
                },
                {
                    "description": "Node name, in history mode.",
                    "type": "string"
                }
            ],
            "synopsis": "arclen( curve , [caching=boolean], [constructionHistory=boolean], [nodeState=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Command used to register the arcLenDimCtx tool.",
            "name": "arcLenDimContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": ": name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "arcLenDimContext([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "This command is used to create an arcLength dimension to display the arcLength of a curve/surface at a specified point on the curve/surface.",
            "name": "arcLengthDimension",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the arcLengthDimension node created",
                    "type": "string"
                }
            ],
            "synopsis": "arcLengthDimension( [curve|surface] )"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "Create an arrayMapper node and connect it to a target object.",
            "name": "arrayMapper",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Names of created arrayMapper nodes.",
                    "type": "string[]"
                }
            ],
            "synopsis": "arrayMapper([destAttr=string], [inputU=string], [inputV=string], [mapTo=string], [target=string], [type=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This is a tool context command for 3d Paint tool.",
            "name": "art3dPaintCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "art3dPaintCtx([accopacity=boolean], [afterStrokeCmd=string], [alphablendmode=string], [assigntxt=boolean], [attrnames=string], [beforeStrokeCmd=string], [brushalignment=boolean], [brushdepth=float], [brushfeedback=boolean], [brushtype=string], [clear=boolean], [commonattr=string], [dragSlider=string], [dynclonemode=boolean], [exists=boolean], [expandfilename=boolean], [extendFillColor=boolean], [fileformat=string], [filetxtaspectratio=float], [filetxtsizex=int], [filetxtsizey=int], [floodOpacity=float], [floodall=boolean], [floodselect=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [keepaspectratio=boolean], [lastRecorderCmd=string], [lastStampName=string], [lowerradius=float], [makeStroke=uint], [mappressure=string], [name=string], [opacity=float], [outline=boolean], [outwhilepaint=boolean], [paintmode=string], [paintoperationtype=string], [painttxtattr=string], [painttxtattrname=string], [pfxScale=float], [pfxWidth=float], [pickColor=boolean], [pickValue=boolean], [playbackCursor=[float, float]], [playbackPressure=float], [preserveclonesource=boolean], [pressureMapping1=int], [pressureMapping2=int], [pressureMapping3=int], [pressureMax1=float], [pressureMax2=float], [pressureMax3=float], [pressureMin1=float], [pressureMin2=float], [pressureMin3=float], [profileShapeFile=string], [projective=boolean], [radius=float], [record=boolean], [reflection=boolean], [reflectionaboutorigin=boolean], [reflectionaxis=string], [reloadtexfile=boolean], [resizeratio=float], [resizetxt=boolean], [rgbcolor=[float, float, float]], [rgbflood=[float, float, float]], [saveTextureOnStroke=boolean], [saveonstroke=boolean], [savetexture=boolean], [screenRadius=float], [selectclonesource=boolean], [shadernames=string], [shapeattr=boolean], [shapenames=string], [showactive=boolean], [soloAsDiffuse=boolean], [stampDepth=float], [stampProfile=string], [stampSpacing=float], [strokesmooth=string], [surfaceConformedBrushVertices=boolean], [tablet=boolean], [tangentOutline=boolean], [textureFilenames=boolean], [updateEraseTex=boolean], [usepressure=boolean], [worldRadius=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This is a context command to set the flags on the artAttrContext, which is the base context for attribute painting operations.",
            "name": "artAttrCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context created.",
                    "type": "string"
                }
            ],
            "synopsis": "artAttrCtx([accopacity=boolean], [activeListChangedProc=string], [afterStrokeCmd=string], [alphaclamp=string], [alphaclamplower=float], [alphaclampupper=float], [attrSelected=string], [beforeStrokeCmd=string], [brushalignment=boolean], [brushfeedback=boolean], [clamp=string], [clamplower=float], [clampupper=float], [clear=boolean], [colorAlphaValue=float], [colorRGBAValue=[float, float, float, float]], [colorRGBValue=[float, float, float]], [colorRamp=string], [colorfeedback=boolean], [colorfeedbackOverride=boolean], [colorrangelower=float], [colorrangeupper=float], [dataTypeIndex=int], [disablelighting=boolean], [dragSlider=string], [duringStrokeCmd=string], [dynclonemode=boolean], [exists=boolean], [expandfilename=boolean], [exportaspectratio=float], [exportfilemode=string], [exportfilesave=string], [exportfilesizex=int], [exportfilesizey=int], [exportfiletype=string], [filterNodes=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [importfileload=string], [importfilemode=string], [importreassign=boolean], [interactiveUpdate=boolean], [lastRecorderCmd=string], [lastStampName=string], [lowerradius=float], [makeStroke=uint], [mappressure=string], [maxvalue=float], [minvalue=float], [name=string], [objattrArray=string], [opacity=float], [outline=boolean], [outwhilepaint=boolean], [paintNodeArray=string], [paintattrselected=string], [paintmode=string], [paintoperationtype=string], [pickColor=boolean], [pickValue=boolean], [playbackCursor=[float, float]], [playbackPressure=float], [preserveclonesource=boolean], [profileShapeFile=string], [projective=boolean], [radius=float], [rampMaxColor=[float, float, float]], [rampMinColor=[float, float, float]], [record=boolean], [reflection=boolean], [reflectionaboutorigin=boolean], [reflectionaxis=string], [screenRadius=float], [selectclonesource=boolean], [selectedattroper=string], [showactive=boolean], [stampDepth=float], [stampProfile=string], [stampSpacing=float], [strokesmooth=string], [surfaceConformedBrushVertices=boolean], [tablet=boolean], [tangentOutline=boolean], [toolOffProc=string], [toolOnProc=string], [useColorRamp=boolean], [useMaxMinColor=boolean], [usepressure=boolean], [value=float], [whichTool=string], [worldRadius=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This is a context command to set the flags on the artAttrContext, which is the base context for attribute painting operations.",
            "name": "artAttrPaintVertexCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "artAttrPaintVertexCtx( [context] , [accopacity=boolean], [activeListChangedProc=string], [afterStrokeCmd=string], [alphaclamp=string], [alphaclamplower=float], [alphaclampupper=float], [attrSelected=string], [beforeStrokeCmd=string], [brushalignment=boolean], [brushfeedback=boolean], [clamp=string], [clamplower=float], [clampupper=float], [clear=boolean], [colorAlphaValue=float], [colorRGBAValue=[float, float, float, float]], [colorRGBValue=[float, float, float]], [colorRamp=string], [colorfeedback=boolean], [colorfeedbackOverride=boolean], [colorrangelower=float], [colorrangeupper=float], [dataTypeIndex=int], [disablelighting=boolean], [dragSlider=string], [duringStrokeCmd=string], [dynclonemode=boolean], [exists=boolean], [expandfilename=boolean], [exportaspectratio=float], [exportfilemode=string], [exportfilesave=string], [exportfilesizex=int], [exportfilesizey=int], [exportfiletype=string], [filterNodes=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [importfileload=string], [importfilemode=string], [importreassign=boolean], [interactiveUpdate=boolean], [lastRecorderCmd=string], [lastStampName=string], [lowerradius=float], [makeStroke=uint], [mappressure=string], [maxvalue=float], [minvalue=float], [name=string], [objattrArray=string], [opacity=float], [outline=boolean], [outwhilepaint=boolean], [paintChannel=string], [paintComponent=int], [paintNodeArray=string], [paintNumChannels=int], [paintRGBA=boolean], [paintVertexFace=boolean], [paintattrselected=string], [paintmode=string], [paintoperationtype=string], [pickColor=boolean], [pickValue=boolean], [playbackCursor=[float, float]], [playbackPressure=float], [preserveclonesource=boolean], [profileShapeFile=string], [projective=boolean], [radius=float], [rampMaxColor=[float, float, float]], [rampMinColor=[float, float, float]], [record=boolean], [reflection=boolean], [reflectionaboutorigin=boolean], [reflectionaxis=string], [screenRadius=float], [selectclonesource=boolean], [selectedattroper=string], [showactive=boolean], [stampDepth=float], [stampProfile=string], [stampSpacing=float], [strokesmooth=string], [surfaceConformedBrushVertices=boolean], [tablet=boolean], [tangentOutline=boolean], [toolOffProc=string], [toolOnProc=string], [useColorRamp=boolean], [useMaxMinColor=boolean], [usepressure=boolean], [value=float], [vertexColorRange=boolean], [vertexColorRangeLower=float], [vertexColorRangeUpper=float], [whichTool=string], [worldRadius=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This is a context command to set the flags on the artAttrContext, which is the base context for attribute painting operations.",
            "name": "artAttrSkinPaintCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "artAttrSkinPaintCtx( [context] , [accopacity=boolean], [activeListChangedProc=string], [afterStrokeCmd=string], [alphaclamp=string], [alphaclamplower=float], [alphaclampupper=float], [attrSelected=string], [beforeStrokeCmd=string], [brushalignment=boolean], [brushfeedback=boolean], [clamp=string], [clamplower=float], [clampupper=float], [clear=boolean], [colorAlphaValue=float], [colorRGBAValue=[float, float, float, float]], [colorRGBValue=[float, float, float]], [colorRamp=string], [colorfeedback=boolean], [colorfeedbackOverride=boolean], [colorrangelower=float], [colorrangeupper=float], [dataTypeIndex=int], [disablelighting=boolean], [dragSlider=string], [duringStrokeCmd=string], [dynclonemode=boolean], [exists=boolean], [expandfilename=boolean], [exportaspectratio=float], [exportfilemode=string], [exportfilesave=string], [exportfilesizex=int], [exportfilesizey=int], [exportfiletype=string], [filterNodes=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [importfileload=string], [importfilemode=string], [importreassign=boolean], [influence=string], [interactiveUpdate=boolean], [lastRecorderCmd=string], [lastStampName=string], [lowerradius=float], [makeStroke=uint], [mappressure=string], [maxvalue=float], [minvalue=float], [name=string], [objattrArray=string], [opacity=float], [outline=boolean], [outwhilepaint=boolean], [paintNodeArray=string], [paintSelectMode=int], [paintattrselected=string], [paintmode=string], [paintoperationtype=string], [pickColor=boolean], [pickValue=boolean], [playbackCursor=[float, float]], [playbackPressure=float], [preserveclonesource=boolean], [profileShapeFile=string], [projective=boolean], [radius=float], [rampMaxColor=[float, float, float]], [rampMinColor=[float, float, float]], [record=boolean], [reflection=boolean], [reflectionaboutorigin=boolean], [reflectionaxis=string], [screenRadius=float], [selectclonesource=boolean], [selectedattroper=string], [showactive=boolean], [skinPaintMode=int], [stampDepth=float], [stampProfile=string], [stampSpacing=float], [strokesmooth=string], [surfaceConformedBrushVertices=boolean], [tablet=boolean], [tangentOutline=boolean], [toolOffProc=string], [toolOnProc=string], [useColorRamp=boolean], [useMaxMinColor=boolean], [usepressure=boolean], [value=float], [whichTool=string], [worldRadius=float], [xrayJoints=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The artAttrTool command manages the list of tool types which are used for attribute painting.",
            "name": "artAttrTool",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "artAttrTool([add=string], [exists=string], [remove=string])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "??.",
            "name": "artBuildPaintMenu",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "artBuildPaintMenu()"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This is a context command to set the flags on the artAttrContext, which is the base context for attribute painting operations.",
            "name": "artFluidAttrCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "artFluidAttrCtx([accopacity=boolean], [activeListChangedProc=string], [afterStrokeCmd=string], [alphaclamp=string], [alphaclamplower=float], [alphaclampupper=float], [attrSelected=string], [autoSave=string], [beforeStrokeCmd=string], [brushalignment=boolean], [brushfeedback=boolean], [clamp=string], [clamplower=float], [clampupper=float], [clear=boolean], [colorAlphaValue=float], [colorRGBAValue=[float, float, float, float]], [colorRGBValue=[float, float, float]], [colorRamp=string], [colorfeedback=boolean], [colorfeedbackOverride=boolean], [colorrangelower=float], [colorrangeupper=float], [currentPaintableFluid=string], [dataTypeIndex=int], [delaySelectionChanged=boolean], [disablelighting=boolean], [displayAsRender=boolean], [displayVelocity=boolean], [doAutoSave=boolean], [dragSlider=string], [duringStrokeCmd=string], [dynclonemode=boolean], [exists=boolean], [expandfilename=boolean], [exportaspectratio=float], [exportfilemode=string], [exportfilesave=string], [exportfilesizex=int], [exportfilesizey=int], [exportfiletype=string], [filterNodes=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [importfileload=string], [importfilemode=string], [importreassign=boolean], [interactiveUpdate=boolean], [lastRecorderCmd=string], [lastStampName=string], [lowerradius=float], [makeStroke=uint], [mappressure=string], [maxvalue=float], [minvalue=float], [name=string], [objattrArray=string], [opacity=float], [outline=boolean], [outwhilepaint=boolean], [paintNodeArray=string], [paintattrselected=string], [paintmode=string], [paintoperationtype=string], [pickColor=boolean], [pickValue=boolean], [playbackCursor=[float, float]], [playbackPressure=float], [preserveclonesource=boolean], [profileShapeFile=string], [projective=boolean], [property=string], [radius=float], [rampMaxColor=[float, float, float]], [rampMinColor=[float, float, float]], [record=boolean], [reflection=boolean], [reflectionaboutorigin=boolean], [reflectionaxis=string], [rgbValue=[float, float, float]], [screenRadius=float], [selectclonesource=boolean], [selectedattroper=string], [showactive=boolean], [stampDepth=float], [stampProfile=string], [stampSpacing=float], [strokesmooth=string], [surfaceConformedBrushVertices=boolean], [tablet=boolean], [tangentOutline=boolean], [toolOffProc=string], [toolOnProc=string], [useColorRamp=boolean], [useMaxMinColor=boolean], [useStrokeDirection=boolean], [usepressure=boolean], [value=float], [velocity=[float, float, float]], [whichTool=string], [worldRadius=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This is a context command to set the flags on the artAttrContext, which is the base context for attribute painting operations.",
            "name": "artPuttyCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "artPuttyCtx([accopacity=boolean], [activeListChangedProc=string], [afterStrokeCmd=string], [alphaclamp=string], [alphaclamplower=float], [alphaclampupper=float], [attrSelected=string], [autosmooth=boolean], [beforeStrokeCmd=string], [brushStrength=float], [brushalignment=boolean], [brushfeedback=boolean], [clamp=string], [clamplower=float], [clampupper=float], [clear=boolean], [collapsecvtol=float], [colorAlphaValue=float], [colorRGBAValue=[float, float, float, float]], [colorRGBValue=[float, float, float]], [colorRamp=string], [colorfeedback=boolean], [colorfeedbackOverride=boolean], [colorrangelower=float], [colorrangeupper=float], [dataTypeIndex=int], [disablelighting=boolean], [dispdecr=boolean], [dispincr=boolean], [dragSlider=string], [duringStrokeCmd=string], [dynclonemode=boolean], [erasesrfupd=boolean], [exists=boolean], [expandfilename=boolean], [exportaspectratio=float], [exportfilemode=string], [exportfilesave=string], [exportfilesizex=int], [exportfilesizey=int], [exportfiletype=string], [filterNodes=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [importfileload=string], [importfilemode=string], [importreassign=boolean], [interactiveUpdate=boolean], [invertrefvector=boolean], [lastRecorderCmd=string], [lastStampName=string], [lowerradius=float], [makeStroke=uint], [mappressure=string], [maxdisp=float], [maxvalue=float], [minvalue=float], [mouldtypehead=string], [mouldtypemouse=string], [mouldtypetail=string], [name=string], [objattrArray=string], [opacity=float], [outline=boolean], [outwhilepaint=boolean], [paintNodeArray=string], [paintattrselected=string], [paintmode=string], [paintoperationtype=string], [pickColor=boolean], [pickValue=boolean], [playbackCursor=[float, float]], [playbackPressure=float], [polecv=boolean], [preserveclonesource=boolean], [profileShapeFile=string], [projective=boolean], [radius=float], [rampMaxColor=[float, float, float]], [rampMinColor=[float, float, float]], [record=boolean], [reflection=boolean], [reflectionaboutorigin=boolean], [reflectionaxis=string], [refsurface=boolean], [refvector=string], [refvectoru=float], [refvectorv=float], [screenRadius=float], [selectclonesource=boolean], [selectedattroper=string], [showactive=boolean], [smoothiters=int], [stampDepth=float], [stampProfile=string], [stampSpacing=float], [stitchcorner=boolean], [stitchedgeflood=boolean], [stitchtype=string], [strokesmooth=string], [surfaceConformedBrushVertices=boolean], [tablet=boolean], [tangentOutline=boolean], [toolOffProc=string], [toolOnProc=string], [updateerasesrf=boolean], [updaterefsrf=boolean], [useColorRamp=boolean], [useMaxMinColor=boolean], [usepressure=boolean], [value=float], [whichTool=string], [worldRadius=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command is used to select/deselect/toggle components on selected surfaces using a brush interface (Maya Artisan).",
            "name": "artSelectCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "artSelectCtx([accopacity=boolean], [addselection=boolean], [afterStrokeCmd=string], [beforeStrokeCmd=string], [brushalignment=boolean], [brushfeedback=boolean], [clear=boolean], [dragSlider=string], [dynclonemode=boolean], [exists=boolean], [expandfilename=boolean], [exportaspectratio=float], [exportfilemode=string], [exportfilesave=string], [exportfilesizex=int], [exportfilesizey=int], [exportfiletype=string], [history=boolean], [image1=string], [image2=string], [image3=string], [importfileload=string], [importfilemode=string], [importreassign=boolean], [importthreshold=float], [lastRecorderCmd=string], [lastStampName=string], [lowerradius=float], [makeStroke=uint], [mappressure=string], [name=string], [opacity=float], [outline=boolean], [outwhilepaint=boolean], [paintmode=string], [paintoperationtype=string], [pickColor=boolean], [pickValue=boolean], [playbackCursor=[float, float]], [playbackPressure=float], [preserveclonesource=boolean], [profileShapeFile=string], [projective=boolean], [radius=float], [record=boolean], [reflection=boolean], [reflectionaboutorigin=boolean], [reflectionaxis=string], [screenRadius=float], [selectall=boolean], [selectclonesource=boolean], [selectop=string], [showactive=boolean], [stampDepth=float], [stampProfile=string], [stampSpacing=float], [strokesmooth=string], [surfaceConformedBrushVertices=boolean], [tablet=boolean], [tangentOutline=boolean], [toggleall=boolean], [unselectall=boolean], [usepressure=boolean], [worldRadius=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This tool allows the user to modify the set membership (add, transfer, remove cvs) on nurbs surfaces using Maya Artisan's interface.",
            "name": "artSetPaintCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "artSetPaintCtx([accopacity=boolean], [afterStrokeCmd=string], [beforeStrokeCmd=string], [brushalignment=boolean], [brushfeedback=boolean], [clear=boolean], [dragSlider=string], [dynclonemode=boolean], [exists=boolean], [expandfilename=boolean], [exportaspectratio=float], [exportfilemode=string], [exportfilesave=string], [exportfilesizex=int], [exportfilesizey=int], [exportfiletype=string], [history=boolean], [image1=string], [image2=string], [image3=string], [importfileload=string], [importfilemode=string], [importreassign=boolean], [lastRecorderCmd=string], [lastStampName=string], [lowerradius=float], [makeStroke=uint], [mappressure=string], [name=string], [objectsetnames=string], [opacity=float], [outline=boolean], [outwhilepaint=boolean], [paintmode=string], [paintoperationtype=string], [pickColor=boolean], [pickValue=boolean], [playbackCursor=[float, float]], [playbackPressure=float], [preserveclonesource=boolean], [profileShapeFile=string], [projective=boolean], [radius=float], [record=boolean], [reflection=boolean], [reflectionaboutorigin=boolean], [reflectionaxis=string], [screenRadius=float], [selectclonesource=boolean], [setcolorfeedback=boolean], [setdisplaycvs=boolean], [setopertype=string], [settomodify=string], [showactive=boolean], [stampDepth=float], [stampProfile=string], [stampSpacing=float], [strokesmooth=string], [surfaceConformedBrushVertices=boolean], [tablet=boolean], [tangentOutline=boolean], [usepressure=boolean], [worldRadius=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This is a context command to set the flags on the artAttrContext, which is the base context for attribute painting operations.",
            "name": "artUserPaintCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context created.",
                    "type": "string"
                }
            ],
            "synopsis": "artUserPaintCtx([accopacity=boolean], [activeListChangedProc=string], [afterStrokeCmd=string], [alphaclamp=string], [alphaclamplower=float], [alphaclampupper=float], [attrSelected=string], [beforeStrokeCmd=string], [brushalignment=boolean], [brushfeedback=boolean], [chunkCommand=string], [clamp=string], [clamplower=float], [clampupper=float], [clear=boolean], [colorAlphaValue=float], [colorRGBAValue=[float, float, float, float]], [colorRGBValue=[float, float, float]], [colorRamp=string], [colorfeedback=boolean], [colorfeedbackOverride=boolean], [colorrangelower=float], [colorrangeupper=float], [dataTypeIndex=int], [disablelighting=boolean], [dragSlider=string], [duringStrokeCmd=string], [dynclonemode=boolean], [exists=boolean], [expandfilename=boolean], [exportaspectratio=float], [exportfilemode=string], [exportfilesave=string], [exportfilesizex=int], [exportfilesizey=int], [exportfiletype=string], [filterNodes=boolean], [finalizeCmd=string], [fullpaths=boolean], [getArrayAttrCommand=string], [getSurfaceCommand=string], [getValueCommand=string], [history=boolean], [image1=string], [image2=string], [image3=string], [importfileload=string], [importfilemode=string], [importreassign=boolean], [initializeCmd=string], [interactiveUpdate=boolean], [lastRecorderCmd=string], [lastStampName=string], [lowerradius=float], [makeStroke=uint], [mappressure=string], [maxvalue=float], [minvalue=float], [name=string], [objattrArray=string], [opacity=float], [outline=boolean], [outwhilepaint=boolean], [paintNodeArray=string], [paintattrselected=string], [paintmode=string], [paintoperationtype=string], [pickColor=boolean], [pickValue=boolean], [playbackCursor=[float, float]], [playbackPressure=float], [preserveclonesource=boolean], [profileShapeFile=string], [projective=boolean], [radius=float], [rampMaxColor=[float, float, float]], [rampMinColor=[float, float, float]], [record=boolean], [reflection=boolean], [reflectionaboutorigin=boolean], [reflectionaxis=string], [screenRadius=float], [selectclonesource=boolean], [selectedattroper=string], [setArrayValueCommand=string], [setValueCommand=string], [showactive=boolean], [stampDepth=float], [stampProfile=string], [stampSpacing=float], [strokesmooth=string], [surfaceConformedBrushVertices=boolean], [tablet=boolean], [tangentOutline=boolean], [toolCleanupCmd=string], [toolOffProc=string], [toolOnProc=string], [toolSetupCmd=string], [useColorRamp=boolean], [useMaxMinColor=boolean], [usepressure=boolean], [value=float], [whichTool=string], [worldRadius=float])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command tesselates a NURBS surface and produces a polygonal surface.",
            "name": "arubaNurbsToPoly",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The polygon and optionally the dependency node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "arubaNurbsToPoly( [surface] , [caching=boolean], [constructionHistory=boolean], [localSpace=boolean], [name=string], [nodeState=int], [object=boolean], [worldSpace=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Command to register assemblies for the scene assembly framework, to create them, and to edit and query them.",
            "name": "assembly",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "assembly([active=string], [activeLabel=string], [canCreate=string], [createOptionBoxProc=script], [createRepresentation=string], [defaultType=string], [deleteRepresentation=string], [deregister=string], [input=string], [isAType=string], [isTrackingMemberEdits=string], [label=string], [listRepTypes=boolean], [listRepTypesProc=script], [listRepresentations=boolean], [listTypes=boolean], [name=string], [newRepLabel=string], [postCreateUIProc=script], [proc=script], [renameRepresentation=string], [repLabel=string], [repName=string], [repNamespace=string], [repPostCreateUIProc=string], [repPreCreateUIProc=string], [repType=string], [repTypeLabel=string], [repTypeLabelProc=script], [type=string])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command allows the user to assign hotkeys and manipulate the internal array of named command objects.",
            "name": "assignCommand",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "assignCommand( int , [addDivider=string], [altModifier=boolean], [annotation=string], [command=script], [commandModifier=boolean], [ctrlModifier=boolean], [data1=string], [data2=string], [data3=string], [delete=int], [dividerString=string], [enableCommandRepeat=boolean], [factorySettings=boolean], [index=int], [keyArray=boolean], [keyString=string], [keyUp=boolean], [name=boolean], [numDividersPreceding=int], [numElements=boolean], [optionModifier=boolean], [sortByKey=boolean], [sourceUserCommands=boolean])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command associates a command string (i.",
            "name": "assignInputDevice",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "assignInputDevice([clutch=string], [continuous=boolean], [device=string], [immediate=boolean], [multiple=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Sets viewport factories for displays as materials or textures.",
            "name": "assignViewportFactories",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "assignViewportFactories([string], [materialFactory=string], [nodeType=string], [textureFactory=string])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "This attach command is used to attach curves.",
            "name": "attachCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "attachCurve( curve curve [curve...] , [blendBias=float], [blendKnotInsertion=boolean], [caching=boolean], [constructionHistory=boolean], [keepMultipleKnots=boolean], [method=int], [name=string], [nodeState=int], [object=boolean], [parameter=float], [replaceOriginal=boolean], [reverse1=boolean], [reverse2=boolean])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command associates a device/axis pair with a node/attribute pair.",
            "name": "attachDeviceAttr",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "attachDeviceAttr([attribute=string], [axis=string], [camera=boolean], [cameraRotate=boolean], [cameraTranslate=boolean], [clutch=string], [device=string], [selection=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This attach command is used to attach surfaces.",
            "name": "attachSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "attachSurface( [surface] [surface] , [blendBias=float], [blendKnotInsertion=boolean], [caching=boolean], [constructionHistory=boolean], [directionU=boolean], [keepMultipleKnots=boolean], [method=int], [name=string], [nodeState=int], [object=boolean], [parameter=float], [replaceOriginal=boolean], [reverse1=boolean], [reverse2=boolean], [swap1=boolean], [swap2=boolean], [twist=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "attrColorSliderGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the name of the created group)",
                    "type": "string"
                }
            ],
            "synopsis": "attrColorSliderGrp( groupName , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [alphaValue=float], [annotation=string], [attrNavDecision=[name, string]], [attribute=string], [backgroundColor=[float, float, float]], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [hsvValue=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rgbValue=[float, float, float]], [rowAttach=[int, string, int]], [showButton=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a control of the type most appropriate for the specified attribute, and associates the control with the attribute.",
            "name": "attrControlGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The control name.",
                    "type": "string"
                }
            ],
            "synopsis": "attrControlGrp([annotation=string], [attribute=name], [changeCommand=script], [enable=boolean], [exists=boolean], [handlesAttribute=name], [hideMapButton=boolean], [label=string], [preventOverride=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "This command creates an enumerated attribute control.",
            "name": "attrEnumOptionMenu",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The full name of the control.",
                    "type": "string"
                }
            ],
            "synopsis": "attrEnumOptionMenu( [string] , [annotation=string], [attribute=name], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [enumeratedItem=[int, string]], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "attrEnumOptionMenuGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The full name of the control on creation.",
                    "type": "string"
                }
            ],
            "synopsis": "attrEnumOptionMenuGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [attribute=name], [backgroundColor=[float, float, float]], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [enumeratedItem=[int, string]], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowAttach=[int, string, int]], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "attrFieldGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The full name of the control.",
                    "type": "string"
                }
            ],
            "synopsis": "attrFieldGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [attribute=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [extraButton=boolean], [extraButtonCommand=script], [extraButtonIcon=string], [extraLabel=string], [forceAddMapButton=boolean], [fullPathName=boolean], [height=int], [hideMapButton=boolean], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [maxValue=float], [minValue=float], [noBackground=boolean], [numberOfFields=int], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [rowAttach=[int, string, int]], [statusBarMessage=string], [step=float], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "attrFieldSliderGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "attrFieldSliderGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [attribute=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [extraButton=boolean], [extraButtonCommand=script], [extraButtonIcon=string], [fieldMaxValue=float], [fieldMinValue=float], [fieldStep=float], [forceAddMapButton=boolean], [fullPathName=boolean], [height=int], [hideMapButton=boolean], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [maxValue=float], [minValue=float], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [rowAttach=[int, string, int]], [sliderMaxValue=float], [sliderMinValue=float], [sliderStep=float], [statusBarMessage=string], [step=float], [useTemplate=string], [vertical=boolean], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command lists all of the attributes that are marked with certain flags.",
            "name": "attributeInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of attributes matching criteria",
                    "type": "string[]"
                }
            ],
            "synopsis": "attributeInfo([allAttributes=boolean], [bool=boolean], [enumerated=boolean], [hidden=boolean], [inherited=boolean], [internal=boolean], [leaf=boolean], [logicalAnd=boolean], [multi=boolean], [short=boolean], [type=string], [userInterface=boolean], [writable=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "Action to generate popup connection menus for Hypershade.",
            "name": "attributeMenu",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "attributeMenu([beginMenu=boolean], [editor=string], [finishMenu=boolean], [inputs=boolean], [plug=name], [regPulldownMenuCommand=string], [unregPulldownMenuCommand=int])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command takes one \"node.",
            "name": "attributeName",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "attributeName([leaf=boolean], [long=boolean], [nice=boolean], [short=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "attributeQuery returns information about the configuration of an attribute.",
            "name": "attributeQuery",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "when querying ranges or default values",
                    "type": "float[]"
                },
                {
                    "description": "when querying attribute flags",
                    "type": "boolean"
                }
            ],
            "synopsis": "attributeQuery([affectsAppearance=boolean], [affectsWorldspace=boolean], [attributeType=boolean], [cachedInternally=boolean], [categories=boolean], [channelBox=boolean], [connectable=boolean], [enum=boolean], [exists=boolean], [hidden=boolean], [indeterminant=boolean], [indexMatters=boolean], [internal=boolean], [internalGet=boolean], [internalSet=boolean], [keyable=boolean], [listChildren=boolean], [listDefault=boolean], [listEnum=boolean], [listParent=boolean], [listSiblings=boolean], [localizedListEnum=boolean], [longName=boolean], [maxExists=boolean], [maximum=boolean], [message=boolean], [minExists=boolean], [minimum=boolean], [multi=boolean], [niceName=boolean], [node=name], [numberOfChildren=boolean], [range=boolean], [rangeExists=boolean], [readable=boolean], [renderSource=boolean], [shortName=boolean], [softMax=boolean], [softMaxExists=boolean], [softMin=boolean], [softMinExists=boolean], [softRange=boolean], [softRangeExists=boolean], [storable=boolean], [type=string], [typeExact=string], [usedAsColor=boolean], [usedAsFilename=boolean], [usesMultiBuilder=boolean], [worldspace=boolean], [writable=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "attrNavigationControlGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "attrNavigationControlGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [attrNavDecision=[name, string]], [attribute=name], [backgroundColor=[float, float, float]], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [connectAttrToDropped=script], [connectNodeToDropped=script], [connectToExisting=script], [createNew=script], [defaultTraversal=script], [defineTemplate=string], [delete=string], [disconnect=script], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [extraButton=boolean], [extraButtonCommand=script], [extraButtonIcon=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [ignore=script], [ignoreNotSupported=boolean], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [noIgnorableMenu=boolean], [noKeyableMenu=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [relatedNodes=script], [rowAttach=[int, string, int]], [statusBarMessage=string], [unignore=script], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This command is used for inserting and removing tracks related to the audio clips displayed in the sequencer.",
            "name": "audioTrack",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "audioTrack([insertTrack=uint], [lock=boolean], [mute=boolean], [numTracks=uint], [removeEmptyTracks=boolean], [removeTrack=uint], [solo=boolean], [swapTracks=[uint, uint]], [title=string], [track=uint])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "With no flags, this command will set keyframes on all attributes that have been modified since an \"autoKeyframe -state on\" command was issued.",
            "name": "autoKeyframe",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of keyframes set.",
                    "type": "int"
                }
            ],
            "synopsis": "autoKeyframe([addAttr=name], [characterOption=string], [listAttr=boolean], [noReset=boolean], [state=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command takes a point in the centre of the current modeling pane and projects it onto the live surface.",
            "name": "autoPlace",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Placement location in 3D space",
                    "type": "float[]"
                }
            ],
            "synopsis": "autoPlace([useMouse=boolean])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Provides an interface to the auto-save mechanism.",
            "name": "autoSave",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "autoSave([destination=int], [destinationFolder=boolean], [enable=boolean], [folder=string], [interval=float], [limitBackups=boolean], [maxBackups=int], [perform=boolean], [prompt=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Allows user to pause and restart background evaluations.",
            "name": "backgroundEvaluationManager",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "backgroundEvaluationManager([interrupt=boolean], [mode=string], [pause=boolean], [resume=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command is used to bake clips and blends into a single clip.",
            "name": "bakeClip",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "clip name",
                    "type": "string"
                }
            ],
            "synopsis": "bakeClip([blend=[uint, uint]], [clipIndex=uint], [keepOriginals=boolean], [name=string])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "Given a rigged character, whose mesh shape is determined by a set of deformers, bakeDeformer calculates linear blend skin weights most closely approximating observed deformations.",
            "name": "bakeDeformer",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "BakeDeformer name",
                    "type": "string"
                }
            ],
            "synopsis": "bakeDeformer([colorizeSkeleton=boolean], [customRangeOfMotion=timerange], [dstMeshName=string], [dstSkeletonName=string], [hierarchy=boolean], [influences=string[]], [maxInfluences=int], [pruneWeights=float], [smoothWeights=int], [srcMeshName=string], [srcSkeletonName=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command is used to bake sections of the construction history of a shape node when possible.",
            "name": "bakePartialHistory",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "name of shapes that were baked",
                    "type": "string"
                }
            ],
            "synopsis": "bakePartialHistory([allShapes=boolean], [postSmooth=boolean], [preCache=boolean], [preDeformers=boolean], [prePostDeformers=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command allows the user to replace a chain of dependency nodes which define the value for an attribute with a single animation curve.",
            "name": "bakeResults",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- The number of channels baked",
                    "type": "int"
                }
            ],
            "synopsis": "bakeResults( objects , [animation=string], [attribute=string], [bakeOnOverrideLayer=boolean], [controlPoints=boolean], [destinationLayer=string], [disableImplicitControl=boolean], [float=floatrange], [hierarchy=string], [includeUpperBound=boolean], [index=uint], [minimizeRotation=boolean], [oversamplingRate=uint], [preserveOutsideKeys=boolean], [removeBakedAnimFromLayer=boolean], [removeBakedAttributeFromLayer=boolean], [resolveWithoutLayer=string], [sampleBy=time], [shape=boolean], [simulation=boolean], [smart=[[, boolean, float, ]]], [sparseAnimCurveBake=boolean], [time=timerange])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command operates on a keyset.",
            "name": "bakeSimulation",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "bakeSimulation( objects , [animation=string], [attribute=string], [bakeOnOverrideLayer=boolean], [controlPoints=boolean], [destinationLayer=string], [disableImplicitControl=boolean], [float=floatrange], [hierarchy=string], [includeUpperBound=boolean], [index=uint], [minimizeRotation=boolean], [preserveOutsideKeys=boolean], [removeBakedAnimFromLayer=boolean], [removeBakedAttributeFromLayer=boolean], [resolveWithoutLayer=string], [sampleBy=time], [shape=boolean], [simulation=boolean], [smart=[[, boolean, float, ]]], [sparseAnimCurveBake=boolean], [time=timerange])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This is the class for the commands that edit and/or query templates.",
            "name": "baseTemplate",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "baseTemplate([string], [exists=boolean], [fileName=string], [force=boolean], [load=boolean], [matchFile=string], [silent=boolean], [unload=boolean], [viewList=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "A view defines the layout information for the attributes of a particular node type or container.",
            "name": "baseView",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "baseView(string, [itemInfo=string], [itemList=boolean], [viewDescription=boolean], [viewLabel=boolean], [viewList=boolean], [viewName=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "The batchRender command is used to spawn off a separate rendering session of the current maya file.",
            "name": "batchRender",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "batchRender([filename=string], [melCommand=string], [numProcs=int], [preRenderCommand=string], [remoteRenderMachine=string], [renderCommandOptions=string], [showImage=boolean], [status=string], [useRemoteRender=boolean], [useStandalone=boolean], [verbosity=int])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The bevel command creates a new bevel surface for the specified curve.",
            "name": "bevel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "bevel( [object] , [bevelShapeType=int], [caching=boolean], [constructionHistory=boolean], [cornerType=int], [depth=linear], [extrudeDepth=linear], [joinSurfaces=boolean], [name=string], [nodeState=int], [numberOfSides=int], [object=boolean], [polygon=int], [range=boolean], [tolerance=linear], [width=linear])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The bevelPlus command creates a new bevel surface for the specified curves using a given style curve.",
            "name": "bevelPlus",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name(s) and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "bevelPlus( curve [curve curve...] , [bevelInside=boolean], [capSides=int], [constructionHistory=boolean], [innerStyle=int], [joinSurfaces=boolean], [name=string], [normalsOutwards=boolean], [numberOfSides=int], [outerStyle=int], [polygon=int], [range=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command provides a queryable interface for Bezier curve shapes.",
            "name": "bezierAnchorPreset",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(number of modified anchors)",
                    "type": "int"
                }
            ],
            "synopsis": "bezierAnchorPreset([preset=int])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The bezierAnchorState command provides an easy interface to modify anchor states:.",
            "name": "bezierAnchorState",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(number of modified anchors)",
                    "type": "int"
                }
            ],
            "synopsis": "bezierAnchorState([even=boolean], [smooth=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The bezierCurveToNurbs command attempts to convert an existing NURBS curve to a Bezier curve.",
            "name": "bezierCurveToNurbs",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(object name and node name)",
                    "type": "string[]"
                }
            ],
            "synopsis": "bezierCurveToNurbs( curve )"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command provides a queryable interface for Bezier curve shapes.",
            "name": "bezierInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Queried value",
                    "type": "int"
                }
            ],
            "synopsis": "bezierInfo([anchorFromCV=int], [cvFromAnchor=int], [isAnchorSelected=boolean], [isTangentSelected=boolean], [onlyAnchorsSelected=boolean], [onlyTangentsSelected=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "This command binds the currently selected objects to the currently selected skeletons.",
            "name": "bindSkin",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "bindSkin( [objects] , [byClosestPoint=boolean], [byPartition=boolean], [colorJoints=boolean], [delete=boolean], [doNotDescend=boolean], [enable=boolean], [name=string], [partition=string], [toAll=boolean], [toSelectedBones=boolean], [toSkeleton=boolean], [unbind=boolean], [unbindKeepHistory=boolean], [unlock=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Command to assign nodes to bins.",
            "name": "binMembership",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "binMembership([addToBin=string], [exists=string], [inheritBinsFromNodes=name], [isValidBinName=string], [listBins=boolean], [makeExclusive=string], [notifyChanged=boolean], [removeFromBin=string])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command creates a surface by blending between given curves.",
            "name": "blend2",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "blend2( curve curve [curve...] , [autoAnchor=boolean], [autoNormal=boolean], [caching=boolean], [constructionHistory=boolean], [crvsInFirstRail=int], [flipLeftNormal=boolean], [flipRightNormal=boolean], [leftAnchor=float], [leftEnd=float], [leftStart=float], [multipleKnots=boolean], [name=string], [nodeState=int], [object=boolean], [polygon=int], [positionTolerance=float], [reverseLeft=boolean], [reverseRight=boolean], [rightAnchor=float], [rightEnd=float], [rightStart=float], [tangentTolerance=float])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates a blendShape deformer, which blends in specified amounts of each target shape to the initial base shape.",
            "name": "blendShape",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the blendShape node name)",
                    "type": "string[]"
                }
            ],
            "synopsis": "blendShape( [objects] , [after=boolean], [afterReference=boolean], [automatic=boolean], [before=boolean], [components=boolean], [copyDelta=[uint, uint, uint]], [copyInBetweenDelta=[uint, uint, uint, uint]], [copyWeights=[uint, uint, uint]], [deformerTools=boolean], [envelope=float], [exclusive=string], [export=string], [exportTarget=[int, int]], [flipTarget=[uint, uint]], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [inBetween=boolean], [inBetweenIndex=uint], [inBetweenType=string], [includeHiddenSelections=boolean], [ip=string], [mergeSource=int], [mergeTarget=uint], [mirrorDirection=uint], [mirrorTarget=[uint, uint]], [name=string], [normalizationGroups=boolean], [origin=string], [parallel=boolean], [prune=boolean], [remove=boolean], [resetTargetDelta=[uint, uint]], [selectedComponents=boolean], [split=boolean], [suppressDialog=boolean], [symmetryAxis=string], [symmetryEdge=string], [symmetrySpace=uint], [tangentSpace=boolean], [target=[string, uint, string, float]], [topologyCheck=boolean], [transform=string], [useComponentTags=boolean], [weight=[uint, float]], [weightCount=uint])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates an editor that derives from the base editor class that has controls for blendShape, control nodes.",
            "name": "blendShapeEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the editor",
                    "type": "string"
                }
            ],
            "synopsis": "blendShapeEditor( string , [control=boolean], [defineTemplate=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [highlightConnection=string], [lockMainConnection=boolean], [mainListConnection=string], [panel=string], [parent=string], [selectionConnection=string], [stateString=boolean], [targetControlList=boolean], [targetList=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string], [verticalSliders=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates a panel that derives from the base panel class that houses a blendShapeEditor.",
            "name": "blendShapePanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the panel",
                    "type": "string"
                }
            ],
            "synopsis": "blendShapePanel( string , [blendShapeEditor=boolean], [control=boolean], [copy=string], [createString=boolean], [defineTemplate=string], [docTag=string], [editString=boolean], [exists=boolean], [init=boolean], [isUnique=boolean], [label=string], [menuBarRepeatLast=boolean], [menuBarVisible=boolean], [needsInit=boolean], [parent=string], [popupMenuProcedure=script], [replacePanel=string], [tearOff=boolean], [tearOffCopy=string], [tearOffRestore=boolean], [unParent=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "A blendTwoAttr nodes takes two inputs, and blends the values of the inputs from one to the other, into an output value.",
            "name": "blendTwoAttr",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The names of the blendTwoAttr dependency nodes that were created.",
                    "type": "string[]"
                }
            ],
            "synopsis": "blendTwoAttr( [objects] , [attribute=string], [attribute0=name], [attribute1=name], [blender=name], [controlPoints=boolean], [driver=int], [name=string], [shape=boolean], [time=timerange])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command creates a blind data type, which is represented by a blindDataTemplate node in the DG.",
            "name": "blindDataType",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of nodes created",
                    "type": "string"
                }
            ],
            "synopsis": "blindDataType([dataType=string], [longDataName=string], [longNames=boolean], [query=boolean], [shortDataName=string], [shortNames=boolean], [typeId=int], [typeNames=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "This command creates/edits/queries a boneLattice deformer.",
            "name": "boneLattice",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of bone lattice algorithm node created/edited.",
                    "type": "string"
                }
            ],
            "synopsis": "boneLattice( objects , [after=boolean], [afterReference=boolean], [before=boolean], [bicep=float], [components=boolean], [deformerTools=boolean], [exclusive=string], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [joint=string], [lengthIn=float], [lengthOut=float], [name=string], [parallel=boolean], [prune=boolean], [remove=boolean], [selectedComponents=boolean], [split=boolean], [transform=string], [tricep=float], [useComponentTags=boolean], [widthLeft=float], [widthRight=float])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command produces a boundary surface given 3 or 4 curves.",
            "name": "boundary",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "boundary( string string string [string] , [caching=boolean], [constructionHistory=boolean], [endPoint=boolean], [endPointTolerance=linear], [name=string], [nodeState=int], [object=boolean], [order=boolean], [polygon=int], [range=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a dolly context.",
            "name": "boxDollyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context",
                    "type": "string"
                }
            ],
            "synopsis": "boxDollyCtx([alternateContext=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [toolName=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a box zoom context.",
            "name": "boxZoomCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context",
                    "type": "string"
                }
            ],
            "synopsis": "boxZoomCtx( object , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [zoomScale=float])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command operates on a keyset.",
            "name": "bufferCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of buffer curves",
                    "type": "int"
                }
            ],
            "synopsis": "bufferCurve( animatedObject , [animation=string], [attribute=string], [controlPoints=boolean], [exists=boolean], [float=floatrange], [hierarchy=string], [includeUpperBound=boolean], [index=uint], [overwrite=boolean], [shape=boolean], [swap=boolean], [time=timerange], [useReferencedCurve=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command handles building the \"dynamic\" Bookmark menu, to show all bookmarks (\"sets\") of a specified type (\"sets -text\").",
            "name": "buildBookmarkMenu",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "buildBookmarkMenu( string , [editor=string], [type=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command handles building the \"dynamic\" Keyframe menu, to show attributes of currently selected objects, filtered by the current manipulator.",
            "name": "buildKeyframeMenu",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "buildKeyframeMenu( string )"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Create a button control capable of displaying a textual label and executing a command when selected by the user.",
            "name": "button",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "button( [string] , [actOnPress=boolean], [actionIsSubstitute=boolean], [align=string], [annotation=string], [backgroundColor=[float, float, float]], [command=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [recomputeSize=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This creates a button manipulator.",
            "name": "buttonManip",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "buttonManip( script [selectionItem] , [icon=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command controls caching configuration.",
            "name": "cacheEvaluator",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The state of whether the memory limit has been reached or not ('out', 'okay', 'low', or 'unlimited' with the 'resourceUsage' flag)",
                    "type": "string"
                },
                {
                    "description": "The state of whether the safe mode is enabled (with the 'safeMode' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The state of whether the safe mode was triggered (with the 'safeModeTriggered' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The state of whether prevent frame skipping is enabled (with the 'preventFrameSkip' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The state of whether cache in background was calculated (with the 'waitForCache' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The available cache names (with the 'listCacheNames' flag)",
                    "type": "string[]"
                },
                {
                    "description": "The list of nodes currently cached by the cache evaluator (with the 'listCachedNodes' flag).",
                    "type": "string"
                },
                {
                    "description": "The available value names (with the 'listValueNames' flag)",
                    "type": "string[]"
                },
                {
                    "description": "The parameter value for the requested node(s) (with the 'cacheName' flag)",
                    "type": "string[]"
                },
                {
                    "description": "The state of whether delegate evaluation is enabled for the requested node(s) (with the 'delegateEvaluation' flag)",
                    "type": "string[]"
                },
                {
                    "description": "The creation parameters for the current mode as a JSON array (with the 'creationParameters' flag)",
                    "type": "string"
                },
                {
                    "description": "The list of nodes marked as caching point (with the 'cachingPoints' flag)",
                    "type": "string[]"
                },
                {
                    "description": "The list of nodes forced as caching points because of layered evaluation (with the 'layeredEvaluationCachingPoints' flag)",
                    "type": "string[]"
                },
                {
                    "description": "The list of frames being cached (with the 'cachedFrames' flag)",
                    "type": "int[]"
                },
                {
                    "description": "The current cache fill mode (with the 'cacheFillMode' flag)",
                    "type": "string"
                },
                {
                    "description": "The current cache fill order (with the 'cacheFillOrder' flag)",
                    "type": "string"
                },
                {
                    "description": "The list of all the safe mode messages (with the 'safeModeMessages' flag)",
                    "type": "string"
                },
                {
                    "description": "The current hybrid cache mode (with the 'hybridCacheMode' flag)",
                    "type": "string"
                }
            ],
            "synopsis": "cacheEvaluator([cacheFillMode=string], [cacheFillOrder=string], [cacheInvalidate=timerange], [cacheName=string], [cachedFrames=boolean], [cachingPoints=boolean], [creationParameters=boolean], [delegateEvaluation=boolean], [dynamicsAsyncRefresh=boolean], [dynamicsSupportActive=boolean], [dynamicsSupportEnabled=boolean], [flushCache=string], [flushCacheRange=[timerange, boolean]], [flushCacheSync=boolean], [flushCacheWait=boolean], [hybridCacheMode=string], [layeredEvaluationActive=boolean], [layeredEvaluationCachingPoints=boolean], [layeredEvaluationEnabled=boolean], [listCacheNames=boolean], [listCachedNodes=boolean], [listValueNames=boolean], [newAction=string], [newActionParam=string], [newFilter=string], [newFilterParam=string], [newRule=string], [newRuleParam=string], [pauseInvalidation=boolean], [preventFrameSkip=boolean], [resetRules=boolean], [resourceUsage=boolean], [resumeInvalidation=boolean], [safeMode=boolean], [safeModeMessages=boolean], [safeModeTriggered=boolean], [valueName=string], [waitForCache=float])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Creates one or more cache files on disk to store attribute data for a span of frames.",
            "name": "cacheFile",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "name of created cache description file(s)",
                    "type": "string"
                }
            ],
            "synopsis": "cacheFile([appendFrame=boolean], [attachFile=boolean], [cacheFileNode=string], [cacheFormat=string], [cacheInfo=string], [cacheableAttrs=string], [cacheableNode=string], [channelIndex=boolean], [channelName=string], [convertPc2=boolean], [createCacheNode=boolean], [creationChannelName=string], [dataSize=boolean], [deleteCachedFrame=boolean], [descriptionFileName=boolean], [directory=string], [doubleToFloat=boolean], [endTime=time], [fileName=string], [format=string], [geometry=boolean], [inAttr=string], [inTangent=string], [interpEndTime=time], [interpStartTime=time], [noBackup=boolean], [outAttr=string], [outTangent=string], [pc2File=string], [pointCount=boolean], [points=string], [pointsAndNormals=string], [prefix=boolean], [refresh=boolean], [replaceCachedFrame=boolean], [replaceWithoutSimulating=boolean], [runupFrames=int], [sampleMultiplier=int], [simulationRate=time], [singleCache=boolean], [startTime=time], [staticCache=boolean], [worldSpace=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Creates a cacheBlend node that can be used to combine, layer or blend multiple cacheFiles for a given object.",
            "name": "cacheFileCombine",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of created cache layer node(s)",
                    "type": "string"
                }
            ],
            "synopsis": "cacheFileCombine([cacheIndex=boolean], [channelName=string], [connectCache=string], [keepWeights=boolean], [layerNode=boolean], [nextAvailable=boolean], [object=string], [objectIndex=int])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "If selected/specified caches can be successfully merged, will return the start/end frames of the new cache followed by the start/end frames of any gaps in the merged cache for which no data should be written to file.",
            "name": "cacheFileMerge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The start and end times of merged cache followed by start/end of any gaps",
                    "type": "float[]"
                },
                {
                    "description": "Names of geometry associated with specified cache in query mode.",
                    "type": "string[]"
                }
            ],
            "synopsis": "cacheFileMerge([endTime=time], [geometry=boolean], [startTime=time])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This command is used for inserting and removing tracks related to the caches displayed in the trax editor.",
            "name": "cacheFileTrack",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "cacheFileTrack([insertTrack=uint], [lock=boolean], [mute=boolean], [removeEmptyTracks=boolean], [removeTrack=uint], [solo=boolean], [track=uint])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command allows you to add callbacks at key times during UI creation so that the Maya UI can be extended.",
            "name": "callbacks",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "callbacks([addCallback=script], [clearAllCallbacks=boolean], [clearCallbacks=boolean], [describeHooks=boolean], [dumpCallbacks=boolean], [executeCallbacks=boolean], [hook=string], [listCallbacks=boolean], [owner=string], [removeCallback=script])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "Create, edit, or query a camera with the specified properties.",
            "name": "camera",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(transform name and shape name)",
                    "type": "string[]"
                }
            ],
            "synopsis": "camera( [camera] , [aspectRatio=float], [cameraScale=float], [centerOfInterest=linear], [clippingPlanes=boolean], [depthOfField=boolean], [displayFieldChart=boolean], [displayFilmGate=boolean], [displayFilmOrigin=boolean], [displayFilmPivot=boolean], [displayGateMask=boolean], [displayResolution=boolean], [displaySafeAction=boolean], [displaySafeTitle=boolean], [fStop=float], [farClipPlane=linear], [farFocusDistance=linear], [filmFit=string], [filmFitOffset=float], [filmRollOrder=string], [filmRollValue=angle], [filmTranslateH=float], [filmTranslateV=float], [focalLength=float], [focusDistance=linear], [homeCommand=string], [horizontalFieldOfView=angle], [horizontalFilmAperture=float], [horizontalFilmOffset=float], [horizontalPan=float], [horizontalRollPivot=float], [horizontalShake=float], [journalCommand=boolean], [lensSqueezeRatio=float], [lockTransform=boolean], [motionBlur=boolean], [name=string], [nearClipPlane=linear], [nearFocusDistance=linear], [orthographic=boolean], [orthographicWidth=linear], [overscan=float], [panZoomEnabled=boolean], [position=[linear, linear, linear]], [postScale=float], [preScale=float], [renderPanZoom=boolean], [rotation=[angle, angle, angle]], [shakeEnabled=boolean], [shakeOverscan=float], [shakeOverscanEnabled=boolean], [shutterAngle=angle], [startupCamera=boolean], [stereoHorizontalImageTranslate=float], [stereoHorizontalImageTranslateEnabled=boolean], [verticalFieldOfView=angle], [verticalFilmAperture=float], [verticalFilmOffset=float], [verticalLock=boolean], [verticalPan=float], [verticalRollPivot=float], [verticalShake=float], [worldCenterOfInterest=[linear, linear, linear]], [worldUp=[linear, linear, linear]], [zoom=float])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "This command manages camera set nodes.",
            "name": "cameraSet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The new cameraSet node (when in create mode)",
                    "type": "string"
                }
            ],
            "synopsis": "cameraSet([active=boolean], [appendTo=boolean], [camera=string], [clearDepth=boolean], [deleteAll=boolean], [deleteLayer=boolean], [insertAt=boolean], [layer=int], [name=string], [numLayers=boolean], [objectSet=string], [order=int])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "This command creates a preset view for a camera which is then independent of the camera.",
            "name": "cameraView",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the camera view)",
                    "type": "string"
                }
            ],
            "synopsis": "cameraView( [object] , [addBookmark=boolean], [animate=boolean], [bookmarkType=int], [camera=name], [name=string], [removeBookmark=boolean], [setCamera=boolean], [setView=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command returns true if there can be a manipulator made for the specified selection, false otherwise.",
            "name": "canCreateCaddyManip",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The queried value",
                    "type": "boolean"
                }
            ],
            "synopsis": "canCreateCaddyManip( object )"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command returns true if there can be a manipulator made for the specified selection, false otherwise.",
            "name": "canCreateManip",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "canCreateManip( object )"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Creates a control capable of displaying a color swatch.",
            "name": "canvas",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The full name of the canvas.",
                    "type": "string"
                }
            ],
            "synopsis": "canvas( [string] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [hsvValue=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [pressCommand=script], [preventOverride=boolean], [rgbValue=[float, float, float]], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Explicitly forces the subdivision surface to display components at a particular level of refinement.",
            "name": "changeSubdivComponentDisplayLevel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "int"
                }
            ],
            "synopsis": "changeSubdivComponentDisplayLevel([level=int], [relative=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Changes a subdivision surface region based on the command parameters.",
            "name": "changeSubdivRegion",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "changeSubdivRegion([action=int], [level=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a channel box, which is sensitive to the active list.",
            "name": "channelBox",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the name of the new channel box)",
                    "type": "string"
                }
            ],
            "synopsis": "channelBox( [string] , [annotation=string], [attrBgColor=[float, float, float]], [attrColor=[float, float, float]], [attrFilter=string], [attrRegex=string], [attributeEditorMode=boolean], [backgroundColor=[float, float, float]], [containerAtTop=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [enableLabelSelection=boolean], [execute=[string, boolean]], [exists=boolean], [fieldWidth=int], [fixedAttrList=string[]], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [historyObjectList=boolean], [hyperbolic=boolean], [inputs=boolean], [isObscured=boolean], [labelWidth=int], [longNames=boolean], [mainListConnection=string], [mainObjectList=boolean], [manage=boolean], [maxHeight=int], [maxWidth=int], [niceNames=boolean], [noBackground=boolean], [nodeRegex=string], [numberOfPopupMenus=boolean], [outputObjectList=boolean], [outputs=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [select=string], [selectedHistoryAttributes=boolean], [selectedMainAttributes=boolean], [selectedOutputAttributes=boolean], [selectedShapeAttributes=boolean], [shapeObjectList=boolean], [shapes=boolean], [showNamespace=boolean], [showTransforms=boolean], [speed=float], [statusBarMessage=string], [takeFocus=boolean], [ufeFixedAttrList=[string, string[]]], [update=boolean], [useManips=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command is used to manage the membership of a character.",
            "name": "character",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "For creation operations (name of the character that was created or edited)",
                    "type": "string"
                },
                {
                    "description": "For query operation (names of items in the character)",
                    "type": "string[]"
                },
                {
                    "description": "For isMember operation",
                    "type": "boolean"
                }
            ],
            "synopsis": "character( objects , [addElement=name], [addOffsetObject=string], [anyMember=name], [characterPlug=boolean], [clear=name], [empty=boolean], [excludeDynamic=boolean], [excludeRotate=boolean], [excludeScale=boolean], [excludeTranslate=boolean], [excludeVisibility=boolean], [flatten=name], [forceElement=name], [include=name], [intersection=name], [isIntersecting=name], [isMember=name], [library=boolean], [memberIndex=uint], [name=string], [noWarnings=boolean], [nodesOnly=boolean], [offsetNode=boolean], [remove=name], [removeOffsetObject=string], [root=string], [scheduler=boolean], [split=name], [subtract=name], [text=string], [union=name], [userAlias=name])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "This command is used to scan a joint hierarchy for predefined joint names or labels.",
            "name": "characterize",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Names of full body IK effectors that were created.",
                    "type": "string"
                }
            ],
            "synopsis": "characterize([activatePivot=boolean], [addAuxEffector=boolean], [addFloorContactPlane=boolean], [addMissingEffectors=boolean], [attributeFromHIKProperty=string], [attributeFromHIKPropertyMode=string], [autoActivateBodyPart=boolean], [changePivotPlacement=boolean], [effectors=string], [fkSkeleton=string], [name=string], [pinHandFeet=boolean], [placeNewPivot=boolean], [posture=string], [sourceSkeleton=string], [stancePose=string], [type=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command is used to create a correlation between the attributes of 2 or more characters.",
            "name": "characterMap",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "characterMap name",
                    "type": "string"
                }
            ],
            "synopsis": "characterMap([mapAttr=[string, string]], [mapMethod=string], [mapNode=[string, string]], [mapping=string], [proposedMapping=boolean], [unmapAttr=[string, string]], [unmapNode=[string, string]])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a check box.",
            "name": "checkBox",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "checkBox( [string] , [align=string], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [offCommand=script], [onCommand=script], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [recomputeSize=boolean], [statusBarMessage=string], [useTemplate=string], [value=boolean], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "checkBoxGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "checkBoxGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [changeCommand1=script], [changeCommand2=script], [changeCommand3=script], [changeCommand4=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enable1=boolean], [enable2=boolean], [enable3=boolean], [enable4=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [label1=string], [label2=string], [label3=string], [label4=string], [labelArray2=[string, string]], [labelArray3=[string, string, string]], [labelArray4=[string, string, string, string]], [manage=boolean], [noBackground=boolean], [numberOfCheckBoxes=int], [numberOfPopupMenus=boolean], [offCommand=script], [offCommand1=script], [offCommand2=script], [offCommand3=script], [offCommand4=script], [onCommand=script], [onCommand1=script], [onCommand2=script], [onCommand3=script], [onCommand4=script], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowAttach=[int, string, int]], [statusBarMessage=string], [useTemplate=string], [value1=boolean], [value2=boolean], [value3=boolean], [value4=boolean], [valueArray2=[boolean, boolean]], [valueArray3=[boolean, boolean, boolean]], [valueArray4=[boolean, boolean, boolean, boolean]], [vertical=boolean], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "To query whether or not the defaultRenderGlobals node has been modified since the last file save, use `ls -modified`.",
            "name": "checkDefaultRenderGlobals",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "checkDefaultRenderGlobals([string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "The choice command provides a mechanism for changing the inputs to an attribute based on some (usually time-based) criteria.",
            "name": "choice",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The newly created and/or modified choice nodes, with the attribute for which a selector keyframe was created. \nFor example: choice1.input[3] choice2.input[3]",
                    "type": "string[]"
                }
            ],
            "synopsis": "choice( [objects] , [attribute=string], [controlPoints=boolean], [index=uint], [name=string], [selector=name], [shape=boolean], [sourceAttribute=name], [time=time])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The circle command creates a circle or partial circle (arc).",
            "name": "circle",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "circle([caching=boolean], [center=[linear, linear, linear]], [centerX=linear], [centerY=linear], [centerZ=linear], [constructionHistory=boolean], [degree=int], [first=[linear, linear, linear]], [firstPointX=linear], [firstPointY=linear], [firstPointZ=linear], [fixCenter=boolean], [name=string], [nodeState=int], [normal=[linear, linear, linear]], [normalX=linear], [normalY=linear], [normalZ=linear], [object=boolean], [radius=linear], [sections=int], [sweep=angle], [tolerance=linear], [useTolerance=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The cmd is used to compute the rolling ball surface fillet ( circular fillet ) between two given NURBS surfaces.",
            "name": "circularFillet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name, node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "circularFillet( [surface] [surface] , [caching=boolean], [constructionHistory=boolean], [curveOnSurface=boolean], [name=string], [nodeState=int], [object=boolean], [positionTolerance=float], [primaryRadius=linear], [secondaryRadius=linear], [tangentTolerance=float])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Even though dependency graph values are computed or dirty they may still occupy space temporarily within the nodes.",
            "name": "clearCache",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of items removed from caches",
                    "type": "int"
                }
            ],
            "synopsis": "clearCache([allNodes=boolean], [computed=boolean], [dirty=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command is used to create, edit and query character clips.",
            "name": "clip",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "clip names",
                    "type": "string[]"
                }
            ],
            "synopsis": "clip([absolute=boolean], [absoluteRotations=boolean], [active=string], [addTrack=boolean], [allAbsolute=boolean], [allClips=boolean], [allRelative=boolean], [allSourceClips=boolean], [animCurveRange=boolean], [character=boolean], [constraint=boolean], [copy=boolean], [defaultAbsolute=boolean], [duplicate=boolean], [endTime=time], [expression=boolean], [ignoreSubcharacters=boolean], [isolate=boolean], [leaveOriginal=boolean], [mapMethod=string], [name=string], [newName=string], [paste=boolean], [pasteInstance=boolean], [remove=boolean], [removeTrack=boolean], [rotationOffset=[float, float, float]], [rotationsAbsolute=boolean], [scheduleClip=boolean], [sourceClipName=boolean], [split=time], [startTime=time], [translationOffset=[float, float, float]], [useChannel=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Create a clip editor with the given name.",
            "name": "clipEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Editor name",
                    "type": "string"
                }
            ],
            "synopsis": "clipEditor( editorName , [allTrackHeights=int], [autoFit=string], [autoFitTime=string], [clipDropCmd=string], [clipStyle=int], [control=boolean], [defineTemplate=string], [deleteCmd=string], [deselectAll=boolean], [displayActiveKeyTangents=string], [displayActiveKeys=string], [displayInfinities=string], [displayKeys=string], [displayTangents=string], [displayValues=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [frameAll=boolean], [frameRange=[float, float]], [highlightConnection=string], [highlightedBlend=[string, string]], [highlightedClip=[string, string]], [initialized=boolean], [listAllCharacters=boolean], [listCurrentCharacters=boolean], [lockMainConnection=boolean], [lookAt=string], [mainListConnection=string], [manageSequencer=boolean], [menuContext=string], [panel=string], [parent=string], [selectBlend=[string, string, string]], [selectClip=[string, string]], [selectionConnection=string], [snapTime=string], [snapValue=string], [stateString=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to change current time within the track area of a clip editor.",
            "name": "clipEditorCurrentTimeCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "clipEditorCurrentTimeCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command is used to compute an offset to apply on a source clip in order to automatically align it to a destination clip at a specified match element.",
            "name": "clipMatching",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "clipMatching([clipDst=[string, float]], [clipSrc=[string, float]], [matchRotation=uint], [matchTranslation=uint])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command is used to create, edit and query clips and blends in the Trax editor.",
            "name": "clipSchedule",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Clip name",
                    "type": "string"
                }
            ],
            "synopsis": "clipSchedule([allAbsolute=boolean], [allRelative=boolean], [blend=[uint, uint]], [blendNode=[uint, uint]], [blendUsingNode=string], [character=boolean], [clipIndex=uint], [cycle=float], [defaultAbsolute=boolean], [enable=boolean], [group=boolean], [groupIndex=uint], [groupName=string], [hold=time], [insertTrack=uint], [instance=string], [listCurves=boolean], [listPairs=boolean], [lock=boolean], [mute=boolean], [name=string], [postCycle=float], [preCycle=float], [remove=boolean], [removeBlend=[uint, uint]], [removeEmptyTracks=boolean], [removeTrack=uint], [rotationsAbsolute=boolean], [scale=float], [shift=int], [shiftIndex=uint], [solo=boolean], [sourceClipName=boolean], [sourceEnd=time], [sourceStart=time], [start=time], [track=uint], [weight=float], [weightStyle=uint])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command creates/edits/queries a clip scheduler outliner control.",
            "name": "clipSchedulerOutliner",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the outliner control.",
                    "type": "string"
                }
            ],
            "synopsis": "clipSchedulerOutliner( string , [annotation=string], [backgroundColor=[float, float, float]], [clipScheduler=string], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The closeCurve command closes a curve, making it periodic.",
            "name": "closeCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "closeCurve( curve , [blendBias=float], [blendKnotInsertion=boolean], [caching=boolean], [constructionHistory=boolean], [curveOnSurface=boolean], [name=string], [nodeState=int], [object=boolean], [parameter=float], [preserveShape=int], [replaceOriginal=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The closeSurface command closes a surface in the U, V, or both directions, making it periodic.",
            "name": "closeSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "closeSurface( [surface|surfaceIsoparm] , [blendBias=float], [blendKnotInsertion=boolean], [caching=boolean], [constructionHistory=boolean], [direction=int], [name=string], [nodeState=int], [object=boolean], [parameter=float], [preserveShape=int], [replaceOriginal=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "The cluster command creates a cluster or edits the membership of an existing cluster.",
            "name": "cluster",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the cluster node name and the cluster handle name)",
                    "type": "string[]"
                }
            ],
            "synopsis": "cluster( [objects] , [after=boolean], [afterReference=boolean], [before=boolean], [bindState=boolean], [components=boolean], [deformerTools=boolean], [envelope=float], [exclusive=string], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [name=string], [parallel=boolean], [prune=boolean], [relative=boolean], [remove=boolean], [resetGeometry=boolean], [selectedComponents=boolean], [split=boolean], [useComponentTags=boolean], [weightedNode=[string, string]])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command will open a text file to receive all of the commands and results that normally get printed to the Script Editor window or console.",
            "name": "cmdFileOutput",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": ": On open, returns a value (descriptor) that can be used to query the status or close the file. Otherwise, a status code indicating status of file",
                    "type": "int"
                }
            ],
            "synopsis": "cmdFileOutput([close=uint], [closeAll=boolean], [open=string], [status=uint])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "A script editor executer control used to issue script commands to Maya.",
            "name": "cmdScrollFieldExecuter",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the executer control",
                    "type": "string"
                }
            ],
            "synopsis": "cmdScrollFieldExecuter([annotation=string], [appendText=string], [autoCloseBraces=boolean], [backgroundColor=[float, float, float]], [clear=boolean], [commandCompletion=boolean], [copySelection=boolean], [currentLine=uint], [cutSelection=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [execute=boolean], [executeAll=boolean], [exists=boolean], [fileChangedCommand=script], [filename=boolean], [filterKeyPress=script], [fullPathName=boolean], [hasFocus=boolean], [hasSelection=boolean], [height=int], [highlightColor=[float, float, float]], [insertText=string], [isObscured=boolean], [load=boolean], [loadContents=string], [loadFile=string], [manage=boolean], [modificationChangedCommand=script], [modified=boolean], [noBackground=boolean], [numberOfLines=uint], [numberOfPopupMenus=boolean], [objectPathCompletion=boolean], [parent=string], [pasteSelection=boolean], [popupMenuArray=boolean], [preventOverride=boolean], [redo=boolean], [removeStoredContents=string], [replaceAll=[string, string]], [saveFile=string], [saveSelection=string], [saveSelectionToShelf=boolean], [searchAndSelect=boolean], [searchDown=boolean], [searchMatchCase=boolean], [searchString=string], [searchWraps=boolean], [select=[uint, uint]], [selectAll=boolean], [selectedText=boolean], [showLineNumbers=boolean], [showTabsAndSpaces=boolean], [showTooltipHelp=boolean], [source=boolean], [sourceType=string], [spacesPerTab=uint], [statusBarMessage=string], [storeContents=string], [tabsForIndent=boolean], [text=string], [textLength=boolean], [undo=boolean], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "A script editor reporter control used to receive and display the history of processed commmands.",
            "name": "cmdScrollFieldReporter",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the reporter control",
                    "type": "string"
                }
            ],
            "synopsis": "cmdScrollFieldReporter([annotation=string], [backgroundColor=[float, float, float]], [clear=boolean], [copySelection=boolean], [cutSelection=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [echoAllCommands=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [filterSourceType=string], [fullPathName=boolean], [hasFocus=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [lineNumbers=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [pasteSelection=boolean], [popupMenuArray=boolean], [preventOverride=boolean], [receiveFocusCommand=script], [saveSelection=string], [saveSelectionToShelf=boolean], [select=[uint, uint]], [selectAll=boolean], [stackTrace=boolean], [statusBarMessage=string], [suppressErrors=boolean], [suppressInfo=boolean], [suppressResults=boolean], [suppressStackTrace=boolean], [suppressWarnings=boolean], [text=string], [textLength=boolean], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a scrolling field that behaves similar to a unix shell for entering user input.",
            "name": "cmdShell",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "cmdShell( [string] , [annotation=string], [backgroundColor=[float, float, float]], [clear=boolean], [command=string], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfHistoryLines=int], [numberOfPopupMenus=boolean], [numberOfSavedLines=int], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [prompt=string], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Coarsens a subdivision surface set of components based on the selection list.",
            "name": "coarsenSubdivSelectionList",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "coarsenSubdivSelectionList()"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "For each listed object, the command creates a new field.",
            "name": "collision",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Geometry names that were setup for particle collision.",
                    "type": "string[]"
                }
            ],
            "synopsis": "collision( [objects] , [friction=float], [name=string], [offset=float], [resilience=float])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command sets the dormant wireframe color of the specified objects to be their class color or if the -ud/userDefined flag is specified, one of the user defined colors.",
            "name": "color",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "color( [objects] , [rgbColor=[float, float, float]], [userDefined=int])"
        },
        {
            "categories": [
                "Effects",
                "Fluids"
            ],
            "description": "The `colorAtPoint` command is used to query textures or ocean shaders at passed in uv coordinates.",
            "name": "colorAtPoint",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "colorAtPoint([coordU=float], [coordV=float], [maxU=float], [maxV=float], [minU=float], [minV=float], [output=string], [samplesU=uint], [samplesV=uint])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "The `colorEditor` command displays a modal dialog that may be used to specify colors in RGB or HSV.",
            "name": "colorEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The string format is \"float float float boolean\". The first three float values correspond to the color components. The final argument is 1 if the dialog's \"OK\" button was pressed, and 0 if the \"Cancel\" button was pressed.",
                    "type": "string"
                }
            ],
            "synopsis": "colorEditor([alpha=float], [hsvValue=[float, float, float]], [mini=boolean], [parent=string], [position=[int, int]], [result=boolean], [rgbValue=[float, float, float]])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The index specifies a color index in the color palette.",
            "name": "colorIndex",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Returns 1 on success.",
                    "type": "int"
                }
            ],
            "synopsis": "colorIndex( int [float float float] , [hueSaturationValue=boolean], [resetToFactory=boolean], [resetToSaved=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "colorIndexSliderGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "colorIndexSliderGrp( groupName , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [extraLabel=string], [forceDragRefresh=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [invisible=int], [isObscured=boolean], [label=string], [manage=boolean], [maxValue=int], [minValue=int], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowAttach=[int, string, int]], [statusBarMessage=string], [useTemplate=string], [value=int], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "colorInputWidgetGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the name of the created group)",
                    "type": "string"
                }
            ],
            "synopsis": "colorInputWidgetGrp( groupName , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [alphaValue=float], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [forceDragRefresh=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [hsvValue=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rgbValue=[float, float, float]], [rowAttach=[int, string, int]], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This non-undoable action performs additions and removals of custom color transforms from the Autodesk native color transform catalog.",
            "name": "colorManagementCatalog",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "colorManagementCatalog([addTransform=string], [editUserTransformPath=string], [listSupportedExtensions=boolean], [listTransformConnections=boolean], [path=string], [queryUserTransformPath=boolean], [removeTransform=string], [transformConnection=string], [type=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command can be used to convert rendering (a.",
            "name": "colorManagementConvert",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "colorManagementConvert([toDisplaySpace=[float, float, float]])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This non-undoable action manages the list of rules that Maya uses to assign an initial input color space to dependency graph nodes that read in color information from a file.",
            "name": "colorManagementFileRules",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "colorManagementFileRules([addRule=string], [colorSpace=string], [colorSpaceDescription=string], [colorSpaceFamilies=string], [colorSpaceNames=boolean], [down=string], [enabled=boolean], [evaluate=string], [extension=string], [listRules=boolean], [load=boolean], [moveUp=string], [pattern=string], [remove=string], [restoreDefaults=boolean], [save=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command allows querying and editing the color management global data in a scene.",
            "name": "colorManagementPrefs",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "colorManagementPrefs([cmConfigFileEnabled=boolean], [cmEnabled=boolean], [colorManageAllNodes=boolean], [colorManagePots=boolean], [colorManagedNodes=boolean], [colorManagementSDKVersion=string], [configFilePath=string], [configFileVersion=string], [defaultInputSpaceName=string], [displayName=string], [displayNames=boolean], [equalsToPolicyFile=string], [exportPolicy=string], [inhibitEvents=boolean], [inputSpaceDescription=string], [inputSpaceFamilies=string], [inputSpaceNames=boolean], [loadPolicy=string], [loadedDefaultInputSpaceName=string], [loadedDisplayName=string], [loadedOutputTransformName=string], [loadedRenderingSpaceName=string], [loadedViewName=string], [loadedViewTransformName=string], [missingColorSpaceNodes=boolean], [ocioRulesEnabled=boolean], [ociov2Enabled=boolean], [outputTarget=string], [outputTransformEnabled=boolean], [outputTransformName=string], [outputTransformNames=boolean], [outputTransformUseColorConversion=boolean], [outputUseViewTransform=boolean], [policyFileName=string], [popupOnError=boolean], [refresh=boolean], [renderingSpaceName=string], [renderingSpaceNames=boolean], [restoreDefaults=boolean], [viewDisplayNames=string], [viewName=string], [viewNames=boolean], [viewTransformName=string], [viewTransformNames=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "colorSliderButtonGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "colorSliderButtonGrp( [string] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [alphaValue=float], [annotation=string], [backgroundColor=[float, float, float]], [buttonCommand=script], [buttonLabel=string], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [forceDragRefresh=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [hsvValue=[float, float, float]], [image=string], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rgbValue=[float, float, float]], [rowAttach=[int, string, int]], [statusBarMessage=string], [symbolButtonCommand=script], [symbolButtonDisplay=boolean], [useDisplaySpace=boolean], [useTemplate=string], [useVpColorPicker=boolean], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "colorSliderGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "colorSliderGrp( name , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [alphaValue=float], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [forceDragRefresh=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [hsvValue=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rgbValue=[float, float, float]], [rowAttach=[int, string, int]], [statusBarMessage=string], [useDisplaySpace=boolean], [useTemplate=string], [useVpColorPicker=boolean], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command creates a layout that arranges its children in a single column.",
            "name": "columnLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "columnLayout( [string] , [adjustableColumn=boolean], [annotation=string], [backgroundColor=[float, float, float]], [childArray=boolean], [columnAlign=string], [columnAttach=[string, int]], [columnOffset=[string, int]], [columnWidth=int], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfChildren=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowSpacing=int], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "Command to create or edit drive relationship of blend shape targets.",
            "name": "combinationShape",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "In edit mode, return the newly created combination shape node name.",
                    "type": "Int"
                }
            ],
            "synopsis": "combinationShape([addDriver=boolean], [allDrivers=boolean], [blendShape=string], [combinationTargetIndex=int], [combinationTargetName=string], [combineMethod=int], [driverTargetIndex=int], [driverTargetName=string], [exist=boolean], [removeDriver=boolean])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command controls what is echoed to the command window.",
            "name": "commandEcho",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "commandEcho([addFilter=string[]], [filter=string[]], [lineNumbers=boolean], [state=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a single line for command input/output.",
            "name": "commandLine",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": ": Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "commandLine( [name] , [annotation=string], [backgroundColor=[float, float, float]], [command=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [enterCommand=script], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [holdFocus=boolean], [inputAnnotation=string], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfHistoryLines=int], [numberOfPopupMenus=boolean], [outputAnnotation=string], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [sourceType=string], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command controls logging of Maya commands, in memory and on disk.",
            "name": "commandLogging",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "commandLogging([historySize=uint], [logCommands=boolean], [logFile=string], [recordCommands=boolean], [resetLogFile=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Opens or closes the Maya command port.",
            "name": "commandPort",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- in query mode",
                    "type": "boolean"
                }
            ],
            "synopsis": "commandPort([bufferSize=int], [close=boolean], [echoOutput=boolean], [listPorts=boolean], [name=string], [noreturn=boolean], [pickleOutput=boolean], [prefix=string], [returnNumCommands=boolean], [securityWarning=boolean], [sourceType=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a component box, which is sensitive to the active list.",
            "name": "componentBox",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the name of the new component box)",
                    "type": "string"
                }
            ],
            "synopsis": "componentBox( [name] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [execute=[string, boolean]], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [labelWidth=int], [manage=boolean], [maxHeight=int], [maxWidth=int], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [rowHeight=int], [selectedAttr=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command creates a new component editor in the current layout.",
            "name": "componentEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The panel name",
                    "type": "string"
                }
            ],
            "synopsis": "componentEditor( name , [control=boolean], [defineTemplate=string], [docTag=string], [exists=boolean], [filter=string], [floatField=string], [floatSlider=string], [forceMainConnection=string], [hidePathName=boolean], [hideZeroColumns=boolean], [highlightConnection=string], [justifyHeaders=int], [lockInput=boolean], [lockMainConnection=boolean], [mainListConnection=string], [newTab=[string, string, string]], [normalizeWeights=int], [operationCount=boolean], [operationLabels=boolean], [operationType=int], [panel=string], [parent=string], [precision=int], [removeTab=string], [selected=boolean], [selectionConnection=string], [setOperationLabel=[int, string]], [showNamespaces=boolean], [showObjects=boolean], [showSelected=boolean], [sortAlpha=boolean], [stateString=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command creates a new named condition object whose true/false value is calculated by running a mel script.",
            "name": "condition",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "condition( string , [delete=boolean], [dependency=string], [initialize=boolean], [script=string], [state=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The cone command creates a new cone and/or a dependency node that creates one, and returns their names.",
            "name": "cone",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "cone([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [degree=int], [endSweep=angle], [heightRatio=float], [name=string], [nodeState=int], [object=boolean], [pivot=[linear, linear, linear]], [polygon=int], [radius=linear], [sections=int], [spans=int], [startSweep=angle], [tolerance=linear], [useOldInitBehaviour=boolean], [useTolerance=boolean])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "The confirmDialog command creates a modal dialog with a message to the user and a variable number of buttons to dismiss the dialog.",
            "name": "confirmDialog",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Indicates how the dialog was dismissed. If a button is pressed then the label of the button is returned. If the dialog is closed then the value for the flag `dismissString` is returned.",
                    "type": "string"
                }
            ],
            "synopsis": "confirmDialog([annotation=string], [backgroundColor=[float, float, float]], [button=string], [cancelButton=string], [defaultButton=string], [dismissString=string], [icon=string], [message=string], [messageAlign=string], [parent=string], [title=string])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Connect the attributes of two dependency nodes and return the names of the two connected attributes.",
            "name": "connectAttr",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "A phrase containing the names of the connected attributes.",
                    "type": "string"
                }
            ],
            "synopsis": "connectAttr( attribute attribute , [force=boolean], [lock=boolean], [nextAvailable=boolean], [referenceDest=string])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command attaches a UI widget, specified as the first argument, to one or more dependency node attributes.",
            "name": "connectControl",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "connectControl( string attribute... , [fileName=boolean], [index=uint], [preventContextualMenu=boolean], [preventOverride=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "Dynamic connection specifies that the force fields, emitters, or collisions of an object affect another dynamic object.",
            "name": "connectDynamic",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "connectDynamic( [objects] , [addScriptHandler=script], [collisions=string], [delete=boolean], [emitters=string], [fields=string], [removeScriptHandler=int])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "The `connectionInfo` command is used to get information about connection sources and destinations.",
            "name": "connectionInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "When asking for a property, depending on the flags used.",
                    "type": "boolean"
                },
                {
                    "description": "When asking for a plug name.",
                    "type": "string"
                },
                {
                    "description": "When asking for a list of plugs.",
                    "type": "string[]"
                }
            ],
            "synopsis": "connectionInfo( string , [destinationFromSource=boolean], [getExactDestination=boolean], [getExactSource=boolean], [getLockedAncestor=boolean], [isDestination=boolean], [isExactDestination=boolean], [isExactSource=boolean], [isLocked=boolean], [isSource=boolean], [sourceFromDestination=boolean])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "This command will connect two skeletons based on the two selected joints.",
            "name": "connectJoint",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "connectJoint( [objects] , [connectMode=boolean], [parentMode=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This command constrains rigid bodies to the world or other rigid bodies.",
            "name": "constrain",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "constrain([barrier=boolean], [damping=float], [directionalHinge=boolean], [hinge=boolean], [interpenetrate=boolean], [nail=boolean], [name=string], [orientation=[float, float, float]], [pinConstraint=boolean], [position=[float, float, float]], [restLength=float], [spring=boolean], [stiffness=float])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command turns construction history on or off.",
            "name": "constructionHistory",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "constructionHistory([toggle=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command can be used to create and query container nodes.",
            "name": "container",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the node created.",
                    "type": "string"
                }
            ],
            "synopsis": "container( [string...] , [addNode=string[]], [asset=string[]], [assetMember=string], [bindAttr=[string, string]], [connectionList=boolean], [current=boolean], [fileName=string[]], [findContainer=string[]], [force=boolean], [includeHierarchyAbove=boolean], [includeHierarchyBelow=boolean], [includeNetwork=boolean], [includeNetworkDetails=string], [includeShaders=boolean], [includeShapes=boolean], [includeTransform=boolean], [isContainer=boolean], [name=string], [nodeList=boolean], [nodeNamePrefix=boolean], [parentContainer=boolean], [preview=boolean], [publishAndBind=[string, string]], [publishAsChild=[string, string]], [publishAsParent=[string, string]], [publishAsRoot=[string, boolean]], [publishAttr=string], [publishConnections=boolean], [publishName=string], [removeContainer=boolean], [removeNode=string[]], [type=string], [unbindAndUnpublish=string], [unbindAttr=[string, string]], [unbindChild=string], [unbindParent=string], [unpublishChild=string], [unpublishName=string], [unpublishParent=string], [unsortedOrder=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This is an accessory command to the container command which is used for some automated binding operations on the container.",
            "name": "containerBind",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "containerBind([allNames=boolean], [bindingSet=string], [bindingSetConditions=boolean], [bindingSetList=boolean], [force=boolean], [preview=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Creates a new container with the same published interface, dynamic attributes and attribute values as the specified container but with fewer container members.",
            "name": "containerProxy",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "containerProxy([fromTemplate=string], [type=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This is an accessory command to the container command which is used for some advanced publishing operations on the container.",
            "name": "containerPublish",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "containerPublish([bindNode=[string, string]], [bindTemplateStandins=boolean], [inConnections=boolean], [mergeShared=boolean], [outConnections=boolean], [publishNode=[string, string]], [unbindNode=string], [unpublishNode=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "A container template is a description of a container's published interface.",
            "name": "containerTemplate",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "containerTemplate([addBindingSet=string], [addNames=boolean], [addView=string], [allKeyable=boolean], [attribute=string], [attributeList=string], [baseName=string], [bindingSetList=string], [childAnchor=boolean], [delete=boolean], [exists=boolean], [expandCompounds=boolean], [fileName=string], [force=boolean], [fromContainer=string], [fromSelection=boolean], [layoutMode=int], [load=boolean], [matchFile=string], [matchName=string], [parentAnchor=boolean], [publishedNodeList=string], [removeBindingSet=string], [removeView=string], [rootTransform=boolean], [save=boolean], [searchPath=string], [silent=boolean], [templateList=string], [unload=boolean], [updateBindingSet=string], [useHierarchy=boolean], [viewList=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "A container view defines the layout information for the published attributes of a particular container.",
            "name": "containerView",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "containerView([itemInfo=string], [itemList=boolean], [viewDescription=boolean], [viewLabel=boolean], [viewList=boolean], [viewName=string])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command is used to edit and query a Content Browser.",
            "name": "contentBrowser",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the panel",
                    "type": "string"
                }
            ],
            "synopsis": "contentBrowser( [string] , [addContentPath=string], [context=[string, [, string, ], [, string, ]]], [control=boolean], [defineTemplate=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [highlightConnection=string], [location=string], [lockMainConnection=boolean], [mainListConnection=string], [panel=string], [parent=string], [preview=boolean], [refreshTreeView=boolean], [removeContentPath=string], [saveCurrentContext=boolean], [selectionConnection=string], [stateString=boolean], [thumbnailView=boolean], [treeView=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command allows you to get information on named contexts.",
            "name": "contextInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Info requested",
                    "type": "string"
                }
            ],
            "synopsis": "contextInfo( [context name] , [c=boolean], [escapeContext=boolean], [exists=boolean], [image1=boolean], [image2=boolean], [image3=boolean], [title=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command allows you to edit or query the properties of any control.",
            "name": "control",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "control( string , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Commands for managing animation sources.",
            "name": "controller",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "controller([allControllers=boolean], [children=boolean], [group=boolean], [index=int], [isController=string], [parent=boolean], [pickWalkDown=boolean], [pickWalkLeft=boolean], [pickWalkRight=boolean], [pickWalkUp=boolean], [unparent=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "Converts iff file to PSD file of given size.",
            "name": "convertIffToPsd",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "convertIffToPsd([iffFileName=string], [psdFileName=string], [xResolution=int], [yResolution=int])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Command to convert a texture on a surface to a file texture.",
            "name": "convertSolidTx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "File texture nodes",
                    "type": "string[]"
                }
            ],
            "synopsis": "convertSolidTx( [node|attribute] [object...] , [alpha=boolean], [antiAlias=boolean], [backgroundColor=[int, int, int]], [backgroundMode=string], [camera=name], [componentRange=boolean], [doubleSided=boolean], [fileFormat=string], [fileImageName=string], [fillTextureSeams=boolean], [force=boolean], [fullUvRange=boolean], [name=string], [pixelFormat=string], [resolutionX=int], [resolutionY=int], [reuseDepthMap=boolean], [samplePlane=boolean], [samplePlaneRange=[float, float, float, float]], [shadows=boolean], [uvBBoxIntersect=boolean], [uvRange=[float, float, float, float]], [uvSetName=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Command to translate the basic tessellation attributes to advanced.",
            "name": "convertTessellation",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "convertTessellation([allCameras=boolean], [camera=name])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This command converts values between different units of measure.",
            "name": "convertUnit",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "or string",
                    "type": "float"
                }
            ],
            "synopsis": "convertUnit( string , [fromUnit=string], [toUnit=string])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Given two nodes, transfer the connections and/or the values from the first node to the second for all attributes whose names and data types match.",
            "name": "copyAttr",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "copyAttr([attribute=string], [containerParentChild=boolean], [inConnections=boolean], [keepSourceConnections=boolean], [outConnections=boolean], [renameTargetContainer=boolean], [values=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "Command to copy or mirror the deformer weights accross one of the three major axes.",
            "name": "copyDeformerWeights",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "copyDeformerWeights([destinationDeformer=string], [destinationShape=string], [mirrorInverse=boolean], [mirrorMode=string], [noMirror=boolean], [smooth=boolean], [sourceDeformer=string], [sourceShape=string], [surfaceAssociation=string], [uvSpace=[string, string]])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "This command copies an existing bone or joint flexor from one bone (joint) to another.",
            "name": "copyFlexor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the new flexor node",
                    "type": "string"
                }
            ],
            "synopsis": "copyFlexor( [objects] )"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command operates on a keyset.",
            "name": "copyKey",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of animation curves copied.",
                    "type": "int"
                }
            ],
            "synopsis": "copyKey( [objects] , [animLayer=string], [animation=string], [attribute=string], [clipboard=string], [controlPoints=boolean], [float=floatrange], [forceIndependentEulerAngles=boolean], [hierarchy=string], [includeUpperBound=boolean], [index=uint], [option=string], [shape=boolean], [time=timerange])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "Command to copy or mirror the skinCluster weights accross one of the three major axes.",
            "name": "copySkinWeights",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "copySkinWeights([destinationSkin=string], [influenceAssociation=string], [mirrorInverse=boolean], [mirrorMode=string], [noBlendWeight=boolean], [noMirror=boolean], [normalize=boolean], [sampleSpace=uint], [smooth=boolean], [sourceSkin=string], [surfaceAssociation=string], [uvSpace=[string, string]])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Provides an interface to the crash file information.",
            "name": "crashInfo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "crashInfo([crashFile=boolean], [crashLog=boolean], [savedBeforeCrash=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Create a new instance of an attribute pattern given a pattern type (e.",
            "name": "createAttrPatterns",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of created pattern",
                    "type": "string"
                }
            ],
            "synopsis": "createAttrPatterns([patternDefinition=string], [patternFile=string], [patternType=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Create a new display layer.",
            "name": "createDisplayLayer",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of display layer node that was created",
                    "type": "string"
                }
            ],
            "synopsis": "createDisplayLayer([empty=boolean], [makeCurrent=boolean], [name=string], [noRecurse=boolean], [number=int])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "This command creates a property sheet for any dependency node.",
            "name": "createEditor",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "createEditor( string node , [noCloseOnDelete=boolean], [queueForDelete=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "Creates a layered PSD file with image names as input to individual layers.",
            "name": "createLayeredPsdFile",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "createLayeredPsdFile([imageFileName=[string, string, string]], [psdFileName=string], [xResolution=uint], [yResolution=uint])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command creates a new node in the dependency graph of the specified type.",
            "name": "createNode",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the new node.",
                    "type": "string"
                }
            ],
            "synopsis": "createNode( string , [name=string], [parent=string], [shared=boolean], [skipSelect=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "Create a new render layer.",
            "name": "createRenderLayer",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of render layer node that was created",
                    "type": "string"
                }
            ],
            "synopsis": "createRenderLayer([empty=boolean], [g=boolean], [makeCurrent=boolean], [name=string], [noRecurse=boolean], [number=int])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Creates a subdivision surface region based on the selection list.",
            "name": "createSubdivRegion",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "createSubdivRegion()"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command tells the current context to reset itself, losing what has been done so far.",
            "name": "ctxAbort",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "ctxAbort()"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command tells the current context to finish what it is doing and create any objects that is is working on.",
            "name": "ctxCompletion",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "ctxCompletion()"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command tells the current context to switch edit modes.",
            "name": "ctxEditMode",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "ctxEditMode([buttonDown=boolean], [buttonUp=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command tells the current context to do a traversal.",
            "name": "ctxTraverse",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "ctxTraverse([down=boolean], [left=boolean], [right=boolean], [up=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command returns the currently selected tool context.",
            "name": "currentCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": ": The name of the currently selected tool context.",
                    "type": "string"
                }
            ],
            "synopsis": "currentCtx()"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "When given a time argument (with or without the -edit flag) this command sets the current global time.",
            "name": "currentTime",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "time"
                }
            ],
            "synopsis": "currentTime( [time] , [update=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to change current time within the graph editor.",
            "name": "currentTimeCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "currentTimeCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "This command allows you to change the units in which you will work in Maya.",
            "name": "currentUnit",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The new current unit that has been set",
                    "type": "string"
                }
            ],
            "synopsis": "currentUnit([angle=string], [fullName=boolean], [linear=string], [time=string], [updateAnimation=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The curve command creates a new curve from a list of control vertices (CVs).",
            "name": "curve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The path to the new curve or the replaced curve",
                    "type": "string"
                }
            ],
            "synopsis": "curve( string , [append=boolean], [bezier=boolean], [degree=float], [editPoint=[linear, linear, linear]], [knot=float], [name=string], [objectSpace=boolean], [periodic=boolean], [point=[linear, linear, linear]], [pointWeight=[linear, linear, linear, float]], [replace=boolean], [worldSpace=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The curveAddPtCtx command creates a new curve add points context, which adds either control vertices (CVs) or edit points to an existing curve.",
            "name": "curveAddPtCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "curveAddPtCtx([exists=boolean], [image1=string], [image2=string], [image3=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The curveCVCtx command creates a new context for creating curves by placing control vertices (CVs).",
            "name": "curveCVCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "curveCVCtx([bezier=boolean], [degree=uint], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [multEndKnots=boolean], [name=string], [preserveShape=boolean], [rational=boolean], [refit=boolean], [symmetry=boolean], [uniform=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The curveEditorCtx command creates a new NURBS editor context, which is used to edit a NURBS curve or surface.",
            "name": "curveEditorCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "curveEditorCtx([direction=int], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [relativeTangentSize=float], [title=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The curveEPCtx command creates a new context for creating curves by placing edit points.",
            "name": "curveEPCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "curveEPCtx([bezier=boolean], [degree=uint], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [preserveShape=boolean], [preserveShapeFraction=float], [refit=boolean], [uniform=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "You must specify two curves to intersect.",
            "name": "curveIntersect",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "the parameter values at which two curves intersect.",
                    "type": "string"
                }
            ],
            "synopsis": "curveIntersect( string string , [caching=boolean], [constructionHistory=boolean], [direction=[linear, linear, linear]], [directionX=linear], [directionY=linear], [directionZ=linear], [nodeState=int], [tolerance=linear], [useDirection=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The curveMoveEPCtx command creates a new context for moving curve edit points using a manipulator.",
            "name": "curveMoveEPCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "curveMoveEPCtx([exists=boolean], [image1=string], [image2=string], [image3=string])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The curve command creates a new curve from a list of control vertices (CVs).",
            "name": "curveOnSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- name of new curve-on-surface",
                    "type": "string"
                },
                {
                    "description": "The path to the new curve or the replaced curve",
                    "type": "string"
                }
            ],
            "synopsis": "curveOnSurface( string string , [append=boolean], [degree=float], [knot=float], [name=string], [periodic=boolean], [positionUV=[float, float]], [replace=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command creates, changes or removes custom curve colors, which are used to draw the curves in the Graph Editor.",
            "name": "curveRGBColor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "HSV values from querying the hsv flag",
                    "type": "float[]"
                }
            ],
            "synopsis": "curveRGBColor([hueSaturationValue=boolean], [list=boolean], [listNames=boolean], [remove=boolean], [resetToFactory=boolean], [resetToSaved=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The curveSketchCtx command creates a new curve sketch context, also known as the \"pencil context\".",
            "name": "curveSketchCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new curve sketch context)",
                    "type": "string"
                }
            ],
            "synopsis": "curveSketchCtx( [object] , [degree=uint], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command operates on a keyset.",
            "name": "cutKey",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of animation curves cut.",
                    "type": "int"
                }
            ],
            "synopsis": "cutKey( [targetList] , [animation=string], [attribute=string], [clear=boolean], [controlPoints=boolean], [float=floatrange], [hierarchy=string], [includeUpperBound=boolean], [index=uint], [option=string], [selectKey=boolean], [shape=boolean], [time=timerange])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command searches for plug cycles in the dependency graph.",
            "name": "cycleCheck",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "in the general case.",
                    "type": "boolean"
                },
                {
                    "description": "When the list flag is used.",
                    "type": "string[]"
                }
            ],
            "synopsis": "cycleCheck( string[] , [all=boolean], [children=boolean], [dag=boolean], [evaluation=boolean], [firstCycleOnly=boolean], [firstPlugPerNode=boolean], [lastPlugPerNode=boolean], [list=boolean], [listSeparator=string], [parents=boolean], [secondary=boolean], [timeLimit=time])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The cylinder command creates a new cylinder and/or a dependency node that creates one, and returns their names.",
            "name": "cylinder",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "cylinder([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [degree=int], [endSweep=angle], [heightRatio=float], [name=string], [nodeState=int], [object=boolean], [pivot=[linear, linear, linear]], [polygon=int], [radius=linear], [sections=int], [spans=int], [startSweep=angle], [tolerance=linear], [useTolerance=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "dagObjectCompare can be used to compare to compare objects based on: \n\n- type - Currently supports transform nodes and shape nodes\n- relatives - Compares DAG objects' children and parents\n- connections - Checks to make sure the two dags are connected to the same sources and destinations\n- attributes - Checks to make sure that the properties of active attributes are the same.",
            "name": "dagObjectCompare",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dagObjectCompare([attribute=boolean], [bail=string], [connection=boolean], [namespace=string], [relative=boolean], [short=boolean], [type=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "This command is used to save and restore the matrix information for a dag hierarchy.",
            "name": "dagPose",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of pose",
                    "type": "string"
                }
            ],
            "synopsis": "dagPose( [objects] , [addToPose=boolean], [atPose=boolean], [bindPose=boolean], [g=boolean], [members=boolean], [name=string], [remove=boolean], [reset=boolean], [restore=boolean], [save=boolean], [selection=boolean], [worldParent=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Takes in a description of the structure and creates it, adding it to the list of available data structures.",
            "name": "dataStructure",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the resulting structure, should match the name defined in the structure description",
                    "type": "string"
                },
                {
                    "description": "Name(s) of the removed structures.",
                    "type": "string[]"
                }
            ],
            "synopsis": "dataStructure([asFile=string], [asString=string], [dataType=boolean], [format=string], [listMemberNames=string], [name=string], [remove=boolean], [removeAll=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Returns information about current time and date.",
            "name": "date",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "date([date=boolean], [format=string], [shortDate=boolean], [shortTime=boolean], [time=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The `dbcount` command is used to print and manage a list of statistics collected for counting operations.",
            "name": "dbcount",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dbcount([enabled=boolean], [file=string], [keyword=string], [list=boolean], [maxdepth=uint], [quick=boolean], [reset=boolean], [spreadsheet=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This command lets you explore the memory usage of specific parts of the scene.",
            "name": "dbfootprint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "JSON data representing the memory usage of the requested objects",
                    "type": "string"
                },
                {
                    "description": "List of types for which footprint measurements can be made (Query with no flags)",
                    "type": "string[]"
                },
                {
                    "description": "Description of what a particular type will measure (Query with a 'type' flag)",
                    "type": "string"
                }
            ],
            "synopsis": "dbfootprint([allObjects=boolean], [outputFile=string], [type=string])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The `dbmessage` command is used to install monitors for certain message types, dumping debug information as they are sent so that the flow of messages can be examined.",
            "name": "dbmessage",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dbmessage([file=string], [list=boolean], [monitor=boolean], [type=string])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The `dbpeek` command is used to analyze the Maya data for information of interest.",
            "name": "dbpeek",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Query of operation yields a string array with available operations",
                    "type": "string[]"
                },
                {
                    "description": "Query of argument yields a string array with available argument definitions on the specified operation",
                    "type": "string[]"
                },
                {
                    "description": "Query of specific operation without an output file returns a string with help information for that operation",
                    "type": "string"
                },
                {
                    "description": "Query of specific operation with an output file dumps the help information for that operation to that file and returns the number of errors encountered",
                    "type": "int"
                }
            ],
            "synopsis": "dbpeek([allObjects=boolean], [argument=string], [count=uint], [evaluationGraph=boolean], [operation=string], [outputFile=string])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The `dbtrace` command is used to manipulate trace objects.",
            "name": "dbtrace",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dbtrace([filter=string], [info=boolean], [keyword=string], [mark=boolean], [off=boolean], [output=string], [timed=boolean], [title=string], [verbose=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Lights"
            ],
            "description": "This command creates a checkBox that controls whether a shadingGroup is connected/disconnected from the defaultLightList.",
            "name": "defaultLightListCheckBox",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full name to the control",
                    "type": "string"
                }
            ],
            "synopsis": "defaultLightListCheckBox([annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [shadingGroup=name], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "The defaultNavigation command defines default behaviours when creating or manipulating connections between nodes and when navigating between nodes via those connections.",
            "name": "defaultNavigation",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "or array of strings",
                    "type": "string"
                }
            ],
            "synopsis": "defaultNavigation([connectToExisting=boolean], [createNew=boolean], [defaultAttribute=boolean], [defaultTraversal=boolean], [defaultWorkingNode=boolean], [delete=boolean], [destination=name], [disconnect=boolean], [force=boolean], [ignore=boolean], [navigatorDecisionString=string], [quiet=boolean], [relatedNodes=boolean], [source=name], [unignore=boolean])"
        },
        {
            "categories": [
                "Animation",
                "MoCap"
            ],
            "description": "Connects to the specified data servername, creating a named device which then can be attached to device handlers.",
            "name": "defineDataServer",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "defineDataServer([device=string], [server=string], [undefine=boolean])"
        },
        {
            "categories": [
                "Animation",
                "MoCap"
            ],
            "description": "This command defines a virtual device.",
            "name": "defineVirtualDevice",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "defineVirtualDevice([axis=int], [channel=string], [clear=boolean], [create=boolean], [device=string], [parent=string], [undefine=boolean], [usage=string])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command finds information about deforming shape(s).",
            "name": "deformableShape",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "deformableShape( [objects...] , [chain=boolean], [createOriginalGeometry=boolean], [createTweakNode=boolean], [createUpstreamTagInjectionNode=boolean], [deformShapeInAttr=boolean], [deformShapeOutAttr=boolean], [frontOfChain=boolean], [localShapeInAttr=boolean], [localShapeOutAttr=boolean], [nodeChain=boolean], [originalGeometry=boolean], [outputPlugChain=boolean], [plugChain=boolean], [supportsComponentTags=boolean], [tagInjectionList=boolean], [tagInjectionNode=boolean], [tweakNode=boolean], [upstreamTagInjectionNode=boolean], [worldShapeOutAttr=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates a deformer of the specified type.",
            "name": "deformer",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the algorithm node created/edited.",
                    "type": "string[]"
                }
            ],
            "synopsis": "deformer( selectionList , [after=boolean], [afterReference=boolean], [before=boolean], [components=boolean], [deformerTools=boolean], [exclusive=string], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [name=string], [parallel=boolean], [prune=boolean], [remove=boolean], [selectedComponents=boolean], [split=boolean], [type=string], [useComponentTags=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Print debug information about deformer evaluator status.",
            "name": "deformerEvaluator",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "the debug information when query mode is used.",
                    "type": "string[]"
                }
            ],
            "synopsis": "deformerEvaluator([active=boolean], [asNodeName=boolean], [asText=boolean], [chains=boolean], [deformerChain=boolean], [deformers=boolean], [dumpInfo=boolean], [limitMinimumVerts=boolean], [list=boolean], [members=boolean], [meshes=boolean], [message=boolean], [nodeInfo=boolean], [nodeStatus=boolean], [partition=boolean], [purge=boolean], [reuseMode=[string, string, string]], [verbose=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "Command to import and export deformer weights to and from a simple XML file.",
            "name": "deformerWeights",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "path to the file imported/exported, if successful",
                    "type": "STRING"
                }
            ],
            "synopsis": "deformerWeights([attribute=string], [defaultValue=float], [deformer=string], [export=boolean], [format=string], [ignoreName=boolean], [im=boolean], [method=string], [path=string], [positionTolerance=float], [remap=string], [shape=string], [skip=string], [vertexConnections=boolean], [weightPrecision=uint], [weightTolerance=float], [worldSpace=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command is used to delete selected objects, or all objects, or objects specified along with the command.",
            "name": "delete",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "delete( objects , [all=boolean], [attribute=string], [channels=boolean], [constraints=boolean], [constructionHistory=boolean], [controlPoints=boolean], [expressions=boolean], [hierarchy=string], [inputConnectionsAndNodes=boolean], [motionPaths=boolean], [shape=boolean], [staticChannels=boolean], [timeAnimationCurves=boolean], [unitlessAnimationCurves=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command is used to delete a dynamic attribute from a node or nodes.",
            "name": "deleteAttr",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "deleteAttr( node...|attribute... , [attribute=string])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "After a while the list of attribute patterns could become cluttered.",
            "name": "deleteAttrPattern",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name(s) of deleted pattern(s)",
                    "type": "string"
                }
            ],
            "synopsis": "deleteAttrPattern([allPatterns=boolean], [patternName=string], [patternType=string])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command is used to delete an extension attribute from a node type.",
            "name": "deleteExtension",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of nodes with altered data after the delete",
                    "type": "int"
                }
            ],
            "synopsis": "deleteExtension([attribute=string], [forceDelete=boolean], [nodeType=string])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command deletes UI objects such as windows and controls.",
            "name": "deleteUI",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "deleteUI( string [string...] , [collection=boolean], [control=boolean], [editor=boolean], [layout=boolean], [menu=boolean], [menuItem=boolean], [panel=boolean], [panelConfig=boolean], [radioMenuItemCollection=boolean], [toolContext=boolean], [uiTemplate=boolean], [window=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command is used to create, edit and query deltaMush nodes.",
            "name": "deltaMush",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Delta mush deformer node name",
                    "type": "string"
                }
            ],
            "synopsis": "deltaMush( selectionList , [after=boolean], [afterReference=boolean], [before=boolean], [components=boolean], [deformerTools=boolean], [envelope=float], [exclusive=string], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [inwardConstraint=float], [name=string], [outwardConstraint=float], [parallel=boolean], [pinBorderVertices=boolean], [prune=boolean], [remove=boolean], [selectedComponents=boolean], [smoothingIterations=uint], [smoothingStep=float], [split=boolean], [useComponentTags=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The detachCurve command detaches a curve into pieces, given a list of parameter values.",
            "name": "detachCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "detachCurve( curve , [caching=boolean], [constructionHistory=boolean], [curveOnSurface=boolean], [keep=boolean], [name=string], [nodeState=int], [object=boolean], [parameter=float], [replaceOriginal=boolean])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command detaches connections between device axes and node attributes.",
            "name": "detachDeviceAttr",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "detachDeviceAttr([all=boolean], [attribute=string], [axis=string], [device=string], [selection=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The detachSurface command detaches a surface into pieces, given a list of parameter values and a direction.",
            "name": "detachSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "detachSurface( surface , [caching=boolean], [constructionHistory=boolean], [direction=int], [keep=boolean], [name=string], [nodeState=int], [object=boolean], [parameter=float], [replaceOriginal=boolean])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This creates an editor for creating/modifying attachments to input devices.",
            "name": "deviceEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "name of the editor",
                    "type": "string"
                }
            ],
            "synopsis": "deviceEditor([control=boolean], [defineTemplate=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [highlightConnection=string], [lockMainConnection=boolean], [mainListConnection=string], [panel=string], [parent=string], [selectionConnection=string], [stateString=boolean], [takePath=string], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Animation",
                "MoCap"
            ],
            "description": "This command queriers the internal device manager for information on attached devices.",
            "name": "deviceManager",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "deviceManager([attachment=boolean], [axisCoordChanges=boolean], [axisIndex=int], [axisName=boolean], [axisOffset=boolean], [axisScale=boolean], [deviceIndex=int], [deviceNameFromIndex=int], [numAxis=boolean], [numDevices=boolean])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command is now obsolete.",
            "name": "devicePanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "name of panel",
                    "type": "string"
                }
            ],
            "synopsis": "devicePanel([control=boolean], [copy=string], [createString=boolean], [defineTemplate=string], [docTag=string], [editString=boolean], [exists=boolean], [init=boolean], [isUnique=boolean], [label=string], [menuBarRepeatLast=boolean], [menuBarVisible=boolean], [needsInit=boolean], [parent=string], [popupMenuProcedure=script], [replacePanel=string], [tearOff=boolean], [tearOffCopy=string], [tearOffRestore=boolean], [unParent=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The `dgdirty` command is used to force a dependency graph dirty message on a node or plug.",
            "name": "dgdirty",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of dirty/clean plugs in list plug mode.",
                    "type": "string[]"
                },
                {
                    "description": "List of plugs with dirty/clean data in list data mode.",
                    "type": "string[]"
                },
                {
                    "description": "Pairs of dirty/clean connected plugs in list connection mode.",
                    "type": "string[]"
                },
                {
                    "description": "Number of dirty/clean messages sent out in normal mode.",
                    "type": "int"
                }
            ],
            "synopsis": "dgdirty([allPlugs=boolean], [clean=boolean], [implicit=boolean], [list=string], [propagation=boolean], [showTiming=boolean], [verbose=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The `dgeval` command is used to force a dependency graph evaluate of a node or plug.",
            "name": "dgeval",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dgeval( [objects] , [src=boolean], [verbose=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The `dgfilter` command is used to define Dependency Graph filters that select DG objects based on certain criteria.",
            "name": "dgfilter",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "if creating filter or getting filter info",
                    "type": "string"
                },
                {
                    "description": "if listing filters",
                    "type": "string[]"
                },
                {
                    "description": "if applying filter",
                    "type": "boolean"
                }
            ],
            "synopsis": "dgfilter([attribute=string], [list=boolean], [logicalAnd=[string, string]], [logicalNot=string], [logicalOr=[string, string]], [name=string], [node=string], [nodeType=string], [plug=string])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This command prints information about the DG in plain text.",
            "name": "dgInfo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dgInfo([allNodes=boolean], [connections=boolean], [dirty=boolean], [nodes=boolean], [nonDeletable=boolean], [outputFile=string], [propagation=boolean], [short=boolean], [size=boolean], [subgraph=boolean], [type=string])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The `dgmodified` command is used to find out which nodes in the dependency graph have been modified.",
            "name": "dgmodified",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "list of all nodes that have been modified",
                    "type": "string[]"
                }
            ],
            "synopsis": "dgmodified()"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This command measures dependency graph node performance by managing timers on a per-node basis.",
            "name": "dgtimer",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "By default, the total of self-compute time for all nodes. Can be modified via the -returnType, -sortMetric and -sortType flags.",
                    "type": "float"
                }
            ],
            "synopsis": "dgtimer([combineType=boolean], [hide=string], [hierarchy=boolean], [maxDisplay=int], [name=string], [noHeader=boolean], [outputFile=string], [overhead=boolean], [rangeLower=float], [rangeUpper=float], [reset=boolean], [returnCode=string], [returnType=string], [show=string], [sortMetric=string], [sortType=string], [threshold=float], [timerOff=boolean], [timerOn=boolean], [trace=boolean], [type=string], [uniqueName=boolean], [updateHeatMap=int])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The `dgValidateCurve` command is used to make sure the curve internal status matches their actual state.",
            "name": "dgValidateCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of curves which changed their static status.",
                    "type": "int"
                }
            ],
            "synopsis": "dgValidateCurve([allCurves=boolean], [verbose=boolean])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This method attaches the named UI object (first argument) to the named condition (second argument) so that the object will be dimmed when the condition is in a particular state.",
            "name": "dimWhen",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dimWhen( string string , [clear=boolean], [false=boolean], [true=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Lights"
            ],
            "description": "TlightCmd is the base class for other light commands.",
            "name": "directionalLight",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "when querying the rgb or shadowColor flags double when querying the intensity flag boolean when querying the useRayTraceShadows or exclusive flags linear[] when querying the position flag angle[] when querying the rotation flag string when querying the name flag",
                    "type": "double[]"
                },
                {
                    "description": "rate of light decay, when querying the decayRate flag",
                    "type": "int"
                },
                {
                    "description": "Number of shadow samples, when querying the shadowSamples flag boolean True if soft shadows are enabled, when querying the softShadow flag float Shadow dithering value, when querying the shadowDither flag float Disc radius value, when querying the discRadius flag",
                    "type": "int"
                },
                {
                    "description": "Light shape name",
                    "type": "string"
                }
            ],
            "synopsis": "directionalLight([decayRate=int], [discRadius=linear], [exclusive=boolean], [intensity=float], [name=string], [position=[linear, linear, linear]], [rgb=[float, float, float]], [rotation=[angle, angle, angle]], [shadowColor=[float, float, float]], [shadowDither=float], [shadowSamples=int], [softShadow=boolean], [useRayTraceShadows=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to directly manipulate keyframes within the graph editor.",
            "name": "directKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "directKeyCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [option=string], [selectedOnly=boolean])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Use this command to map a directory to another directory.",
            "name": "dirmap",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "when convertDirectory is used",
                    "type": "string"
                }
            ],
            "synopsis": "dirmap( string string , [convertDirectory=string], [enable=boolean], [getAllMappings=boolean], [getMappedDirectory=string], [mapDirectory=[string, string]], [unmapDirectory=string])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command enables or disables the control passed as argument.",
            "name": "disable",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "disable( [string] , [value=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "Disable the warning dialog which complains about incorrect node names when opening Maya files.",
            "name": "disableIncorrectNameWarning",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "disableIncorrectNameWarning()"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Disconnects two connected attributes.",
            "name": "disconnectAttr",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "A phrase containing the names of the disconnected attributes.",
                    "type": "string"
                }
            ],
            "synopsis": "disconnectAttr( attribute attribute , [nextAvailable=boolean])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "This command will break a skeleton at the selected joint and delete any associated handles.",
            "name": "disconnectJoint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "After the joint is disconnected, a new joint will be created. The return value is the name of the newly created joint and its ancestor.",
                    "type": "string"
                }
            ],
            "synopsis": "disconnectJoint([attachHandleMode=boolean], [deleteHandleMode=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Command to create, clear, or close disk cache(s).",
            "name": "diskCache",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "diskCache([append=boolean], [cacheType=string], [close=string], [closeAll=boolean], [delete=string], [deleteAll=boolean], [empty=string], [emptyAll=boolean], [enabledCachesOnly=boolean], [endTime=time], [frameRangeType=string], [overSample=boolean], [samplingRate=int], [startTime=time], [tempDir=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Command bakes geometry with displacement mapping into a polygonal object.",
            "name": "displacementToPoly",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "displacementToPoly([findBboxOnly=boolean])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "Turns on/off the special coloring of objects that are affected by the objects that are currently in the selection list.",
            "name": "displayAffected",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Affected display count",
                    "type": "int"
                }
            ],
            "synopsis": "displayAffected()"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "This command changes or queries the display color for anything in the application that allows the user to set its color.",
            "name": "displayColor",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "displayColor( string , [active=boolean], [create=boolean], [dormant=boolean], [list=boolean], [queryIndex=int], [resetToFactory=boolean], [resetToSaved=boolean])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "This command is responsible for setting the display culling property of back faces of surfaces.",
            "name": "displayCull",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "displayCull( [objects] , [backFaceCulling=boolean])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "This command is responsible for setting the display level-of-detail for edit refreshes.",
            "name": "displayLevelOfDetail",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "displayLevelOfDetail([levelOfDetail=boolean])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "This command sets/queries the state of global display parameters.",
            "name": "displayPref",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "displayPref([activeObjectPivots=boolean], [displayAffected=boolean], [displayGradient=boolean], [ghostFrames=[int, int, int]], [materialLoadingMode=string], [maxHardwareTextureResolution=boolean], [maxTextureResolution=int], [purgeExistingTextures=boolean], [regionOfEffect=boolean], [shadeTemplates=boolean], [textureDrawPixel=boolean], [wireframeOnShadedActive=string])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "This command changes or queries the display color for anything in the application that allows the user to set its color.",
            "name": "displayRGBColor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "when the list flag is used, none otherwise",
                    "type": "string"
                }
            ],
            "synopsis": "displayRGBColor( string , [alpha=boolean], [create=boolean], [hueSaturationValue=boolean], [list=boolean], [resetToFactory=boolean], [resetToSaved=boolean])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "This command is responsible for setting the display smoothness of NURBS curves and surfaces to either predefined or custom values.",
            "name": "displaySmoothness",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "displaySmoothness( [objects] , [all=boolean], [boundary=boolean], [defaultCreation=boolean], [divisionsU=int], [divisionsV=int], [full=boolean], [hull=boolean], [pointsShaded=int], [pointsWire=int], [polygonObject=int], [renderTessellation=boolean], [simplifyU=int], [simplifyV=int])"
        },
        {
            "categories": [],
            "description": "",
            "name": "displayStats",
            "obsolete": true,
            "returnTypes": [],
            "synopsis": ""
        },
        {
            "categories": [
                "System",
                "Localization"
            ],
            "description": "Assign a string value to a string identifier.",
            "name": "displayString",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "displayString([string][string][string][string], [delete=boolean], [exists=boolean], [keys=boolean], [replace=boolean], [value=string])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "This command toggles display options on the specified or active surfaces.",
            "name": "displaySurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "when in the query mode.",
                    "type": "boolean"
                }
            ],
            "synopsis": "displaySurface( [objects...] , [flipNormals=boolean], [twoSidedLighting=boolean], [xRay=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Command used to register the distanceDimCtx tool.",
            "name": "distanceDimContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "distanceDimContext([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command is used to create a distance dimension to display the distance between two specified points.",
            "name": "distanceDimension",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- the shape name of the DAG node created.",
                    "type": "string"
                }
            ],
            "synopsis": "distanceDimension([endPoint=[linear, linear, linear]], [startPoint=[linear, linear, linear]])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "The doBlur command will invoke the blur2d, which is a Maya stand-alone application to do 2.",
            "name": "doBlur",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "doBlur([colorFile=string], [length=float], [memCapSize=float], [sharpness=float], [smooth=float], [smoothColor=boolean], [vectorFile=string])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "Create a dockable control, also known as tool palette or utility window.",
            "name": "dockControl",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "dockControl( [name] , [allowedArea=string], [annotation=string], [area=string], [backgroundColor=[float, float, float]], [closeCommand=script], [content=string], [defineTemplate=string], [docTag=string], [dockStation=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [enablePopupOption=boolean], [exists=boolean], [fixedHeight=boolean], [fixedWidth=boolean], [floatChangeCommand=script], [floating=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [moveable=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [r=boolean], [retain=boolean], [sizeable=boolean], [splitLayout=string], [state=string], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The dolly command moves a camera along the viewing direction in the world space.",
            "name": "dolly",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dolly( [camera] , [absolute=boolean], [distance=linear], [dollyTowardsCenter=boolean], [orthoScale=float], [relative=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a dolly context.",
            "name": "dollyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context",
                    "type": "string"
                }
            ],
            "synopsis": "dollyCtx( object , [alternateContext=boolean], [boxDollyType=string], [centerOfInterestDolly=boolean], [dollyTowardsCenter=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [localDolly=boolean], [name=string], [orthoZoom=boolean], [scale=float], [toolName=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Edit a characteristic of a dope sheet editor.",
            "name": "dopeSheetEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Editor name",
                    "type": "string"
                }
            ],
            "synopsis": "dopeSheetEditor( editorName , [autoFit=string], [autoFitTime=string], [control=boolean], [defineTemplate=string], [displayActiveKeyTangents=string], [displayActiveKeys=string], [displayInfinities=string], [displayKeys=string], [displayTangents=string], [displayValues=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [hierarchyBelow=boolean], [highlightConnection=string], [lockMainConnection=boolean], [lookAt=string], [mainListConnection=string], [outliner=string], [panel=string], [parent=string], [selectionConnection=string], [selectionWindow=[float, float, float, float]], [showScene=boolean], [showSummary=boolean], [showTicks=boolean], [snapTime=string], [snapValue=string], [stateString=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The arguments are 4 cuves called \"profile1\" \"profile2\" \"rail1\" \"rail2\".",
            "name": "doubleProfileBirailSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "doubleProfileBirailSurface( curve curve curve curve , [blendFactor=float], [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [object=boolean], [polygon=int], [tangentContinuityProfile1=boolean], [tangentContinuityProfile2=boolean], [transformMode=int])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "For each listed object, the command creates a new field.",
            "name": "drag",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "drag( [objects] , [attenuation=float], [directionX=float], [directionY=float], [directionZ=float], [magnitude=float], [maxDistance=linear], [name=string], [perVertex=boolean], [position=[linear, linear, linear]], [torusSectionRadius=linear], [useDirection=boolean], [volumeExclusion=boolean], [volumeOffset=[linear, linear, linear]], [volumeShape=string], [volumeSweep=angle])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The dragAttrContext allows a user to manipulate the attributes of an object by using a virtual slider within the viewport.",
            "name": "dragAttrContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "dragAttrContext( [name] , [connectTo=name], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [reset=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The draggerContext allows the user to program the behavior of the mouse or an equivalent dragging device in MEL.",
            "name": "draggerContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context.",
                    "type": "string"
                }
            ],
            "synopsis": "draggerContext( [name] , [anchorPoint=[float, float, float]], [button=int], [currentStep=int], [cursor=string], [dragCommand=script], [dragPoint=[float, float, float]], [drawString=string], [exists=boolean], [finalize=script], [helpString=string], [history=boolean], [holdCommand=script], [image1=string], [image2=string], [image3=string], [initialize=script], [modifier=string], [name=string], [plane=[float, float, float]], [prePressCommand=script], [pressCommand=script], [projection=string], [releaseCommand=script], [snapping=boolean], [space=string], [stepsCount=int], [undoMode=string])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command adds one or more dropoff locators to a wire curve, one for each selected curve point.",
            "name": "dropoffLocator",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Locator name(s)",
                    "type": "string[]"
                }
            ],
            "synopsis": "dropoffLocator( float float string selectionList )"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command duplicates the given objects.",
            "name": "duplicate",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": ": names of the objects created",
                    "type": "string[]"
                }
            ],
            "synopsis": "duplicate( [objects...] , [fullPath=boolean], [inputConnections=boolean], [instanceLeaf=boolean], [name=string], [parentOnly=boolean], [renameChildren=boolean], [returnRootsOnly=boolean], [smartTransform=boolean], [transformsOnly=boolean], [upstreamNodes=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The duplicateCurve command takes a curve on a surface and and returns the 3D curve.",
            "name": "duplicateCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "duplicateCurve([caching=boolean], [constructionHistory=boolean], [local=boolean], [maxValue=float], [mergeItems=boolean], [minValue=float], [name=string], [nodeState=int], [range=boolean], [relative=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The duplicateSurface command takes a surface patch (face) and and returns the 3D surface.",
            "name": "duplicateSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "duplicateSurface([caching=boolean], [constructionHistory=boolean], [faceCountU=int], [faceCountV=int], [firstFaceU=int], [firstFaceV=int], [local=boolean], [mergeItems=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Dynamically load the DLL passed as argument.",
            "name": "dynamicLoad",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dynamicLoad( string )"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "Cache the current state of all particle shapes at the current time.",
            "name": "dynCache",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dynCache()"
        },
        {
            "categories": [],
            "description": "",
            "name": "dynControl",
            "obsolete": true,
            "returnTypes": [],
            "synopsis": ""
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "Export particle data to disk files.",
            "name": "dynExport",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Path to the exported files",
                    "type": "string"
                }
            ],
            "synopsis": "dynExport( [objects] , [allObjects=boolean], [attribute=string], [format=string], [maxFrame=time], [minFrame=time], [onlyUpdateParticles=boolean], [overSampling=int], [path=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This command describes an expression that belongs to the specified particle shape.",
            "name": "dynExpression",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The particle shape which this expression belongs to",
                    "type": "string"
                }
            ],
            "synopsis": "dynExpression( selectionItem , [creation=boolean], [runtime=boolean], [runtimeAfterDynamics=boolean], [runtimeBeforeDynamics=boolean], [string=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This node edits and queries the attributes of the active dynGlobals node in the scene.",
            "name": "dynGlobals",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "For edit commands",
                    "type": "string"
                },
                {
                    "description": "or string For query commands, depending on the flag queried.",
                    "type": "int"
                }
            ],
            "synopsis": "dynGlobals([active=boolean], [listAll=boolean], [overSampling=int])"
        },
        {
            "categories": [
                "Effects",
                "PaintEffects"
            ],
            "description": "Create a editor window that can be painted into.",
            "name": "dynPaintEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Editor name",
                    "type": "string"
                }
            ],
            "synopsis": "dynPaintEditor( editorName , [activeOnly=boolean], [autoSave=boolean], [camera=string], [canvasMode=boolean], [canvasUndo=boolean], [changeCommand=[string, string, string, string]], [clear=[float, float, float]], [control=boolean], [currentCanvasSize=boolean], [defineTemplate=string], [displayAppearance=string], [displayFog=boolean], [displayImage=int], [displayLights=string], [displayStyle=string], [displayTextures=boolean], [docTag=string], [doubleBuffer=boolean], [drawAxis=boolean], [drawContext=boolean], [exists=boolean], [fastUpdate=int], [fileName=string], [filter=string], [forceMainConnection=string], [highlightConnection=string], [iconGrab=boolean], [loadImage=string], [lockMainConnection=boolean], [mainListConnection=string], [menu=string], [nbImages=boolean], [newImage=[int, int, float, float, float]], [paintAll=float], [panel=string], [parent=string], [redrawLast=boolean], [refresh=boolean], [refreshMode=int], [removeAllImages=boolean], [removeImage=boolean], [rollImage=[float, float]], [saveAlpha=boolean], [saveBumpmap=string], [saveImage=boolean], [scaleBlue=float], [scaleGreen=float], [scaleRed=float], [selectionConnection=string], [singleBuffer=boolean], [snapShot=boolean], [stateString=boolean], [swap=int], [tileSize=int], [unParent=boolean], [undoCache=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string], [wrap=[boolean, boolean]], [writeImage=string], [zoom=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The particle context command creates a particle context.",
            "name": "dynParticleCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dynParticleCtx( string , [conserve=float], [cursorPlacement=boolean], [exists=boolean], [grid=boolean], [gridSpacing=float], [history=boolean], [image1=string], [image2=string], [image3=string], [jitterRadius=float], [lowerLeftX=float], [lowerLeftY=float], [lowerLeftZ=float], [name=string], [nucleus=boolean], [numJitters=int], [particleName=string], [sketch=boolean], [sketchInterval=int], [textPlacement=boolean], [upperRightX=float], [upperRightY=float], [upperZ=float])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This action modifies and queries the current state of \"autoCreate rigid bodies\", \"run up to current time\", and \"run up from\" (previous time or start time).",
            "name": "dynPref",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "dynPref([autoCreate=boolean], [echoCollision=boolean], [runupFrom=int], [runupToCurrentTime=boolean], [saveOnQuit=boolean], [saveRuntimeState=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Edit the parameter values common to all display layers.",
            "name": "editDisplayLayerGlobals",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command success",
                    "type": "boolean"
                },
                {
                    "description": "Current display layer name, when querying",
                    "type": "string"
                },
                {
                    "description": "Merge type, when querying",
                    "type": "int"
                },
                {
                    "description": "Base ID, when querying",
                    "type": "int"
                }
            ],
            "synopsis": "editDisplayLayerGlobals([baseId=int], [currentDisplayLayer=name], [mergeType=int], [useCurrent=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command is used to query and edit membership of display layers.",
            "name": "editDisplayLayerMembers",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of objects added to the layer",
                    "type": "int"
                },
                {
                    "description": "Query: List of objects in layer",
                    "type": "string[]"
                }
            ],
            "synopsis": "editDisplayLayerMembers([fullNames=boolean], [noRecurse=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command is used to set metadata elements onto or remove metadata elements from an object.",
            "name": "editMetadata",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the node where the new edits reside, empty string if edits failed. It will be an editMetadata node if construction history was present.",
                    "type": "string"
                }
            ],
            "synopsis": "editMetadata([channelName=string], [channelType=string], [endIndex=string], [index=string], [indexType=string], [memberName=string], [remove=boolean], [scene=boolean], [startIndex=string], [streamName=string], [stringValue=string], [value=float])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "Edit the characteristic of an editor.",
            "name": "editor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the editor",
                    "type": "string"
                }
            ],
            "synopsis": "editor( editorName , [control=boolean], [defineTemplate=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [highlightConnection=string], [lockMainConnection=boolean], [mainListConnection=string], [panel=string], [parent=string], [selectionConnection=string], [stateString=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "The editorTemplate command allows the user to specify the conceptual layout of an attribute editor and leave the details of exactly which UI elements are used in the final result to the automatic dialog generation mechanism.",
            "name": "editorTemplate",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "For queryControl, the appropriate attribute type will be returned. string array For listExtraAttributes, extra attributes will be returned.",
                    "type": "string"
                }
            ],
            "synopsis": "editorTemplate([addAdskAssetControls=boolean], [addComponents=boolean], [addControl=[string, script]], [addDynamicControl=[string, script]], [addExtraControls=boolean], [addSeparator=boolean], [annotateFieldOnly=boolean], [annotation=string], [beginLayout=string], [beginNoOptimize=boolean], [beginScrollLayout=boolean], [callCustom=[script, script]], [collapse=boolean], [debugMode=boolean], [dimControl=[string, string, boolean]], [endLayout=boolean], [endNoOptimize=boolean], [endScrollLayout=boolean], [extraControlsLabel=string], [forceRebuild=boolean], [interruptOptimize=boolean], [label=string], [listExtraAttributes=string], [preventOverride=boolean], [queryControl=[string, string]], [queryLabel=[string, string]], [queryName=[string, string]], [suppress=string])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "This command is used to create, edit, and query adjustments to render layers.",
            "name": "editRenderLayerAdjustment",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of adjustments applied",
                    "type": "int"
                },
                {
                    "description": "Query: List of plugs adjustments to layer",
                    "type": "string[]"
                }
            ],
            "synopsis": "editRenderLayerAdjustment([attributeLog=boolean], [layer=name], [nodeLog=boolean], [remove=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "Edit the parameter values common to all render layers.",
            "name": "editRenderLayerGlobals",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command success",
                    "type": "boolean"
                },
                {
                    "description": "Current render layer name, when querying",
                    "type": "string"
                },
                {
                    "description": "Merge type, when querying",
                    "type": "int"
                },
                {
                    "description": "Base ID, when querying",
                    "type": "int"
                }
            ],
            "synopsis": "editRenderLayerGlobals([baseId=int], [currentRenderLayer=name], [enableAutoAdjustments=boolean], [mergeType=int], [useCurrent=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "This command is used to query and edit memberships to render layers.",
            "name": "editRenderLayerMembers",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of objects added to the layer",
                    "type": "int"
                },
                {
                    "description": "Query: List of objects in layer",
                    "type": "string[]"
                }
            ],
            "synopsis": "editRenderLayerMembers([fullNames=boolean], [noRecurse=boolean], [remove=boolean])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "The effector command is used to set the name or hidden flag for the effector.",
            "name": "effector",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "effector( [object] , [hide=boolean], [name=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "The `emit` action allows users to add particles to an existing particle object without the use of an emitter.",
            "name": "emit",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Integer array containing the list of the particleId attribute values for the created particles in the same order that the `position` flags were passed.",
                    "type": "int[]"
                }
            ],
            "synopsis": "emit([attribute=string], [floatValue=float], [object=string], [position=[float, float, float]], [vectorValue=[float, float, float]])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "Creates, edits or queries an auxiliary dynamics object (for example, a field or emitter).",
            "name": "emitter",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "emitter( [objects] , [alongAxis=float], [aroundAxis=float], [awayFromAxis=float], [awayFromCenter=float], [cycleEmission=string], [cycleInterval=int], [directionX=linear], [directionY=linear], [directionZ=linear], [directionalSpeed=float], [maxDistance=linear], [minDistance=linear], [name=string], [needParentUV=boolean], [normalSpeed=float], [position=[linear, linear, linear]], [randomDirection=float], [rate=float], [scaleRateByObjectSize=boolean], [scaleSpeedBySize=boolean], [speed=float], [speedRandom=float], [spread=float], [tangentSpeed=float], [torusSectionRadius=linear], [type=string], [volumeOffset=[linear, linear, linear]], [volumeShape=string], [volumeSweep=angle])"
        },
        {
            "categories": [
                "Animation",
                "MoCap"
            ],
            "description": "Sets (or queries) the device enable state for actions involving the device.",
            "name": "enableDevice",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "enableDevice([apply=boolean], [device=string], [enable=boolean], [monitor=boolean], [record=boolean])"
        },
        {
            "categories": [
                "Language",
                "Strings"
            ],
            "description": "This action will take a string and encode any character that would need to be escaped before being sent to some other command.",
            "name": "encodeString",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "encodeString( string )"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The error command is provided so that the user can issue error messages from his/her scripts and control execution in the event of runtime errors.",
            "name": "error",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "error([noContext=boolean], [showLineNumber=boolean])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This function takes a string which contains MEL code and evaluates it using the MEL interpreter.",
            "name": "eval",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "depending on input.",
                    "type": "Any"
                }
            ],
            "synopsis": "eval( string )"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command takes the string it is given and evaluates it during the next available idle time.",
            "name": "evalDeferred",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "evalDeferred( [script] , [evaluateNext=boolean], [list=boolean], [lowPriority=boolean], [lowestPriority=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Handles turning on and off the evaluation manager method of evaluating the DG.",
            "name": "evaluationManager",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The names of all evaluation manager modes (querying without flags)",
                    "type": "string[]"
                },
                {
                    "description": "The names of all nodes involved in a cycle cluster with the selected one.",
                    "type": "string[]"
                },
                {
                    "description": "The success of activating of deactivating manipulation (with the 'manipulation' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The manipulation active or inactive state (querying the 'manipulation' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The manipulation prevalidation active or inactive state (querying the 'manipulationPrevalidation' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The manipulation allowed or disallowed state (querying the 'manipulationReady' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The success of setting the evaluation manager mode (with the 'mode' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The success of setting the evaluation manager idle action (with the 'idleAction' flag)",
                    "type": "boolean"
                },
                {
                    "description": "False if there are any nodes in the evaluation graph (with the 'empty' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The Evaluation Manager idle action (querying with the 'idleAction' flag)",
                    "type": "Int"
                },
                {
                    "description": "Is the evaluation graph currently valid? (querying with the 'invalidate' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The success of setting the node type parallel scheduling mode (with the 'nodeTypeParallel' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The parallel scheduling states of specified node types (querying the 'nodeTypeParallel' flag with object(s))",
                    "type": "boolean[]"
                },
                {
                    "description": "The names of all node types in parallel scheduling mode (querying the 'nodeTypeParallel' flag alone)",
                    "type": "string[]"
                },
                {
                    "description": "The success of setting the node type serialized mode (with the 'nodeTypeSerialize' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The serialized states of specified node types (querying the 'nodeTypeSerialize' flag with object(s))",
                    "type": "boolean[]"
                },
                {
                    "description": "The names of all node types in serial scheduling mode (querying the 'nodeTypeSerialize' flag alone)",
                    "type": "string[]"
                },
                {
                    "description": "The success of setting the node type globally serialized mode (with the 'nodeTypeGloballySerialize' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The globally serialized states of specified node types (querying the 'nodeTypeGloballySerialize' flag with object(s))",
                    "type": "boolean[]"
                },
                {
                    "description": "The names of all node types in globally serialized scheduling mode (querying the 'nodeTypeGloballySerialize' flag alone)",
                    "type": "string[]"
                },
                {
                    "description": "The success of setting the node type untrusted mode (with the 'nodeTypeUntrusted' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The untrusted of specified node types (querying the 'nodeTypeUntrusted' flag with object(s))",
                    "type": "boolean[]"
                },
                {
                    "description": "The names of all node types in untrusted scheduling mode (querying the 'nodeTypeUntrusted' flag alone)",
                    "type": "string[]"
                },
                {
                    "description": "The evaluation manager mode (querying with the 'mode' flag)",
                    "type": "string"
                },
                {
                    "description": "The names of all nodes immediately downstream/upstream of the named one(s) (with the 'upstreamFrom' or 'downstreamFrom' flags)",
                    "type": "string[]"
                },
                {
                    "description": "The list of reasons the evaluation manager has been disabled (querying the 'disableInfo' flag)",
                    "type": "string[]"
                },
                {
                    "description": "The state of fallback serial evaluation (querying the 'fallbackTriggered' flag)",
                    "type": "boolean"
                },
                {
                    "description": "The state of reduceGraphRebuild Support (querying the 'reduceGraphRebuild ' flag)",
                    "type": "boolean"
                }
            ],
            "synopsis": "evaluationManager([cycleCluster=string], [disableInfo=string], [downstreamFrom=string], [empty=boolean], [enabled=boolean], [fallbackTriggered=boolean], [idleAction=int], [idleBuild=boolean], [invalidate=boolean], [manipulation=boolean], [manipulationPrevalidation=boolean], [manipulationReady=boolean], [mode=string], [nodeTypeGloballySerialize=boolean], [nodeTypeParallel=boolean], [nodeTypeSerialize=boolean], [nodeTypeUntrusted=boolean], [reduceGraphRebuild=boolean], [safeMode=boolean], [upstreamFrom=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Handles turning on and off custom evaluation overrides used by the evaluation manager.",
            "name": "evaluator",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "the list of available evaluators (querying with no evaluator flag or invalid evaluator name)",
                    "type": "string[]"
                },
                {
                    "description": "the previous active state of the named evaluator (with 'name' and 'enable' flags)",
                    "type": "boolean"
                },
                {
                    "description": "the active state of the named evaluator (query with 'name' and 'enable' flags)",
                    "type": "boolean"
                },
                {
                    "description": "the list of evaluators in the requested active state (query 'enable' flag alone)",
                    "type": "string[]"
                },
                {
                    "description": "the list of nodes for which the evaluator was activated or deactivated (with 'nodeType' or 'nodeTypeChildren' flags)",
                    "type": "string[]"
                },
                {
                    "description": "the queried value for the evaluator (with 'name' and 'valueName' flags)",
                    "type": "string"
                },
                {
                    "description": "true if the configuration request was accepted by the evaluator (with 'name' flag and 'configuration' flag)",
                    "type": "boolean"
                },
                {
                    "description": "the list of configuration parameters accepted by the evaluator (query mode with 'name' flag and 'configuration' flag)",
                    "type": "string[]"
                },
                {
                    "description": "the list of clusters currently assigned to the evaluator with intervening sublist sizes (query mode with 'name' flag and 'clusters' flag)",
                    "type": "string[]"
                },
                {
                    "description": "the help information supplied by the evaluator (query mode with 'name' flag and 'info' flag)",
                    "type": "string"
                },
                {
                    "description": "the priority value of the evaluator (query mode with 'name' flag and 'priority' flag)",
                    "type": "int"
                }
            ],
            "synopsis": "evaluator([clusters=boolean], [configuration=string], [enable=boolean], [info=boolean], [name=string], [nodeType=string], [nodeTypeChildren=boolean], [priority=int], [valueName=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "The event command assigns collision events to a particle object.",
            "name": "event",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "for creation; string array for list.",
                    "type": "string"
                }
            ],
            "synopsis": "event( [object] , [count=uint], [delete=boolean], [dieAtCollision=boolean], [emit=uint], [list=boolean], [name=string], [proc=script], [random=boolean], [rename=string], [select=boolean], [split=uint], [spread=float], [target=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command figures out an exact-fit bounding box for the specified objects (or selected objects if none are specified) This bounding box is always in world space.",
            "name": "exactWorldBoundingBox",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "xmin, ymin, zmin, xmax, ymax, zmax.",
                    "type": "float[]"
                }
            ],
            "synopsis": "exactWorldBoundingBox( [dagObject...] , [calculateExactly=boolean], [ignoreInvisible=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Lights"
            ],
            "description": "This command creates a checkBox that controls a light's exclusive non-exclusive status.",
            "name": "exclusiveLightCheckBox",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full name to the control",
                    "type": "string"
                }
            ],
            "synopsis": "exclusiveLightCheckBox([annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [light=name], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "Examines the current selection list and returns that list, expanded to meet certain criteria.",
            "name": "expandedSelection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of objects in the requested selection list expansion",
                    "type": "string"
                },
                {
                    "description": "List of nodes visited in the DG expansion",
                    "type": "string[]"
                },
                {
                    "description": "(Python only) List of single nodes and tuples visited in the EG or SG expansion, where tuples represent the DG nodes in a cluster",
                    "type": "string[]"
                }
            ],
            "synopsis": "expandedSelection([depth=uint], [expansionType=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Use this command to export edits made in the scene to a file.",
            "name": "exportEdits",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "For query execution.",
                    "type": "string[]"
                }
            ],
            "synopsis": "exportEdits([editCommand=string], [excludeHierarchy=boolean], [excludeNode=string], [exportSelected=boolean], [force=boolean], [includeAnimation=boolean], [includeConstraints=boolean], [includeDeformers=boolean], [includeNetwork=boolean], [includeNode=string], [includeSetAttrs=boolean], [includeSetDrivenKeys=boolean], [includeShaders=boolean], [onReferenceNode=string], [selected=boolean], [type=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This command describes an expression that belongs to the current scene.",
            "name": "expression",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the expression",
                    "type": "string"
                }
            ],
            "synopsis": "expression([alwaysEvaluate=uint], [animated=uint], [attribute=string], [name=string], [object=string], [safe=boolean], [shortNames=boolean], [string=string], [timeDependent=boolean], [unitConversion=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "Listens for messages for the Expression Editor, at its request, and communicates them to it.",
            "name": "expressionEditorListen",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "expressionEditorListen([listenFile=string], [listenForAttr=string], [listenForExpression=string], [listenForName=string], [stopListenForAttr=string], [stopListenForExpression=string], [stopListenForName=string])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "This command extends a curve or creates a new curve as an extension.",
            "name": "extendCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "extendCurve( object , [caching=boolean], [constructionHistory=boolean], [curveOnSurface=boolean], [distance=linear], [extendMethod=int], [extensionType=int], [inputPoint=[linear, linear, linear]], [join=boolean], [name=string], [noChanges=boolean], [nodeState=int], [object=boolean], [pointX=linear], [pointY=linear], [pointZ=linear], [range=boolean], [removeMultipleKnots=boolean], [replaceOriginal=boolean], [start=int])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command extends a surface or creates a new surface as an extension.",
            "name": "extendSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "extendSurface( surface [surface] , [caching=boolean], [constructionHistory=boolean], [distance=linear], [extendDirection=int], [extendMethod=int], [extendSide=int], [extensionType=int], [join=boolean], [name=string], [nodeState=int], [object=boolean], [replaceOriginal=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command computes a surface given a profile curve and possibly a path curve.",
            "name": "extrude",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "extrude( curve [curve] , [caching=boolean], [constructionHistory=boolean], [degreeAlongLength=int], [direction=[linear, linear, linear]], [directionX=linear], [directionY=linear], [directionZ=linear], [extrudeType=int], [fixedPath=boolean], [length=linear], [mergeItems=boolean], [name=string], [nodeState=int], [object=boolean], [pivot=[linear, linear, linear]], [polygon=int], [range=boolean], [rebuild=boolean], [reverseSurfaceIfPathReversed=boolean], [rotation=angle], [scale=float], [subCurveSubSurface=boolean], [useComponentPivot=int], [useProfileNormal=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a control for editing a 2D control curve.",
            "name": "falloffCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the port created or modified",
                    "type": "string"
                }
            ],
            "synopsis": "falloffCurve( [string] , [addControlVertex=string], [annotation=string], [asString=string], [backgroundColor=[float, float, float]], [changeCommand=script], [currentKey=int], [currentKeyValue=[float, float]], [customCurveWidget=boolean], [defineTemplate=string], [deleteControlVertex=int], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [optionVar=string], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [readOnly=boolean], [snapToGrid=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a control for editing a 2D control curve.",
            "name": "falloffCurveAttr",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the port created or modified",
                    "type": "string"
                }
            ],
            "synopsis": "falloffCurveAttr( [string] , [addControlVertex=string], [annotation=string], [asString=string], [attribute=name], [backgroundColor=[float, float, float]], [changeCommand=script], [currentKey=int], [currentKeyValue=[float, float]], [customCurveWidget=int], [defineTemplate=string], [deleteControlVertex=int], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [readOnly=int], [selectedPositionControl=string], [selectedValueControl=string], [snapToGrid=int], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Invokes the fcheck program to display images in a separate window.",
            "name": "fcheck",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "fcheck()"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "<h4>Opening, importing, exporting, referencing, saving, or renaming a file</h4>.",
            "name": "file",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the specified file for most actions. When the returnNewNodes flag is used, an array of strings will be returned indicating the names of the nodes that were read.",
                    "type": "string"
                }
            ],
            "synopsis": "file( string , [absoluteName=boolean], [activate=boolean], [activeProxy=boolean], [add=boolean], [anyModified=boolean], [applyTo=string], [buildLoadSettings=boolean], [channels=boolean], [cleanReference=string], [command=[string, string]], [compress=boolean], [constraints=boolean], [constructionHistory=boolean], [copyNumberList=boolean], [defaultExtensions=boolean], [defaultNamespace=boolean], [deferReference=boolean], [editCommand=string], [errorStatus=boolean], [executeScriptNodes=boolean], [exists=boolean], [expandName=boolean], [exportAll=boolean], [exportAnim=boolean], [exportAnimFromReference=boolean], [exportAsReference=boolean], [exportAsSegment=boolean], [exportSelected=boolean], [exportSelectedAnim=boolean], [exportSelectedAnimFromReference=boolean], [exportSelectedNoReference=boolean], [exportSelectedStrict=boolean], [exportSnapshotCallback=[script, string]], [exportUnloadedReferences=boolean], [expressions=boolean], [fileMetaData=boolean], [flushReference=string], [force=boolean], [groupLocator=boolean], [groupName=string], [groupReference=boolean], [i=boolean], [ignoreVersion=boolean], [importFrameRate=boolean], [importReference=boolean], [importTimeRange=string], [lastFileOption=boolean], [lastTempFile=boolean], [list=boolean], [loadAllDeferred=boolean], [loadAllReferences=boolean], [loadNoReferences=boolean], [loadReference=string], [loadReferenceDepth=string], [loadReferencePreview=string], [loadSettings=string], [location=boolean], [lockContainerUnpublished=boolean], [lockFile=boolean], [lockReference=boolean], [mapPlaceHolderNamespace=[string, string]], [mergeBaseAnimLayer=boolean], [mergeNamespaceWithParent=boolean], [mergeNamespaceWithRoot=boolean], [mergeNamespacesOnClash=boolean], [modified=boolean], [moveSelected=boolean], [namespace=string], [newFile=boolean], [open=boolean], [options=string], [parentNamespace=boolean], [postSaveScript=string], [preSaveScript=string], [preserveName=boolean], [preserveReferences=boolean], [preview=boolean], [prompt=boolean], [proxyManager=string], [proxyTag=string], [reference=boolean], [referenceDepthInfo=uint], [referenceNode=string], [relativeNamespace=string], [removeDuplicateNetworks=boolean], [removeReference=boolean], [rename=string], [renameAll=boolean], [renameToSave=boolean], [renamingPrefix=string], [renamingPrefixList=boolean], [replaceName=[string, string]], [reserveNamespaces=boolean], [resetError=boolean], [returnNewNodes=boolean], [save=boolean], [saveDiskCache=string], [saveReference=boolean], [saveReferencesUnloaded=boolean], [saveTextures=string], [sceneName=boolean], [segment=string], [selectAll=boolean], [shader=boolean], [sharedNodes=string], [sharedReferenceFile=boolean], [shortName=boolean], [strict=boolean], [swapNamespace=[string, string]], [type=string], [uiConfiguration=boolean], [uiLoadConfiguration=boolean], [unloadReference=string], [unresolvedName=boolean], [usingNamespaces=boolean], [withoutCopyNumber=boolean], [writable=boolean])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "The fileBrowserDialog and fileDialog commands have now been deprecated.",
            "name": "fileBrowserDialog",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Dialog name",
                    "type": "string"
                }
            ],
            "synopsis": "fileBrowserDialog([actionName=string], [dialogStyle=int], [fileCommand=script], [fileType=string], [filterList=string], [includeName=string], [mode=int], [operationMode=string], [tipMessage=string], [windowTitle=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "The fileBrowserDialog and fileDialog commands have now been deprecated.",
            "name": "fileDialog",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of dialog",
                    "type": "string"
                }
            ],
            "synopsis": "fileDialog([application=boolean], [defaultFileName=string], [directoryMask=string], [mode=int], [title=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command provides a dialog that allows users to select files or directories.",
            "name": "fileDialog2",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "array",
                    "type": "string"
                }
            ],
            "synopsis": "fileDialog2([buttonBoxOrientation=int], [cancelCaption=string], [caption=string], [dialogStyle=int], [fileFilter=string], [fileMode=int], [fileTypeChanged=script], [hideNameEdit=boolean], [okCaption=string], [optionsUICancel=script], [optionsUICommit=script], [optionsUICommit2=script], [optionsUICreate=script], [optionsUIInit=script], [optionsUITitle=string], [returnFilter=boolean], [selectFileFilter=string], [selectionChanged=script], [setProjectBtnEnabled=boolean], [startingDirectory=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "fileInfo provides a mechanism for keeping information related to a Maya scene file.",
            "name": "fileInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "fileInfo([string][string], [referenceNode=string], [remove=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Maya can reference and use external files, such as textures or other Maya scenes.",
            "name": "filePathEditor",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "filePathEditor([attributeOnly=boolean], [attributeType=string], [byType=string], [copyAndRepath=[string, string]], [deregisterType=string], [force=boolean], [listDirectories=string], [listFiles=string], [listRegisteredTypes=boolean], [preview=boolean], [recursive=boolean], [refresh=boolean], [registerType=string], [relativeNames=boolean], [repath=string], [replaceAll=boolean], [replaceField=string], [replaceString=[string, string]], [status=boolean], [temporary=boolean], [typeLabel=string], [unresolved=boolean], [withAttribute=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The curve fillet command creates a fillet curve between two curves.",
            "name": "filletCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "filletCurve( [curve] [curve] , [bias=linear], [blendControl=boolean], [caching=boolean], [circular=boolean], [constructionHistory=boolean], [curveParameter1=float], [curveParameter2=float], [depth=linear], [freeformBlend=boolean], [join=boolean], [name=string], [nodeState=int], [object=boolean], [radius=linear], [replaceOriginal=boolean], [trim=boolean])"
        },
        {
            "categories": [
                "Animation",
                "MoCap"
            ],
            "description": "Creates or modifies a filter node.",
            "name": "filter",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "filter name",
                    "type": "string"
                }
            ],
            "synopsis": "filter([name=string], [type=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Creates/edits a Butterworth filter context.",
            "name": "filterButterworthCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "filterButterworthCtx( contextName , [apply=boolean], [cutoffFrequency=float], [endTime=time], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [keepKeysOnFrame=boolean], [name=string], [samplingRate=float], [selectedKeys=boolean], [startTime=time])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "The filterCurve command takes a list of anim curve and filters them using a specified filter.",
            "name": "filterCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The number of filtered curves",
                    "type": "int"
                }
            ],
            "synopsis": "filterCurve([cutoffFrequency=float], [endTime=time], [filter=string], [keepKeysOnFrame=boolean], [kernel=string], [keySync=boolean], [maxTimeStep=float], [minTimeStep=float], [period=float], [precision=float], [precisionMode=int], [preserveKeyTangent=string], [sampleCount=int], [samplingRate=float], [selectedKeys=boolean], [startTime=time], [timeTolerance=float], [tolerance=float], [useQuaternion=boolean], [width=time])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "Based on selected components (or components specified on the command line), the command filters and/or expands the list given the options.",
            "name": "filterExpand",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "filterExpand([expand=boolean], [fullPath=boolean], [selectionMask=int], [symActive=boolean], [symNegative=boolean], [symPositive=boolean], [symSeam=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Creates a smooth (gaussian) filter context.",
            "name": "filterGaussianCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "filterGaussianCtx( contextName , [apply=boolean], [endTime=time], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [sampleCount=int], [selectedKeys=boolean], [startTime=time], [useQuaternion=boolean], [width=time])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command filters the selection list to remove duplicate instances that refer to the same object/components.",
            "name": "filterInstances",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "filterInstances([shapes=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Creates/edits a KeyReducer filter context.",
            "name": "filterKeyReducerCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "filterKeyReducerCtx( contextName , [apply=boolean], [endTime=time], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [keySync=boolean], [name=string], [precision=float], [precisionMode=int], [preserveKeyTangent=string], [selectedKeys=boolean], [startTime=time])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Directly sets the filter options on the studioImport plugin from anywhere in MEL without having to use the UI.",
            "name": "filterStudioImport",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "filterStudioImport([convertShellToPoly=boolean], [includeCameras=boolean], [includeLights=boolean], [transferDirectoryName=string])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command finds all deformers for the specified shape(s).",
            "name": "findDeformers",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "findDeformers( [objects...] )"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command operates on a keyset.",
            "name": "findKeyframe",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "time"
                }
            ],
            "synopsis": "findKeyframe( [animatedObject] , [animation=string], [attribute=string], [controlPoints=boolean], [curve=boolean], [float=floatrange], [hierarchy=string], [includeUpperBound=boolean], [index=uint], [shape=boolean], [time=timerange], [timeSlider=boolean], [which=string])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The `findType` command is used to search through a dependency subgraph on a certain node to find all nodes of the given type.",
            "name": "findType",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The list of node(s) of the requested type connected to the given node(s)",
                    "type": "string[]"
                }
            ],
            "synopsis": "findType([deep=boolean], [exact=boolean], [forward=boolean], [type=string])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The fitBspline command fits the CVs from an input curve and and returns a 3D curve.",
            "name": "fitBspline",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "fitBspline([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [object=boolean], [tolerance=linear])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "This command creates a flexor.",
            "name": "flexor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the names of the new flexor nodes)",
                    "type": "string[]"
                }
            ],
            "synopsis": "flexor( [objects] , [atBones=boolean], [atJoints=boolean], [deformerCommand=string], [list=boolean], [name=string], [noScale=boolean], [toSkeleton=boolean], [type=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Create a field control that accepts only float values and is bound by a minimum and maximum value.",
            "name": "floatField",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "floatField( [string] , [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [enterCommand=script], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [maxValue=float], [minValue=float], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [receiveFocusCommand=script], [showTrailingZeros=boolean], [statusBarMessage=string], [step=float], [useTemplate=string], [value=float], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "floatFieldGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "floatFieldGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enable1=boolean], [enable2=boolean], [enable3=boolean], [enable4=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [extraLabel=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfFields=int], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [rowAttach=[int, string, int]], [showTrailingZeros=boolean], [statusBarMessage=string], [step=float], [useTemplate=string], [value=[float, float, float, float]], [value1=float], [value2=float], [value3=float], [value4=float], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Create a scroll bar control that accepts only float values and is bound by a minimum and maximum value.",
            "name": "floatScrollBar",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "floatScrollBar( [string] , [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [horizontal=boolean], [isObscured=boolean], [largeStep=float], [manage=boolean], [maxValue=float], [minValue=float], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [step=float], [useTemplate=string], [value=float], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Create a slider control that accepts only float values and is bound by a minimum and maximum value.",
            "name": "floatSlider",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "floatSlider( [string] , [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [horizontal=boolean], [isObscured=boolean], [manage=boolean], [maxValue=float], [minValue=float], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [step=float], [useTemplate=string], [value=float], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a float slider containing two handles.",
            "name": "floatSlider2",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the port created or modified",
                    "type": "string"
                }
            ],
            "synopsis": "floatSlider2( [string] , [annotation=string], [backgroundColor=[float, float, float]], [changeCommand1=string], [changeCommand2=string], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [maximum=float], [minimum=float], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [polarity=int], [popupMenuArray=boolean], [positionControl1=string], [positionControl2=string], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [value1=float], [value2=float], [values=[float, float]], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "floatSliderButtonGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "floatSliderButtonGrp( [name] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [buttonCommand=script], [buttonLabel=string], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [extraLabel=string], [field=boolean], [fieldMaxValue=float], [fieldMinValue=float], [fieldStep=float], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [image=string], [isObscured=boolean], [label=string], [manage=boolean], [maxValue=float], [minValue=float], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [rowAttach=[int, string, int]], [sliderStep=float], [statusBarMessage=string], [step=float], [symbolButtonCommand=script], [symbolButtonDisplay=boolean], [useTemplate=string], [value=float], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "floatSliderGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name of the control.",
                    "type": "string"
                }
            ],
            "synopsis": "floatSliderGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [extraLabel=string], [field=boolean], [fieldMaxValue=float], [fieldMinValue=float], [fieldStep=float], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [maxValue=float], [minValue=float], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [rowAttach=[int, string, int]], [sliderStep=float], [statusBarMessage=string], [step=float], [useTemplate=string], [value=float], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "The flow command creates a deformation lattice to `bend' the object that is animated along a curve of a motion path animation.",
            "name": "flow",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The names of the created flow node and associated lattice nodes.",
                    "type": "string[]"
                }
            ],
            "synopsis": "flow( objects , [divisions=[uint, uint, uint]], [localCompute=boolean], [localDivisions=[uint, uint, uint]], [objectCentered=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command creates a layout that arranges its children along a single line (either horizontal or vertical).",
            "name": "flowLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "flowLayout( [string] , [annotation=string], [backgroundColor=[float, float, float]], [childArray=boolean], [columnSpacing=int], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [horizontal=boolean], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfChildren=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [vertical=boolean], [visible=boolean], [visibleChangeCommand=script], [width=int], [wrap=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Fluids"
            ],
            "description": "A command to get information about the fluids cache.",
            "name": "fluidCacheInfo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "fluidCacheInfo([attribute=string], [cacheTime=time], [endFrame=boolean], [hasCache=boolean], [hasData=boolean], [initialConditions=boolean], [playback=boolean], [resolution=boolean], [startFrame=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Fluids"
            ],
            "description": "Creates, edits or queries an auxiliary dynamics object (for example, a field or emitter).",
            "name": "fluidEmitter",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "fluidEmitter( selectionList , [cycleEmission=string], [cycleInterval=int], [densityEmissionRate=float], [fluidDropoff=float], [fuelEmissionRate=float], [heatEmissionRate=float], [maxDistance=linear], [minDistance=linear], [name=string], [position=[linear, linear, linear]], [rate=float], [torusSectionRadius=linear], [type=string], [volumeOffset=[linear, linear, linear]], [volumeShape=string], [volumeSweep=angle])"
        },
        {
            "categories": [
                "Effects",
                "Fluids"
            ],
            "description": "Provides basic information about the mapping of a fluid voxel grid into world- or object space of the fluid.",
            "name": "fluidVoxelInfo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "fluidVoxelInfo([checkBounds=boolean], [inBounds=[int, int, int]], [objectSpace=boolean], [radius=float], [voxel=[float, float, float]], [voxelCenter=boolean], [xIndex=int], [yIndex=int], [zIndex=int])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Removes everything from the undo queue, freeing up memory.",
            "name": "flushUndo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "flushUndo()"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "Displays a dialog of available fonts for the user to select from.",
            "name": "fontDialog",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Dialog name",
                    "type": "string"
                }
            ],
            "synopsis": "fontDialog([FontList=boolean], [scalable=boolean])"
        },
        {
            "categories": [
                "System",
                "Localization"
            ],
            "description": "This command takes a format string, where the format string contains format specifiers.",
            "name": "format",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "format([stringArg=string])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command creates a form layout control.",
            "name": "formLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The full name of the control.",
                    "type": "string"
                }
            ],
            "synopsis": "formLayout( [string] , [annotation=string], [attachControl=[string, string, int, string]], [attachForm=[string, string, int]], [attachNone=[string, string]], [attachOppositeControl=[string, string, int, string]], [attachOppositeForm=[string, string, int]], [attachPosition=[string, string, int, int]], [backgroundColor=[float, float, float]], [childArray=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfChildren=boolean], [numberOfDivisions=int], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "Returns the frame buffer name for a given renderPass renderLayer and camera combination.",
            "name": "frameBufferName",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "frameBufferName([autoTruncate=boolean], [camera=string], [renderLayer=string], [renderPass=string])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command creates frame layout control.",
            "name": "frameLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "frameLayout( [string] , [annotation=string], [backgroundColor=[float, float, float]], [backgroundShade=boolean], [borderStyle=string], [borderVisible=boolean], [childArray=boolean], [collapsable=boolean], [collapse=boolean], [collapseCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [expandCommand=script], [font=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [labelAlign=string], [labelIndent=int], [labelVisible=boolean], [labelWidth=int], [manage=boolean], [marginHeight=int], [marginWidth=int], [noBackground=boolean], [numberOfChildren=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preCollapseCommand=script], [preExpandCommand=script], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "The framelessDialog command creates a modal dialog with a message to the user and a variable number of buttons to dismiss the dialog.",
            "name": "framelessDialog",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Indicates how the dialog was dismissed. If a button is pressed then the label of the button is returned.",
                    "type": "string"
                }
            ],
            "synopsis": "framelessDialog([button=string], [message=string], [parent=string], [path=string], [primary=string], [title=string])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command creates a free form surface fillet across two surface trim edges or isoparms or curve on surface.",
            "name": "freeFormFillet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "freeFormFillet( [surfaceIsoparm] [surfaceIsoparm] , [bias=float], [caching=boolean], [constructionHistory=boolean], [depth=float], [name=string], [nodeState=int], [object=boolean], [polygon=int], [positionTolerance=float], [range=boolean], [tangentTolerance=float])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "When a node is frozen none of its inputs will be requested when they change, the node will use the inputs that existed at the time of freezing until the node is unfrozen.",
            "name": "freeze",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "In query mode the list of currently frozen or unfrozen nodes. The list is in three parts separated by an empty string; nodes with frozen state (un)set, nodes with frozenAffected state (un)set, and the rest of the selected nodes",
                    "type": "string[]"
                },
                {
                    "description": "the list of nodes whose frozen state was set by the command. The list is in two parts separated by an empty string; nodes with frozen state set, and nodes with frozenAffected state set",
                    "type": "string[]"
                }
            ],
            "synopsis": "freeze([allNodes=boolean], [displayLayers=boolean], [downstream=boolean], [forceDownstream=boolean], [frozen=boolean], [invisible=boolean], [noFreeze=boolean], [unfreeze=boolean], [upstream=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command provides access to the options used by the evaluation manager to handle propagation and recognition of when a node is in a frozen state.",
            "name": "freezeOptions",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Current value of the option if querying the downstream or upstream flags",
                    "type": "string"
                },
                {
                    "description": "Current value of the option if querying the displayLayers, invisible, referencedNodes, explicitPropagation, or runtimePropagaton flags",
                    "type": "boolean"
                },
                {
                    "description": "In creation mode returns true if all options were successfully set",
                    "type": "boolean"
                }
            ],
            "synopsis": "freezeOptions([displayLayers=boolean], [downstream=string], [explicitPropagation=boolean], [invisible=boolean], [referencedNodes=boolean], [runtimePropagation=boolean], [upstream=string])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "This command is used to compute weights using geodesic voxel binding algorithm.",
            "name": "geomBind",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "geomBind([bindMethod=uint], [falloff=float], [geodesicVoxelParams=[uint, boolean]], [maxInfluences=int])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command provides information about the geometry in an attribute.",
            "name": "geometryAttrInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Information about the geometry in the attribute. The number and type of values returned depends on the information request.",
                    "type": "Any"
                }
            ],
            "synopsis": "geometryAttrInfo( attribute , [boundingBox=boolean], [castToEdges=boolean], [castToFaces=boolean], [castToVerts=boolean], [componentTagCategory=boolean], [componentTagExpression=string], [componentTagHash=boolean], [componentTagHistory=boolean], [componentTagHistoryHash=boolean], [componentTagNames=boolean], [components=boolean], [deformerChain=boolean], [elementCount=boolean], [groupId=int], [matrix=boolean], [nodeChain=boolean], [originalGeometry=boolean], [outputPlugChain=boolean], [plugChain=boolean], [pointCount=boolean], [pointIndices=boolean], [points=boolean], [subsetState=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Constraints"
            ],
            "description": "Constrain an object's position based on the shape of the target surface(s) at the closest point(s) to the object.",
            "name": "geometryConstraint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the created constraint node",
                    "type": "string[]"
                }
            ],
            "synopsis": "geometryConstraint( [target...] object , [layer=string], [name=string], [remove=boolean], [targetList=boolean], [weight=float], [weightAliasList=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Create polygonal mesh bounding boxes for geometry.",
            "name": "geomToBBox",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "geomToBBox([bakeAnimation=boolean], [combineMesh=boolean], [endTime=time], [keepOriginal=boolean], [name=string], [nameSuffix=string], [sampleBy=time], [shaderColor=[float, float, float]], [single=boolean], [startTime=time])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command returns the value of the named object's attribute.",
            "name": "getAttr",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Value or state of the attribute. The number and type of values returned is dependent on the attribute type.",
                    "type": "Any"
                }
            ],
            "synopsis": "getAttr( attribute , [asString=boolean], [caching=boolean], [channelBox=boolean], [expandEnvironmentVariables=boolean], [keyable=boolean], [lock=boolean], [multiIndices=boolean], [settable=boolean], [silent=boolean], [size=boolean], [time=time], [type=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Returns the classification string for a given node type.",
            "name": "getClassification",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Returns the classification strings for the given node type, or an empty array if the node type is not classified.",
                    "type": "string[]"
                }
            ],
            "synopsis": "getClassification( string , [satisfies=string])"
        },
        {
            "categories": [
                "Effects",
                "PaintEffects"
            ],
            "description": "The command returns the name of the default Paint Effects brush.",
            "name": "getDefaultBrush",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the default brush node",
                    "type": "string"
                }
            ],
            "synopsis": "getDefaultBrush()"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Returns a list of files matching an optional wildcard pattern.",
            "name": "getFileList",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "an array of file names",
                    "type": "string[]"
                }
            ],
            "synopsis": "getFileList([filespec=string], [folder=string])"
        },
        {
            "categories": [
                "Effects",
                "Fluids"
            ],
            "description": "Returns values of built-in fluid attributes such as density, velocity, etc.",
            "name": "getFluidAttr",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "getFluidAttr([attribute=string], [lowerFace=boolean], [xIndex=int], [xvalue=boolean], [yIndex=int], [yvalue=boolean], [zIndex=int], [zvalue=boolean])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command lists the minimum and maximum values the device axis can return.",
            "name": "getInputDeviceRange",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "float[]"
                }
            ],
            "synopsis": "getInputDeviceRange([maxValue=boolean], [minValue=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command is used to retrieve the values of metadata elements from a node or scene.",
            "name": "getMetadata",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of integer values from the metadata member",
                    "type": "int[]"
                },
                {
                    "description": "List of real values from the metadata member",
                    "type": "float[]"
                },
                {
                    "description": "List of string values from the metadata member",
                    "type": "string[]"
                }
            ],
            "synopsis": "getMetadata([channelName=string], [channelType=string], [dataType=boolean], [endIndex=string], [index=string], [indexType=string], [listChannelNames=boolean], [listMemberNames=boolean], [listStreamNames=boolean], [memberName=string], [scene=boolean], [startIndex=string], [streamName=string])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command returns the current state of the modifier keys.",
            "name": "getModifiers",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "indicating which modifier keys are pressed.",
                    "type": "int"
                }
            ],
            "synopsis": "getModifiers()"
        },
        {
            "categories": [
                "System",
                "Plug-ins"
            ],
            "description": "Returns the module path for a given module name.",
            "name": "getModulePath",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "getModulePath([moduleName=string])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command returns panel and panel configuration information.",
            "name": "getPanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "An array of panel names",
                    "type": "string[]"
                }
            ],
            "synopsis": "getPanel([allConfigs=boolean], [allPanels=boolean], [allScriptedTypes=boolean], [allTypes=boolean], [atPosition=[int, int]], [configWithLabel=string], [containing=string], [invisiblePanels=boolean], [scriptType=string], [type=string], [typeOf=string], [underPointer=boolean], [visiblePanels=boolean], [withFocus=boolean], [withLabel=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This action will return either an array of values, or the average value and maximum offset, for a specied per-particle attribute of a particle object or component.",
            "name": "getParticleAttr",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "float[]"
                }
            ],
            "synopsis": "getParticleAttr( selectionItem , [array=boolean], [attribute=string], [object=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Command to return dependencies of an image source.",
            "name": "getRenderDependencies",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Dependencies for argument image source",
                    "type": "string"
                }
            ],
            "synopsis": "getRenderDependencies(string)"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Command to return render tasks to render an image source.",
            "name": "getRenderTasks",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Render tasks (one per string) for argument render target.",
                    "type": "string[]"
                }
            ],
            "synopsis": "getRenderTasks(string, [camera=string], [renderLayer=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Provides an aggregated interface to all of the node-base ghosting parameters, as well as the global preferences used by this command for ghosting actions.",
            "name": "ghosting",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "the previous global state of ghost visibility (after setting 'enable' flag)",
                    "type": "boolean"
                },
                {
                    "description": "the global state of ghost visibility (query 'enabled' flag)",
                    "type": "boolean"
                },
                {
                    "description": "the global state of the default ghost all-in-range value (query 'allInRange' flag)",
                    "type": "boolean"
                },
                {
                    "description": "the global state of the default ghost hierarchy (query 'hierarchy' flag)",
                    "type": "boolean"
                },
                {
                    "description": "the global state of the default ghost geometry filter (query 'geometryFilter' flag)",
                    "type": "boolean"
                },
                {
                    "description": "the global state of the default ghost joint filter (query 'jointFilter' flag)",
                    "type": "boolean"
                },
                {
                    "description": "the global state of the default ghost locator filter (query 'locatorFilter' flag)",
                    "type": "boolean"
                },
                {
                    "description": "the global state of the default post frame count (query 'postFrames' flag)",
                    "type": "boolean"
                },
                {
                    "description": "the global state of the default pre frame count (query 'preFrames' flag)",
                    "type": "boolean"
                },
                {
                    "description": "the global state of the default ghost frames step count (query 'ghostsStep' flag)",
                    "type": "boolean"
                },
                {
                    "description": "List of all objects for which ghosting was enabled ('action=\"ghost\"' in create mode)",
                    "type": "string[]"
                },
                {
                    "description": "List of all objects for which ghosting was disabled ('action=\"unghost\"' or 'action=\"unghostAll\"' in create mode)",
                    "type": "string[]"
                },
                {
                    "description": "List of all objects for which ghosting is currently enabled (query 'ghostedObjects' flag)",
                    "type": "string[]"
                },
                {
                    "description": "List of affected objects (any flag in edit mode)",
                    "type": "string[]"
                },
                {
                    "description": "List of (frame1, frame2, ...) that is the union of ghosted frames on all selected objects (query 'frames' flag)",
                    "type": "float[]"
                },
                {
                    "description": "Current opacity value for ghosts farthest from the current time (query 'farOpacity' flag)",
                    "type": "float"
                },
                {
                    "description": "Current opacity value for ghosts closest to the current time (query 'nearOpacity' flag)",
                    "type": "float"
                },
                {
                    "description": "The previous opacity value for ghosts farthest from the current time (set 'farOpacity' flag)",
                    "type": "float"
                },
                {
                    "description": "The previous opacity value for ghosts closest to the current time (set 'nearOpacity' flag)",
                    "type": "float"
                },
                {
                    "description": "Current ghosting mode (query 'mode' flag)",
                    "type": "string"
                },
                {
                    "description": "The previous ghosting mode (set 'mode' flag)",
                    "type": "string"
                },
                {
                    "description": "Color as [red, green, blue] used for ghosts after the current time (query 'postColor' flag)",
                    "type": "float[]"
                },
                {
                    "description": "Previous color as [red, green, blue] used for ghosts after the current time (set 'postColor' flag)",
                    "type": "float[]"
                },
                {
                    "description": "Color as [red, green, blue] used for ghosts before the current time (query 'preColor' flag)",
                    "type": "float[]"
                },
                {
                    "description": "Previous color as [red, green, blue] used for ghosts before the current time (set 'preColor' flag)",
                    "type": "float[]"
                },
                {
                    "description": "Custom frame list for the 'frames' mode (query 'customFrames' flag)",
                    "type": "int[]"
                },
                {
                    "description": "Previous custom frame list (set 'customFrames' flag)",
                    "type": "int[]"
                }
            ],
            "synopsis": "ghosting([action=string], [allGhostedObjects=boolean], [allInRange=boolean], [customFrames=int], [enable=boolean], [farOpacity=float], [frames=boolean], [geometryFilter=boolean], [ghostedObjects=boolean], [ghostsStep=int], [hierarchy=boolean], [jointFilter=boolean], [locatorFilter=boolean], [mode=string], [nearOpacity=float], [postColor=[float, float, float]], [postFrames=int], [preColor=[float, float, float]], [preFrames=int], [preset=string], [resetAll=boolean], [useDriver=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command computes a globalStitch of NURBS surfaces.",
            "name": "globalStitch",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "globalStitch( surface surface... , [caching=boolean], [constructionHistory=boolean], [lockSurface=boolean], [maxSeparation=linear], [modificationResistance=float], [name=string], [nodeState=int], [object=boolean], [sampling=int], [stitchCorners=int], [stitchEdges=int], [stitchPartialEdges=boolean], [stitchSmoothness=int])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command provides access to the Hardware Render Manager (HRM).",
            "name": "glRender",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "glRender([accumBufferPasses=int], [alphaSource=string], [antiAliasMethod=string], [cameraIcons=boolean], [clearClr=[float, float, float]], [collisionIcons=boolean], [crossingEffect=boolean], [currentFrame=boolean], [drawStyle=string], [edgeSmoothness=float], [emitterIcons=boolean], [fieldIcons=boolean], [flipbookCallback=string], [frameEnd=int], [frameIncrement=int], [frameStart=int], [fullResolution=boolean], [grid=boolean], [imageDirectory=string], [imageName=string], [imageSize=[int, int, float]], [lightIcons=boolean], [lightingMode=string], [lineSmoothing=boolean], [offScreen=boolean], [renderFrame=string], [renderSequence=string], [sharpness=float], [shutterAngle=float], [textureDisplay=boolean], [transformIcons=boolean], [useAccumBuffer=boolean], [viewport=[int, int, float]], [writeDepthMap=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Create a glRender view.",
            "name": "glRenderEditor",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "glRenderEditor( name , [control=boolean], [defineTemplate=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [highlightConnection=string], [lockMainConnection=boolean], [lookThru=string], [mainListConnection=string], [panel=string], [parent=string], [selectionConnection=string], [stateString=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string], [viewCameraName=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "Specifies the given objects as being goals for the given particle object.",
            "name": "goal",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "goal( selectionList , [goal=string], [index=boolean], [useTransformAsGoal=boolean], [weight=float])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command changes the cursor and enters a modal state which will be exited by pressing a mouse button.",
            "name": "grabColor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "[] Three float values representing the color components of the pixel below the cursor. If no flags are specified then the default is to return the red, green and blue color components.",
                    "type": "float"
                }
            ],
            "synopsis": "grabColor([alpha=boolean], [hsvValue=boolean], [rgbValue=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a control that displays the gradient attribute specified.",
            "name": "gradientControl",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the port created or modified",
                    "type": "string"
                }
            ],
            "synopsis": "gradientControl( [string] , [adaptiveScaling=boolean], [annotation=string], [attribute=name], [backgroundColor=[float, float, float]], [clearAttribute=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfControls=uint], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [refreshOnRelease=uint], [selectedColorControl=string], [selectedInterpControl=string], [selectedPositionControl=string], [staticNumberOfControls=boolean], [staticPositions=boolean], [statusBarMessage=string], [upperLimitControl=string], [useTemplate=string], [verticalLayout=boolean], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a control for editing a ramp (2D control curve).",
            "name": "gradientControlNoAttr",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the port created or modified",
                    "type": "string"
                }
            ],
            "synopsis": "gradientControlNoAttr( [string] , [annotation=string], [asString=string], [backgroundColor=[float, float, float]], [changeCommand=script], [currentKey=int], [currentKeyChanged=script], [currentKeyColorValue=[float, float, float]], [currentKeyCurveValue=boolean], [currentKeyInterpValue=int], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [optionVar=string], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rampAsColor=boolean], [statusBarMessage=string], [useTemplate=string], [valueAtPoint=float], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create a dolly context for the graph editor.",
            "name": "graphDollyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "graphDollyCtx([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create a selection context for the hypergraph editor.",
            "name": "graphSelectContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "graphSelectContext([exists=boolean], [image1=string], [image2=string], [image3=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create a track context for the graph editor.",
            "name": "graphTrackCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "graphTrackCtx([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "For each listed object, the command creates a new field.",
            "name": "gravity",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "gravity( [objects] , [attenuation=float], [directionX=float], [directionY=float], [directionZ=float], [magnitude=float], [maxDistance=linear], [name=string], [perVertex=boolean], [position=[linear, linear, linear]], [torusSectionRadius=linear], [volumeExclusion=boolean], [volumeOffset=[linear, linear, linear]], [volumeShape=string], [volumeSweep=angle])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command changes the size and spacing of lines on the ground plane displayed in the perspective and orthographic views.",
            "name": "grid",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "grid([default=boolean], [displayAxes=boolean], [displayAxesBold=boolean], [displayDivisionLines=boolean], [displayGridLines=boolean], [displayOrthographicLabels=boolean], [displayPerspectiveLabels=boolean], [divisions=uint], [orthographicLabelPosition=string], [perspectiveLabelPosition=string], [reset=boolean], [size=linear], [spacing=linear], [style=uint], [toggle=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This layout arranges children in a grid fashion where every cell in the grid is the same size.",
            "name": "gridLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "gridLayout( [string] , [allowEmptyCells=boolean], [annotation=string], [autoGrow=boolean], [backgroundColor=[float, float, float]], [cellHeight=int], [cellWidth=int], [cellWidthHeight=[int, int]], [childArray=boolean], [columnsResizable=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [gridOrder=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfChildren=boolean], [numberOfColumns=int], [numberOfPopupMenus=boolean], [numberOfRows=int], [numberOfRowsColumns=[int, int]], [parent=string], [popupMenuArray=boolean], [position=[string, int]], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command groups the specified objects under a new group and returns the name of the new group.",
            "name": "group",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- name of the group node",
                    "type": "string"
                }
            ],
            "synopsis": "group( [objects...] , [absolute=boolean], [empty=boolean], [name=string], [parent=string], [relative=boolean], [useAsGroup=string], [world=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The hardenPointCurve command changes the knots of a curve given a list of control point indices so that the knot corresponding to that control point gets the specified multiplicity.",
            "name": "hardenPointCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "hardenPointCurve( curve , [caching=boolean], [constructionHistory=boolean], [multiplicity=int], [name=string], [nodeState=int], [object=boolean], [replaceOriginal=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Return description of the hardware available in the machine.",
            "name": "hardware",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "hardware([brdType=boolean], [cpuType=boolean], [graphicsType=boolean], [megaHertz=boolean], [numProcessors=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command creates, edit and queries hardware render panels which contain only a hardware render editor.",
            "name": "hardwareRenderPanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Panel name",
                    "type": "string"
                }
            ],
            "synopsis": "hardwareRenderPanel( panelName , [camera=string], [control=boolean], [copy=string], [createString=boolean], [defineTemplate=string], [docTag=string], [editString=boolean], [exists=boolean], [glRenderEditor=boolean], [init=boolean], [isUnique=boolean], [label=string], [menuBarRepeatLast=boolean], [menuBarVisible=boolean], [needsInit=boolean], [parent=string], [popupMenuProcedure=script], [replacePanel=string], [tearOff=boolean], [tearOffCopy=string], [tearOffRestore=boolean], [unParent=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command is used to query for the presence of metadata elements on a node, components, or scene.",
            "name": "hasMetadata",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of indexes in the filtered list which contain metadata",
                    "type": "string[]"
                },
                {
                    "description": "List of answers to whether the specified item(s) have metadata",
                    "type": "boolean[]"
                }
            ],
            "synopsis": "hasMetadata([asList=boolean], [channelName=string], [channelType=string], [endIndex=string], [ignoreDefault=boolean], [index=string], [indexType=string], [memberName=string], [scene=boolean], [startIndex=string], [streamName=string])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command creates a Heads-up Display (HUD) object which is placed in a 2D inactive overlay plane on the 3D viewport.",
            "name": "headsUpDisplay",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "ID number of the Heads-Up Display (HUD), for regular command execution.",
                    "type": "int"
                },
                {
                    "description": "HUD name, HUD ID or Section and block value, for respective remove commands.",
                    "type": "string|int|int[2]"
                }
            ],
            "synopsis": "headsUpDisplay([string], [allDescendants=boolean], [allowOverlap=boolean], [attachToRefresh=boolean], [attributeChange=string], [block=int], [blockAlignment=string], [blockSize=string], [command=script], [conditionChange=string], [conditionFalse=string], [conditionTrue=string], [connectionChange=string], [dataAlignment=string], [dataFontSize=string], [dataWidth=int], [decimalPrecision=int], [disregardIndex=boolean], [event=string], [exists=boolean], [getOption=string], [gridColor=int], [label=string], [labelFontSize=string], [labelWidth=int], [lastOccupiedBlock=int], [layoutVisibility=boolean], [listConditions=boolean], [listEvents=boolean], [listHeadsUpDisplays=boolean], [listNodeChanges=boolean], [listPresets=boolean], [name=string], [nextFreeBlock=int], [nodeChanges=string], [padding=int], [preset=string], [refresh=boolean], [remove=boolean], [removeID=int], [removePosition=[int, int]], [resetNodeChanges=string], [scriptResult=boolean], [section=int], [setOption=[string, string]], [showGrid=boolean], [visible=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command draws a message in the 3d view.",
            "name": "headsUpMessage",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "headsUpMessage( [message string] , [horizontalOffset=int], [object=string], [selection=boolean], [time=float], [uvTextureEditor=boolean], [verticalOffset=int], [viewport=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "With no arguments, help tells how to use help.",
            "name": "help",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "help( [string] , [documentation=boolean], [language=string], [list=boolean], [popupDisplayTime=uint], [popupMode=boolean], [popupPauseTime=uint], [popupSimpleMode=boolean], [rolloverMode=boolean], [syntaxOnly=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a help line where tool help/hints are shown.",
            "name": "helpLine",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name of control.",
                    "type": "string"
                }
            ],
            "synopsis": "helpLine( [name] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "The `hide` command is used to make objects invisible.",
            "name": "hide",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "hide( [objects] , [allObjects=boolean], [clearLastHidden=boolean], [clearSelection=boolean], [invertComponents=boolean], [returnHidden=boolean], [testVisibility=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Sets global HumanIK flags for the application.",
            "name": "hikGlobals",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Giving the state of the option",
                    "type": "boolean"
                }
            ],
            "synopsis": "hikGlobals([releaseAllPinning=boolean])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "Hilites/Unhilites the specified object(s).",
            "name": "hilite",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "hilite( [objects] , [replace=boolean], [toggle=boolean], [unHilite=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The `hitTest` command hit-tests a point in the named control and returns a list of items underneath the point.",
            "name": "hitTest",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "items underneath the hit-point",
                    "type": "string[]"
                }
            ],
            "synopsis": "hitTest(stringintint)"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "This command controls parameters related to the hotBox menubar palette.",
            "name": "hotBox",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "hotBox([PaneOnlyMenus=boolean], [PaneToggleMenus=boolean], [animationOnlyMenus=boolean], [animationToggleMenus=boolean], [clothOnlyMenus=boolean], [clothToggleMenus=boolean], [commonOnlyMenus=boolean], [commonToggleMenus=boolean], [customMenuSetsToggleMenus=boolean], [displayCenterOnly=boolean], [displayHotbox=boolean], [displayStyle=boolean], [displayZonesOnly=boolean], [dynamicsOnlyMenus=boolean], [dynamicsToggleMenus=boolean], [liveOnlyMenus=boolean], [liveToggleMenus=boolean], [menuSetOnly=string], [menuSetToggle=[string, boolean]], [modelingOnlyMenus=boolean], [modelingToggleMenus=boolean], [noClickCommand=script], [noClickDelay=float], [noClickPosition=boolean], [noKeyPress=boolean], [polygonsOnlyMenus=boolean], [polygonsToggleMenus=boolean], [position=[uint, uint]], [release=boolean], [renderingOnlyMenus=boolean], [renderingToggleMenus=boolean], [riggingOnlyMenus=boolean], [riggingToggleMenus=boolean], [rmbPopups=boolean], [showAllToggleMenus=boolean], [surfacesOnlyMenus=boolean], [surfacesToggleMenus=boolean], [transparenyLevel=int], [updateMenus=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command sets the single-key hotkeys for the entire application.",
            "name": "hotkey",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "hotkey([altModifier=boolean], [autoSave=boolean], [commandModifier=boolean], [ctrlModifier=boolean], [ctxClient=string], [dragPress=boolean], [factorySettings=boolean], [isModifier=boolean], [keyShortcut=string], [name=string], [pressCommandRepeat=boolean], [releaseCommandRepeat=boolean], [releaseName=string], [shiftModifier=boolean], [sourceUserHotkeys=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command checks if the given hotkey is mapped to a nameCommand object.",
            "name": "hotkeyCheck",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Contains all clients name, each followed by the annotation of the corresponding nameCommand object, or an empty string.",
                    "type": "string"
                }
            ],
            "synopsis": "hotkeyCheck([altModifier=boolean], [commandModifier=boolean], [ctrlModifier=boolean], [isRepeatable=boolean], [keyString=string], [keyUp=boolean], [optionModifier=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command sets the hotkey context for the entire application.",
            "name": "hotkeyCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "hotkeyCtx([addClient=string], [clientArray=boolean], [currentClient=string], [insertTypeAt=[string, string]], [removeAllClients=boolean], [removeClient=string], [removeType=string], [type=string], [typeArray=boolean], [typeExists=string])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "A hotkeyEditor creates a new hotkey editor in the current layout.",
            "name": "hotkeyEditorPanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the editor.",
                    "type": "string"
                }
            ],
            "synopsis": "hotkeyEditorPanel( [name] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "Manages hotkey sets in Maya.",
            "name": "hotkeySet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the hotkey set.",
                    "type": "string"
                }
            ],
            "synopsis": "hotkeySet( [name] , [current=boolean], [delete=boolean], [exists=boolean], [export=string], [hotkeySetArray=boolean], [ip=string], [rename=string], [source=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a Heads-up Display (HUD) button control which is placed in a 2D inactive overlay plane on the 3D viewport.",
            "name": "hudButton",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "ID number of the Heads-Up Display (HUD).",
                    "type": "int"
                },
                {
                    "description": "HUD name, HUD ID or Section and block value, for respective remove commands.",
                    "type": "string|int|int[2]"
                }
            ],
            "synopsis": "hudButton([string], [allowOverlap=boolean], [block=int], [blockAlignment=string], [blockSize=string], [buttonShape=string], [buttonWidth=int], [label=string], [labelFontSize=string], [padding=int], [pressCommand=script], [releaseCommand=script], [section=int], [visible=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a Heads-up Display (HUD) slider control which is placed in a 2D inactive overlay plane on the 3D viewport.",
            "name": "hudSlider",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "ID number of the Heads-Up Display (HUD).",
                    "type": "int"
                },
                {
                    "description": "HUD name, HUD ID or Section and block value, for respective remove commands.",
                    "type": "string|int|int[2]"
                }
            ],
            "synopsis": "hudSlider([string], [allowOverlap=boolean], [block=int], [blockAlignment=string], [blockSize=string], [decimalPrecision=int], [dragCommand=script], [internalPadding=int], [label=string], [labelFontSize=string], [labelWidth=int], [maxValue=float], [minValue=float], [padding=int], [pressCommand=script], [releaseCommand=script], [section=int], [sliderIncrement=float], [sliderLength=int], [type=string], [value=float], [valueAlignment=string], [valueFontSize=string], [valueWidth=int], [visible=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a Heads-up Display (HUD) slider button control which is placed in a 2D inactive overlay plane on the 3D viewport.",
            "name": "hudSliderButton",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "ID number of the Heads-Up Display (HUD).",
                    "type": "int"
                },
                {
                    "description": "HUD name, HUD ID or Section and block value, for respective remove commands.",
                    "type": "string|int|int[2]"
                }
            ],
            "synopsis": "hudSliderButton([string], [allowOverlap=boolean], [block=int], [blockAlignment=string], [blockSize=string], [buttonLabel=string], [buttonLabelFontSize=string], [buttonPressCommand=script], [buttonReleaseCommand=script], [buttonShape=string], [buttonWidth=int], [decimalPrecision=int], [internalPadding=int], [maxValue=float], [minValue=float], [padding=int], [section=int], [sliderDragCommand=script], [sliderIncrement=float], [sliderLabel=string], [sliderLabelFontSize=string], [sliderLabelWidth=int], [sliderLength=int], [sliderPressCommand=script], [sliderReleaseCommand=script], [type=string], [value=float], [valueAlignment=string], [valueFontSize=string], [valueWidth=int], [visible=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command creates a hwReflectionMap node for having reflection on textured surfaces that currently have their boolean attribute displayHWEnvironment set to true.",
            "name": "hwReflectionMap",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the created hwReflectionMap node)",
                    "type": "string"
                }
            ],
            "synopsis": "hwReflectionMap([backTextureName=string], [bottomTextureName=string], [cubeMap=boolean], [decalMode=boolean], [enable=boolean], [frontTextureName=string], [leftTextureName=string], [rightTextureName=string], [sphereMapTextureName=string], [topTextureName=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Renders an image or a sequence using the hardware rendering engine.",
            "name": "hwRender",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "hwRender([acceleratedMultiSampleSupport=boolean], [activeTextureCount=boolean], [camera=string], [currentFrame=boolean], [currentView=boolean], [edgeAntiAliasing=[uint, uint]], [fixFileNameNumberPattern=boolean], [frame=float], [fullRenderSupport=boolean], [height=uint], [imageFileName=boolean], [layer=name], [limitedRenderSupport=boolean], [lowQualityLighting=boolean], [noRenderView=boolean], [notWriteToFile=boolean], [printGeometry=boolean], [renderHardwareName=boolean], [renderRegion=[uint, uint, uint, uint]], [renderSelected=boolean], [textureResolution=uint], [width=uint], [writeAlpha=boolean], [writeDepth=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Empty command used to force the dynamic load of HR render.",
            "name": "hwRenderLoad",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "hwRenderLoad()"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "The following is an overview of the basic features of the hypergraph.",
            "name": "hyperGraph",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "the name of the panel",
                    "type": "string"
                }
            ],
            "synopsis": "hyperGraph( [string] , [addBookmark=boolean], [addDependGraph=name], [addDependNode=name], [animateTransition=boolean], [attributeEditor=string], [backward=boolean], [bookmarkName=boolean], [breakConnectionCommand=string], [clear=boolean], [collapseContainer=boolean], [connectionDrawStyle=string], [control=boolean], [currentEdge=string], [currentNode=string], [debug=string], [defineTemplate=string], [deleteBookmark=string], [dependGraph=boolean], [dependNode=string], [directoryPressCommand=string], [docTag=string], [down=boolean], [downstream=boolean], [dragAndDropBehaviorCommand=string], [dropNode=string], [dropTargetNode=string], [edgeDblClickCommand=string], [edgeDimmedDblClickCommand=string], [edgeDropCommand=string], [edgePressCommand=string], [edgeReleaseCommand=string], [enableAutomaticLayout=boolean], [exists=boolean], [expandContainer=boolean], [feedbackGadget=string], [feedbackNode=string], [filter=string], [filterDetail=[string, boolean]], [fitImageToHeight=boolean], [fitImageToWidth=boolean], [focusCommand=string], [fold=boolean], [forceMainConnection=string], [forceRefresh=boolean], [forward=boolean], [frame=boolean], [frameBranch=boolean], [frameGraph=boolean], [frameGraphNoRebuild=boolean], [frameHierarchy=boolean], [freeform=boolean], [fromAttr=string], [fromNode=string], [getNodeList=boolean], [getNodePosition=string], [graphDescription=boolean], [graphLayoutStyle=string], [graphType=string], [heatMapDisplay=boolean], [highlightConnection=string], [iconSize=string], [image=string], [imageEnabled=boolean], [imageForContainer=boolean], [imagePosition=[float, float]], [imageScale=float], [initializeScript=string], [isHotkeyTarget=boolean], [layout=boolean], [layoutSelected=string], [limitGraphTraversal=int], [lockMainConnection=boolean], [look=[float, float]], [mainListConnection=string], [mergeConnections=boolean], [navigateHome=boolean], [navup=boolean], [newInputConnection=string], [newOutputConnection=string], [nextView=boolean], [nodeConnectCommand=string], [nodeDblClickCommand=string], [nodeDropCommand=string], [nodeMenuCommand=string], [nodePressCommand=string], [nodeReleaseCommand=string], [opaqueContainers=boolean], [orientation=string], [panView=[float, float]], [panel=string], [parent=string], [popupMenuScript=string], [previousView=boolean], [range=[float, float]], [rebuild=boolean], [removeNode=string], [rename=boolean], [resetFreeform=boolean], [restoreBookmark=string], [scrollUpDownNoZoom=boolean], [selectionConnection=string], [setNodePosition=[string, float, float]], [showCachedConnections=boolean], [showConnectionFromSelected=boolean], [showConnectionToSelected=boolean], [showConstraintLabels=boolean], [showConstraints=boolean], [showDeformers=boolean], [showExpressions=boolean], [showInvisible=boolean], [showRelationships=boolean], [showShapes=boolean], [showUnderworld=boolean], [stateString=boolean], [toAttr=string], [toNode=string], [transitionFrames=int], [unParent=boolean], [unfold=boolean], [unfoldAll=boolean], [unfoldAllShapes=boolean], [unfoldHidden=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [updateNodeAdded=boolean], [updateSelection=boolean], [upstream=boolean], [useDrawOverrideColor=boolean], [useFeedbackList=boolean], [useTemplate=string], [viewOption=string], [visibility=boolean], [zoom=float])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command creates, edit and queries hypergraph panels which contain only a hypergraph editor.",
            "name": "hyperPanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the panel",
                    "type": "string"
                }
            ],
            "synopsis": "hyperPanel( [panelName] , [control=boolean], [copy=string], [createString=boolean], [defineTemplate=string], [docTag=string], [editString=boolean], [exists=boolean], [hyperEditor=boolean], [init=boolean], [isUnique=boolean], [label=string], [menuBarRepeatLast=boolean], [menuBarVisible=boolean], [needsInit=boolean], [parent=string], [popupMenuProcedure=script], [replacePanel=string], [tearOff=boolean], [tearOffCopy=string], [tearOffRestore=boolean], [unParent=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "Commands for shader editing in the hypergraph.",
            "name": "hyperShade",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "hyperShade([assign=string], [clearWorkArea=boolean], [collapse=string], [createNode=string], [dependGraphArea=boolean], [downStream=boolean], [duplicate=boolean], [fixRenderSize=boolean], [incremental=boolean], [listDownstreamNodes=name], [listDownstreamShaderNodes=name], [listUpstreamNodes=name], [name=string], [networks=boolean], [noSGShapes=boolean], [noShapes=boolean], [noTransforms=boolean], [objects=string], [renderCreateAndDrop=string], [reset=boolean], [resetGraph=boolean], [resetSwatch=boolean], [setAllowsRegraphing=boolean], [setWorkArea=string], [shaderNetwork=string], [shaderNetworks=boolean], [shaderNetworksSelectMaterialNodes=boolean], [snapShot=boolean], [uncollapse=string], [upStream=boolean], [userDefinedLayout=boolean], [workAreaAddCmd=string], [workAreaDeleteCmd=string], [workAreaSelectCmd=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This control supports up to 3 icon images and 4 different display styles.",
            "name": "iconTextButton",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the iconTextButton.",
                    "type": "string"
                }
            ],
            "synopsis": "iconTextButton( [string] , [align=string], [annotation=string], [backgroundColor=[float, float, float]], [command=script], [commandRepeatable=boolean], [defineTemplate=string], [disabledImage=string], [docTag=string], [doubleClickCommand=script], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [flat=boolean], [flipX=boolean], [flipY=boolean], [font=string], [fullPathName=boolean], [handleNodeDropCallback=script], [height=int], [highlightColor=[float, float, float]], [highlightImage=string], [image=string], [image1=string], [image2=string], [image3=string], [imageOverlayLabel=string], [isObscured=boolean], [label=string], [labelEditingCallback=script], [labelOffset=int], [manage=boolean], [marginHeight=uint], [marginWidth=uint], [noBackground=boolean], [numberOfPopupMenus=boolean], [overlayLabelBackColor=[float, float, float, float]], [overlayLabelColor=[float, float, float]], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rotation=float], [scaleIcon=boolean], [selectionImage=string], [sourceType=string], [statusBarMessage=string], [style=string], [useAlpha=boolean], [useTemplate=string], [version=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This control supports up to 3 icon images and 4 different display styles.",
            "name": "iconTextCheckBox",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "iconTextCheckBox( [string] , [align=string], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [disabledImage=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [flat=boolean], [flipX=boolean], [flipY=boolean], [font=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [highlightImage=string], [image=string], [image1=string], [image2=string], [image3=string], [imageOverlayLabel=string], [isObscured=boolean], [label=string], [labelOffset=int], [manage=boolean], [marginHeight=uint], [marginWidth=uint], [noBackground=boolean], [numberOfPopupMenus=boolean], [offCommand=script], [onCommand=script], [overlayLabelBackColor=[float, float, float, float]], [overlayLabelColor=[float, float, float]], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rotation=float], [selectionHighlightImage=string], [selectionImage=string], [statusBarMessage=string], [style=string], [useAlpha=boolean], [useTemplate=string], [value=boolean], [version=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This control supports up to 3 icon images and 4 different display styles.",
            "name": "iconTextRadioButton",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the iconTextRadioButton created.",
                    "type": "string"
                }
            ],
            "synopsis": "iconTextRadioButton( string , [align=string], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [collection=string], [defineTemplate=string], [disabledImage=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [flat=boolean], [flipX=boolean], [flipY=boolean], [font=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [highlightImage=string], [image=string], [image1=string], [image2=string], [image3=string], [imageOverlayLabel=string], [isObscured=boolean], [label=string], [labelOffset=int], [manage=boolean], [marginHeight=uint], [marginWidth=uint], [noBackground=boolean], [numberOfPopupMenus=boolean], [offCommand=script], [onCommand=script], [overlayLabelBackColor=[float, float, float, float]], [overlayLabelColor=[float, float, float]], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rotation=float], [select=boolean], [selectionHighlightImage=string], [selectionImage=string], [statusBarMessage=string], [style=string], [useAlpha=boolean], [useTemplate=string], [version=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a cluster for iconTextRadioButtons.",
            "name": "iconTextRadioCollection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the iconTextRadioCollection created.",
                    "type": "string"
                }
            ],
            "synopsis": "iconTextRadioCollection( [string] , [collectionItemArray=boolean], [defineTemplate=string], [disableCommands=boolean], [exists=boolean], [gl=boolean], [numberOfCollectionItems=boolean], [parent=string], [select=string], [useTemplate=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates/edits/queries a text scrolling list.",
            "name": "iconTextScrollList",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "iconTextScrollList( [string] , [allowMultiSelection=boolean], [annotation=string], [append=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [deselectAll=boolean], [docTag=string], [doubleClickCommand=script], [dragCallback=script], [dragFeedbackVisible=boolean], [dropCallback=script], [dropRectCallback=script], [editIndexed=uint], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [itemAt=[int, int]], [itemTextColor=[int, float, float, float]], [manage=boolean], [noBackground=boolean], [numberOfIcons=uint], [numberOfPopupMenus=boolean], [numberOfRows=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [removeAll=boolean], [selectCommand=script], [selectIndexedItem=int], [selectItem=string], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [visualRectAt=[int, int]], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This control supports up to 3 icon images and 4 different display styles.",
            "name": "iconTextStaticLabel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the iconTextStaticLabel created.",
                    "type": "string"
                }
            ],
            "synopsis": "iconTextStaticLabel( string , [align=string], [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [disabledImage=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [flipX=boolean], [flipY=boolean], [font=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [image=string], [image1=string], [image2=string], [image3=string], [imageOverlayLabel=string], [isObscured=boolean], [label=string], [labelOffset=int], [manage=boolean], [marginHeight=uint], [marginWidth=uint], [noBackground=boolean], [numberOfPopupMenus=boolean], [overlayLabelBackColor=[float, float, float, float]], [overlayLabelColor=[float, float, float]], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rotation=float], [statusBarMessage=string], [style=string], [useAlpha=boolean], [useTemplate=string], [version=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "The `ikfkDisplayMethod` command is used to specify how ik/fk blending should be shown.",
            "name": "ikfkDisplayMethod",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "ikfkDisplayMethod([display=string])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "The handle command is used to create, edit, and query a handle within Maya.",
            "name": "ikHandle",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "ikHandle( object , [autoPriority=boolean], [connectEffector=boolean], [createCurve=boolean], [createRootAxis=boolean], [curve=name], [disableHandles=boolean], [enableHandles=boolean], [endEffector=string], [exists=string], [forceSolver=boolean], [freezeJoints=boolean], [jointList=boolean], [name=string], [numSpans=int], [parentCurve=boolean], [positionWeight=float], [priority=int], [rootOnCurve=boolean], [rootTwistMode=boolean], [setupForRPsolver=boolean], [simplifyCurve=boolean], [snapCurve=boolean], [snapHandleFlagToggle=boolean], [snapHandleToEffector=boolean], [solver=string], [startJoint=string], [sticky=string], [twistType=string], [weight=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The ikHandle context command (ikHandleCtx) updates parameters of ikHandle tool.",
            "name": "ikHandleCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "ikHandleCtx( object , [autoPriorityH=boolean], [createCurve=boolean], [createRootAxis=boolean], [exists=boolean], [forceSolverH=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [numSpans=int], [parentCurve=boolean], [poWeightH=float], [priorityH=int], [rootOnCurve=boolean], [rootTwistMode=boolean], [simplifyCurve=boolean], [snapCurve=boolean], [snapHandleH=boolean], [solverTypeH=string], [stickyH=string], [twistType=string], [weightH=float])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "This action modifies and queries the current display size of ikHandle.",
            "name": "ikHandleDisplayScale",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Returns current display size of ikHandle.",
                    "type": "float"
                }
            ],
            "synopsis": "ikHandleDisplayScale( float )"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "The ikSolver command is used to set the attributes for an IK Solver or create a new one.",
            "name": "ikSolver",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "ikSolver( [object] , [epsilon=float], [maxIterations=int], [name=string], [solverType=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The ikSplineHandle context command (ikSplineHandleCtx) updates parameters of ikSplineHandle tool.",
            "name": "ikSplineHandleCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context.",
                    "type": "string"
                }
            ],
            "synopsis": "ikSplineHandleCtx( object , [autoPriorityH=boolean], [createCurve=boolean], [createRootAxis=boolean], [exists=boolean], [forceSolverH=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [numSpans=int], [parentCurve=boolean], [poWeightH=float], [priorityH=int], [rootOnCurve=boolean], [rootTwistMode=boolean], [simplifyCurve=boolean], [snapCurve=boolean], [snapHandleH=boolean], [solverTypeH=string], [stickyH=string], [twistType=string], [weightH=float])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "The ikSystem command is used to set the global snapping flag for handles and set the global solve flag for solvers.",
            "name": "ikSystem",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "ikSystem( [object] , [allowRotation=boolean], [autoPriority=boolean], [autoPriorityMC=boolean], [autoPrioritySC=boolean], [list=[int, int]], [snap=boolean], [solve=boolean], [solverTypes=boolean])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "This action modifies and queries the current ikSystem controls.",
            "name": "ikSystemInfo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "ikSystemInfo( boolean , [globalSnapHandle=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The illustratorCurves command creates NURBS curves from an input Adobe(R) Illustrator(R) file.",
            "name": "illustratorCurves",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "illustratorCurves( [string] , [caching=boolean], [constructionHistory=boolean], [illustratorFilename=string], [nodeState=int], [object=boolean], [tolerance=float])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a static image for non-xpm files.",
            "name": "image",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the image created.",
                    "type": "string"
                }
            ],
            "synopsis": "image( [imageName] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [image=string], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The imagePlane command allows querying of various properties of an image plane and any movie in use by the image plane.",
            "name": "imagePlane",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "imagePlane([camera=string], [counter=boolean], [detach=boolean], [dropFrame=boolean], [fileName=string], [frameDuration=int], [height=float], [imageSize=[int, int]], [lookThrough=string], [maintainRatio=boolean], [name=string], [negTimesOK=boolean], [numFrames=int], [quickTime=boolean], [showInAllViews=boolean], [timeCode=int], [timeCodeTrack=boolean], [timeScale=int], [twentyFourHourMax=boolean], [width=float])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command queries all the available imf plugins for its name, keyword or image file extension.",
            "name": "imfPlugins",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "imfPlugins([string], [extension=string], [keyword=string], [multiFrameSupport=string], [pluginName=string], [readSupport=string], [writeSupport=string])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command toggles the inherit state of an object.",
            "name": "inheritTransform",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "inheritTransform( [objects...] , [off=boolean], [on=boolean], [preserve=boolean], [toggle=boolean])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "This command will insert a new joint under the given or selected joint.",
            "name": "insertJoint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the new inserted joint",
                    "type": "string"
                }
            ],
            "synopsis": "insertJoint( [object] )"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The command will create an insert joint context.",
            "name": "insertJointCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context.",
                    "type": "string"
                }
            ],
            "synopsis": "insertJointCtx([exists=boolean], [image1=string], [image2=string], [image3=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to insert keys within the graph editor.",
            "name": "insertKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "insertKeyCtx( contextName , [breakdown=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [preserveTangent=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The insertKnotCurve command inserts knots into a curve given a list of parameter values.",
            "name": "insertKnotCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "insertKnotCurve( curve , [addKnots=boolean], [caching=boolean], [constructionHistory=boolean], [curveOnSurface=boolean], [insertBetween=boolean], [name=string], [nodeState=int], [numberOfKnots=int], [object=boolean], [parameter=float], [replaceOriginal=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The insertKnotSurface command inserts knots (aka isoparms) into a surface given a list of parameter values.",
            "name": "insertKnotSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "insertKnotSurface( surface , [addKnots=boolean], [caching=boolean], [constructionHistory=boolean], [direction=int], [insertBetween=boolean], [name=string], [nodeState=int], [numberOfKnots=int], [object=boolean], [parameter=float], [replaceOriginal=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Instancing is a way of making the same object appear twice in the scene.",
            "name": "instance",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- the name of the new transform node is returned.",
                    "type": "string"
                }
            ],
            "synopsis": "instance( [objects] , [leaf=boolean], [name=string], [smartTransform=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Flags one or more DAG nodes so that they can (or cannot) be instanced.",
            "name": "instanceable",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "For query execution.",
                    "type": "boolean[]"
                }
            ],
            "synopsis": "instanceable([allow=boolean], [recursive=boolean], [shape=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command is used to create a instancer node and set the proper attributes in the node.",
            "name": "instancer",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "instancer([addObject=boolean], [cycle=string], [cycleStep=float], [cycleStepUnits=string], [index=int], [levelOfDetail=string], [name=string], [object=string], [objectPosition=string], [objectRotation=string], [objectScale=string], [pointDataSource=boolean], [removeObject=boolean], [rotationOrder=string], [rotationUnits=string], [valueName=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command returns the values of internal variables.",
            "name": "internalVar",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The value of the variable specified by the flag use.",
                    "type": "string"
                }
            ],
            "synopsis": "internalVar([mayaInstallDir=boolean], [userAppDir=boolean], [userBitmapsDir=boolean], [userHotkeyDir=boolean], [userMarkingMenuDir=boolean], [userPrefDir=boolean], [userPresetsDir=boolean], [userScriptDir=boolean], [userShelfDir=boolean], [userTmpDir=boolean], [userWorkspaceDir=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The intersect command creates a curve on surface where all surfaces intersect with each other.",
            "name": "intersect",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "intersect( [surface] [surface] , [caching=boolean], [constructionHistory=boolean], [curveOnSurface=boolean], [firstSurface=boolean], [name=string], [nodeState=int], [object=boolean], [tolerance=linear])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Create a field control that accepts only integer values and is bound by a minimum and maximum value.",
            "name": "intField",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "intField( [string] , [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [enterCommand=script], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [maxValue=int], [minValue=int], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [receiveFocusCommand=script], [statusBarMessage=string], [step=int], [useTemplate=string], [value=int], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "intFieldGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "intFieldGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enable1=boolean], [enable2=boolean], [enable3=boolean], [enable4=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [extraLabel=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfFields=int], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowAttach=[int, string, int]], [statusBarMessage=string], [useTemplate=string], [value=[int, int, int, int]], [value1=int], [value2=int], [value3=int], [value4=int], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Create a scroll bar control that accepts only integer values and is bound by a minimum and maximum value.",
            "name": "intScrollBar",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "intScrollBar( [string] , [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [horizontal=boolean], [isObscured=boolean], [largeStep=int], [manage=boolean], [maxValue=int], [minValue=int], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [step=int], [useTemplate=string], [value=int], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Create a slider control that accepts only integer values and is bound by a minimum and maximum value.",
            "name": "intSlider",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "intSlider( string , [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [horizontal=boolean], [isObscured=boolean], [manage=boolean], [maxValue=int], [minValue=int], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [step=int], [useTemplate=string], [value=int], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "intSliderGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name of the control on creation.",
                    "type": "string"
                }
            ],
            "synopsis": "intSliderGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [extraLabel=string], [field=boolean], [fieldMaxValue=int], [fieldMinValue=int], [fieldStep=int], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [maxValue=int], [minValue=int], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowAttach=[int, string, int]], [sliderStep=int], [statusBarMessage=string], [step=int], [useTemplate=string], [value=int], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "Mel access to the In-View Editor.",
            "name": "inViewEditor",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "inViewEditor([visible=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "Used for displaying in-view messages.",
            "name": "inViewMessage",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "inViewMessage([alpha=float], [assistMessage=string], [backColor=uint], [clear=string], [clickKill=boolean], [dragKill=boolean], [fade=boolean], [fadeInTime=uint], [fadeOutTime=uint], [fadeStayTime=uint], [font=string], [fontSize=uint], [frameOffset=uint], [hide=boolean], [message=string], [minimize=boolean], [position=string], [restore=boolean], [show=boolean], [statusMessage=string], [textAlpha=float], [textOffset=uint], [uvEditor=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Command to create or edit an iprEngine.",
            "name": "iprEngine",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- the name of the ipr engine created or modified",
                    "type": "string"
                }
            ],
            "synopsis": "iprEngine([copy=string], [defineTemplate=string], [diagnostics=boolean], [estimatedMemory=boolean], [exists=boolean], [iprImage=string], [motionVectorFile=boolean], [object=name], [region=[int, int, int, int]], [relatedFiles=boolean], [releaseIprImage=boolean], [resolution=boolean], [scanlineIncrement=string], [showProgressBar=boolean], [startTuning=boolean], [stopTuning=boolean], [underPixel=[int, int]], [update=boolean], [updateDepthOfField=boolean], [updateLightGlow=boolean], [updateMotionBlur=boolean], [updatePort=string], [updateShaderGlow=boolean], [updateShading=boolean], [updateShadowMaps=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "The `isConnected` command is used to check if two plugs are connected in the dependency graph.",
            "name": "isConnected",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Are the two plugs connected?",
                    "type": "boolean"
                }
            ],
            "synopsis": "isConnected( string string , [ignoreUnitConversion=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "The `isDirty` command is used to check if a plug is dirty.",
            "name": "isDirty",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Is the plug dirty? If more than one plug is given then it returns the logical \"and\" of all dirty states.",
                    "type": "boolean"
                }
            ],
            "synopsis": "isDirty( string... , [connection=boolean], [datablock=boolean])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "This command turns on/off isolate select mode in a specified modeling view, specified as the argument.",
            "name": "isolateSelect",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "When used with query",
                    "type": "boolean"
                }
            ],
            "synopsis": "isolateSelect( string , [addDagObject=name], [addSelected=boolean], [addSelectedObjects=boolean], [loadSelected=boolean], [removeDagObject=name], [removeSelected=boolean], [state=boolean], [update=boolean], [viewObjects=boolean])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This commmand returns the state of the named condition.",
            "name": "isTrue",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "isTrue( string )"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command creates a named itemFilter object.",
            "name": "itemFilter",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Single command result",
                    "type": "string"
                },
                {
                    "description": "Multiple command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "itemFilter( [string] , [byBin=string], [byName=string], [byScript=string], [byType=string], [category=string], [classification=string], [clearByBin=boolean], [clearByType=boolean], [difference=[string, string]], [exists=boolean], [intersect=[string, string]], [listBuiltInFilters=boolean], [listOtherFilters=boolean], [listUserFilters=boolean], [negate=boolean], [parent=string], [pythonModule=string], [secondScript=string], [text=string], [union=[string, string]], [uniqueNodeNames=boolean])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command creates a named itemFilterAttr object.",
            "name": "itemFilterAttr",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Single command result",
                    "type": "string"
                },
                {
                    "description": "Multiple command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "itemFilterAttr( [string] , [byName=string], [byNameString=string], [byScript=string], [classification=string], [dynamic=boolean], [exists=boolean], [hasCurve=boolean], [hasDrivenKey=boolean], [hasExpression=boolean], [hidden=boolean], [intersect=[string, string]], [keyable=boolean], [listBuiltInFilters=boolean], [listOtherFilters=boolean], [listUserFilters=boolean], [negate=boolean], [parent=string], [published=boolean], [readable=boolean], [scaleRotateTranslate=boolean], [secondScript=string], [text=string], [union=[string, string]], [writable=boolean])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command queries a named itemFilter object.",
            "name": "itemFilterType",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Single command result",
                    "type": "string"
                },
                {
                    "description": "Multiple command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "itemFilterType( string , [text=string], [type=boolean])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "The joint command is used to create, edit, and query, joints within Maya.",
            "name": "joint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "joint( [objects] , [absolute=boolean], [angleX=angle], [angleY=angle], [angleZ=angle], [assumePreferredAngles=boolean], [automaticLimits=boolean], [children=boolean], [component=boolean], [degreeOfFreedom=string], [exists=string], [limitSwitchX=boolean], [limitSwitchY=boolean], [limitSwitchZ=boolean], [limitX=[angle, angle]], [limitY=[angle, angle]], [limitZ=[angle, angle]], [name=string], [orientJoint=string], [orientation=[angle, angle, angle]], [position=[linear, linear, linear]], [radius=float], [relative=boolean], [rotationOrder=string], [scale=[float, float, float]], [scaleCompensate=boolean], [scaleOrientation=[angle, angle, angle]], [secondaryAxisOrient=string], [setPreferredAngles=boolean], [stiffnessX=float], [stiffnessY=float], [stiffnessZ=float], [symmetry=boolean], [symmetryAxis=string], [zeroScaleOrient=boolean])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "The joint cluster command adds high-level controls to manage the cluster percentage values on a bound skin around a joint.",
            "name": "jointCluster",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the new jointCluster node",
                    "type": "string"
                }
            ],
            "synopsis": "jointCluster( string , [aboveBound=float], [aboveCluster=boolean], [aboveDropoffType=string], [aboveValue=float], [belowBound=float], [belowCluster=boolean], [belowDropoffType=string], [belowValue=float], [deformerTools=boolean], [joint=string], [name=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The joint context command (jointCtx) updates the parameters of the joint tool.",
            "name": "jointCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context.",
                    "type": "string"
                }
            ],
            "synopsis": "jointCtx( [object] , [autoJointOrient=string], [autoPriorityH=boolean], [createIKHandle=boolean], [degreeOfFreedomJ=string], [exists=boolean], [forceSolverH=boolean], [image1=string], [image2=string], [image3=string], [jointAutoLimits=boolean], [jointOrientationJ=[angle, angle, angle]], [largeBoneLength=float], [largeBoneRadius=float], [poWeightH=float], [priorityH=int], [scaleCompensateJ=boolean], [scaleJ=[float, float, float]], [scaleOrientationJ=[angle, angle, angle]], [secondaryAxisOrient=string], [smallBoneLength=float], [smallBoneRadius=float], [snapHandleH=boolean], [solverTypeH=string], [stickyH=string], [symmetry=boolean], [symmetryAxis=string], [variableBoneSize=boolean], [weightH=float])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "This action modifies and queries the current display size of skeleton joints.",
            "name": "jointDisplayScale",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Returns current display size of skeleton joints.",
                    "type": "float"
                }
            ],
            "synopsis": "jointDisplayScale( float , [absolute=boolean], [ikfk=float])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "This command creates/edits/queries a jointLattice deformer.",
            "name": "jointLattice",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of joint lattice algorithm node created/edited.",
                    "type": "string"
                }
            ],
            "synopsis": "jointLattice( selectionList , [after=boolean], [afterReference=boolean], [before=boolean], [components=boolean], [creasing=float], [deformerTools=boolean], [exclusive=string], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [joint=string], [lengthIn=float], [lengthOut=float], [lowerBindSkin=string], [lowerTransform=string], [name=string], [parallel=boolean], [prune=boolean], [remove=boolean], [rounding=float], [selectedComponents=boolean], [split=boolean], [upperBindSkin=string], [upperTransform=string], [useComponentTags=boolean], [widthLeft=float], [widthRight=float])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command operates on a keyset.",
            "name": "keyframe",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(except where noted below) Number of curves on which keys were modified. In -query mode, the command can return a variety of things, as described with each queryable flag below.",
                    "type": "int"
                }
            ],
            "synopsis": "keyframe( [objects] , [absolute=boolean], [adjustBreakdown=boolean], [animation=string], [attribute=string], [breakdown=boolean], [clipTime=[time, time, float]], [controlPoints=boolean], [eval=boolean], [float=floatrange], [floatChange=float], [hierarchy=string], [includeUpperBound=boolean], [index=uint], [indexValue=boolean], [keyframeCount=boolean], [lastSelected=boolean], [name=boolean], [option=string], [relative=boolean], [selected=boolean], [shape=boolean], [tickDrawSpecial=boolean], [time=timerange], [timeChange=time], [valueChange=float])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command creates/edits/queries a keyframe outliner control.",
            "name": "keyframeOutliner",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the outliner control.",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeOutliner( string , [animCurve=string], [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [display=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to change current time within the keyframe region of the dope sheet editor.",
            "name": "keyframeRegionCurrentTimeCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeRegionCurrentTimeCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to directly manipulate keyframes within the dope sheet editor.",
            "name": "keyframeRegionDirectKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeRegionDirectKeyCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [option=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create a dolly context for the dope sheet editor.",
            "name": "keyframeRegionDollyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeRegionDollyCtx([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to insert keys within the keyframe region of the dope sheet editor.",
            "name": "keyframeRegionInsertKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeRegionInsertKeyCtx( contextName , [breakdown=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to move keyframes within the keyframe region of the dope sheet editor.",
            "name": "keyframeRegionMoveKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeRegionMoveKeyCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [option=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to scale keyframes within the keyframe region of the dope sheet editor.",
            "name": "keyframeRegionScaleKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeRegionScaleKeyCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [scaleSpecifiedKeys=boolean], [type=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to select keyframes within the keyframe region of the dope sheet editor.",
            "name": "keyframeRegionSelectKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeRegionSelectKeyCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to set keys within the keyframe region of the dope sheet editor.",
            "name": "keyframeRegionSetKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeRegionSetKeyCtx( contextName , [breakdown=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create a track context for the dope sheet editor.",
            "name": "keyframeRegionTrackCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeRegionTrackCtx([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "keyframeStats",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the stats control.",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeStats( string , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [animEditor=string], [annotation=string], [backgroundColor=[float, float, float]], [classicMode=boolean], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [rowAttach=[int, string, int]], [statusBarMessage=string], [timeAnnotation=string], [useTemplate=string], [valueAnnotation=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command creates, edits, queries a keyframe tangent control.",
            "name": "keyframeTangentControl",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the tangent control.",
                    "type": "string"
                }
            ],
            "synopsis": "keyframeTangentControl( string , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command is used to manage the membership of a keying group.",
            "name": "keyingGroup",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "For creation operations (name of the keying group that was created or edited)",
                    "type": "string"
                },
                {
                    "description": "For query operation (names of items in the keying group)",
                    "type": "string[]"
                },
                {
                    "description": "For isMember operation",
                    "type": "boolean"
                }
            ],
            "synopsis": "keyingGroup( objects , [activator=name], [addElement=name], [afterFilters=boolean], [anyMember=name], [category=string], [clear=name], [color=int], [copy=name], [edges=boolean], [editPoints=boolean], [empty=boolean], [excludeDynamic=boolean], [excludeRotate=boolean], [excludeScale=boolean], [excludeTranslate=boolean], [excludeVisibility=boolean], [facets=boolean], [flatten=name], [forceElement=name], [include=name], [intersection=name], [isIntersecting=name], [isMember=name], [layer=boolean], [minimizeRotation=boolean], [name=string], [noIntermediate=boolean], [noSurfaceShader=boolean], [noWarnings=boolean], [nodesOnly=boolean], [remove=name], [removeActivator=name], [renderable=boolean], [setActiveFilter=string], [size=boolean], [split=name], [subtract=name], [text=string], [union=name], [vertices=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command operates on a keyset.",
            "name": "keyTangent",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of curves on which tangents were modified.",
                    "type": "int"
                }
            ],
            "synopsis": "keyTangent( [objects] , [absolute=boolean], [animation=string], [attribute=string], [controlPoints=boolean], [float=floatrange], [g=boolean], [hierarchy=string], [inAngle=angle], [inTangentType=string], [inWeight=float], [includeUpperBound=boolean], [index=uint], [ix=float], [iy=float], [lock=boolean], [outAngle=angle], [outTangentType=string], [outWeight=float], [ox=float], [oy=float], [pluginTangentTypes=string], [relative=boolean], [shape=boolean], [stepAttributes=boolean], [time=timerange], [unify=boolean], [weightLock=boolean], [weightedTangents=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Creates a context to perform selection via a \"lasso\".",
            "name": "lassoContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "lassoContext( string , [drawClosed=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates a lattice deformer that will deform the selected objects.",
            "name": "lattice",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Ffd node name, lattice name, base lattice name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "lattice( selectionList , [after=boolean], [afterReference=boolean], [before=boolean], [commonParent=boolean], [components=boolean], [deformerTools=boolean], [divisions=[uint, uint, uint]], [dualBase=boolean], [exclusive=string], [freezeMapping=boolean], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [latticeReset=boolean], [ldivisions=[uint, uint, uint]], [name=string], [objectCentered=boolean], [outsideFalloffDistance=float], [outsideLattice=uint], [parallel=boolean], [position=[linear, linear, linear]], [prune=boolean], [remove=boolean], [removeTweaks=boolean], [rotation=[angle, angle, angle]], [scale=[linear, linear, linear]], [selectedComponents=boolean], [split=boolean], [useComponentTags=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to deform key frames with lattice manipulator.",
            "name": "latticeDeformKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "latticeDeformKeyCtx( contextName , [envelope=float], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [latticeColumns=uint], [latticeRows=uint], [name=string], [scaleLatticePts=boolean])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Launch the appropriate application to open the document, web page or directory specified.",
            "name": "launch",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "launch([directory=string], [movie=string], [pdfFile=string], [webPage=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Launch the appropriate application to edit/view the image files specified.",
            "name": "launchImageEditor",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "launchImageEditor( [filename] , [editImageFile=string], [viewImageFile=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Creates a layer bar button widget.",
            "name": "layerButton",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "layerButton([annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [color=[float, float, float]], [command=script], [current=boolean], [defineTemplate=string], [docTag=string], [doubleClickCommand=script], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [hideOnPlaybackCommand=script], [highlightColor=[float, float, float]], [identification=int], [isObscured=boolean], [label=string], [labelWidth=boolean], [layerHideOnPlayback=boolean], [layerState=string], [layerVisible=boolean], [manage=boolean], [name=string], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [renameCommand=string], [select=boolean], [statusBarMessage=string], [transparent=boolean], [typeCommand=script], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [visibleCommand=script], [width=int])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command creates a 3dPort that displays an image representing the layered shader node specified.",
            "name": "layeredShaderPort",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "layeredShaderPort( [string] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [node=name], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [selectedColorControl=string], [selectedTransparencyControl=string], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command creates a 3dPort that displays an image representing the layered texture node specified.",
            "name": "layeredTexturePort",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "layeredTexturePort( [string] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [node=name], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [selectedAlphaControl=string], [selectedBlendModeControl=string], [selectedColorControl=string], [selectedIsVisibleControl=string], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command allows you to edit or query the properties of any layout.",
            "name": "layout",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "layout( string , [annotation=string], [backgroundColor=[float, float, float]], [childArray=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfChildren=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "The layoutDialog command creates a modal dialog containing a formLayout with 100 divisions.",
            "name": "layoutDialog",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The string specified by the -dismiss flag, or \"dismiss\" if the dialog was closed.",
                    "type": "string"
                }
            ],
            "synopsis": "layoutDialog([backgroundColor=[float, float, float]], [dismiss=string], [parent=string], [title=string], [uiScript=script])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command displays version information about the application if it is executed without flags.",
            "name": "license",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The application's license information.",
                    "type": "string"
                }
            ],
            "synopsis": "license([borrow=boolean], [info=boolean], [isBorrowed=boolean], [isExported=boolean], [isTrial=boolean], [licenseMethod=boolean], [productChoice=boolean], [r=boolean], [showBorrowInfo=boolean], [showProductInfoDialog=boolean], [status=boolean], [usage=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Lights"
            ],
            "description": "This command is used to make, break and query light linking relationships between lights/sets of lights and objects/sets of objects.",
            "name": "lightlink",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Single element command result",
                    "type": "string"
                },
                {
                    "description": "Multi element command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "lightlink( objects , [b=boolean], [hierarchy=boolean], [light=name], [make=boolean], [object=name], [sets=boolean], [shadow=boolean], [shapes=boolean], [transforms=boolean], [useActiveLights=boolean], [useActiveObjects=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Lights"
            ],
            "description": "Add/Remove a relationship between an object and the current light.",
            "name": "lightList",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "lightList([add=name], [remove=name])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command controls the display of linear strings in the interface.",
            "name": "linearPrecision",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "linearPrecision( int )"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command list the animatable attributes of a node.",
            "name": "listAnimatable",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "All animatable attributes found",
                    "type": "string[]"
                }
            ],
            "synopsis": "listAnimatable([active=boolean], [manip=boolean], [manipHandle=boolean], [shape=boolean], [type=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command lists the attributes of a node.",
            "name": "listAttr",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": ": List of attributes matching criteria",
                    "type": "string[]"
                }
            ],
            "synopsis": "listAttr( [objects] , [array=boolean], [caching=boolean], [category=string], [changedSinceFileOpen=boolean], [channelBox=boolean], [connectable=boolean], [extension=boolean], [fromPlugin=boolean], [hasData=boolean], [hasNullData=boolean], [inUse=boolean], [keyable=boolean], [leaf=boolean], [locked=boolean], [multi=boolean], [output=boolean], [ramp=boolean], [read=boolean], [readOnly=boolean], [scalar=boolean], [scalarAndArray=boolean], [settable=boolean], [shortNames=boolean], [string=string], [unlocked=boolean], [usedAsFilename=boolean], [userDefined=boolean], [visible=boolean], [write=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Attribute patterns are plain text descriptions of an entire Maya attribute forest.",
            "name": "listAttrPatterns",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of patterns or pattern instances available",
                    "type": "string[]"
                }
            ],
            "synopsis": "listAttrPatterns([patternType=boolean], [verbose=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "Command to list all cameras.",
            "name": "listCameras",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "listCameras([orthographic=boolean], [perspective=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command returns a list of all attributes/objects of a specified type that are connected to the given object(s).",
            "name": "listConnections",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of connection plugs/nodes",
                    "type": "string[]"
                }
            ],
            "synopsis": "listConnections([connections=boolean], [destination=boolean], [exactType=boolean], [plugs=boolean], [shapes=boolean], [skipConversionNodes=boolean], [source=boolean], [type=string])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command lists the current set of device attachments.",
            "name": "listDeviceAttachments",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "listDeviceAttachments([attribute=string], [axis=string], [clutch=string], [device=string], [file=string], [selection=boolean], [write=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command traverses backwards or forwards in the graph from the specified node and returns all of the nodes whose construction history it passes through.",
            "name": "listHistory",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of history nodes",
                    "type": "string[]"
                }
            ],
            "synopsis": "listHistory( objects , [allConnections=boolean], [allFuture=boolean], [allGraphs=boolean], [breadthFirst=boolean], [fastIteration=boolean], [future=boolean], [futureLocalAttr=boolean], [futureWorldAttr=boolean], [groupLevels=boolean], [historyAttr=boolean], [interestLevel=int], [leaf=boolean], [levels=uint], [pruneDagObjects=boolean])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command lists all of the axes of the specified input device.",
            "name": "listInputDeviceAxes",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "listInputDeviceAxes( string )"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command lists all of the buttons of the specified input device specified as an argument.",
            "name": "listInputDeviceButtons",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "listInputDeviceButtons( string )"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command lists all input devices that maya knows about.",
            "name": "listInputDevices",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "listInputDevices([free=boolean], [primary=boolean], [secondary=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "List all nodes with incorrect names in the Script Editor.",
            "name": "listNodesWithIncorrectNames",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "listNodesWithIncorrectNames()"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Lists dependency node types satisfying a specified classification string.",
            "name": "listNodeTypes",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The type names of all node types in the system that satisfy the given classification string.",
                    "type": "string[]"
                }
            ],
            "synopsis": "listNodeTypes( string , [exclude=string])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command lists parents and children of DAG objects.",
            "name": "listRelatives",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "listRelatives( [objects] , [allDescendents=boolean], [allParents=boolean], [children=boolean], [fullPath=boolean], [noIntermediate=boolean], [parent=boolean], [path=boolean], [shapes=boolean], [type=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The listSets command is used to get a list of all the sets an object belongs to.",
            "name": "listSets",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(string array of all sets the object belongs to)",
                    "type": "string[]"
                }
            ],
            "synopsis": "listSets( [object] , [allSets=boolean], [extendToShape=boolean], [object=name], [type=uint])"
        },
        {
            "categories": [
                "Effects",
                "Fluids"
            ],
            "description": "A command to set builtin fluid attributes such as Density, Velocity, etc for all cells in the grid from the initial state cache.",
            "name": "loadFluid",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "loadFluid([currentTime=boolean], [frame=float], [initialConditions=boolean])"
        },
        {
            "categories": [
                "System",
                "Plug-ins"
            ],
            "description": "Maya plug-ins may be installed individually within one of Maya's standard plug-in directories, or they may be packaged up with other resources in a \"module\".",
            "name": "loadModule",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "loadModule([allModules=boolean], [load=string], [scan=boolean])"
        },
        {
            "categories": [
                "System",
                "Plug-ins"
            ],
            "description": "Load plug-ins into Maya.",
            "name": "loadPlugin",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "the internal names of the successfully loaded plug-ins",
                    "type": "string[]"
                }
            ],
            "synopsis": "loadPlugin( string [string...] , [addCallback=script], [allPlugins=boolean], [name=string], [quiet=boolean], [removeCallback=script])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command loads preference dependency nodes from \"userPrefObjects.",
            "name": "loadPrefObjects",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "True if successful.",
                    "type": "boolean"
                }
            ],
            "synopsis": "loadPrefObjects()"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "loadUI lets you generate a Maya user interface from a Qt user interface (.",
            "name": "loadUI",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the root control.",
                    "type": "string"
                }
            ],
            "synopsis": "loadUI([listTypes=boolean], [uiFile=string], [uiString=string], [verbose=boolean], [workingDirectory=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Locks or unlocks one or more dependency nodes.",
            "name": "lockNode",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "For query execution.",
                    "type": "boolean[]"
                }
            ],
            "synopsis": "lockNode([ignoreComponents=boolean], [lock=boolean], [lockName=boolean], [lockUnpublished=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command computes a skinned (lofted) surface passing through a number of NURBS curves.",
            "name": "loft",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "loft( curve curve [curve...] , [autoReverse=boolean], [caching=boolean], [close=boolean], [constructionHistory=boolean], [createCusp=boolean], [degree=int], [name=string], [nodeState=int], [object=boolean], [polygon=int], [range=boolean], [rebuild=boolean], [reverse=boolean], [reverseSurfaceNormals=boolean], [sectionSpans=int], [uniform=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "This command sets a particular camera to look through in a view.",
            "name": "lookThru",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "lookThru( [editorName] [object] , [farClip=float], [nearClip=float])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The `<code>ls</code>` command returns the names (and optionally the type names) of objects in the scene.",
            "name": "ls",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "ls( [object [object...]] , [absoluteName=boolean], [allPaths=boolean], [assemblies=boolean], [cameras=boolean], [containerType=string], [containers=boolean], [dagObjects=boolean], [defaultNodes=boolean], [dependencyNodes=boolean], [exactType=string], [excludeType=string], [flatten=boolean], [geometry=boolean], [ghost=boolean], [head=int], [hilite=boolean], [intermediateObjects=boolean], [invisible=boolean], [leaf=boolean], [lights=boolean], [live=boolean], [lockedNodes=boolean], [long=boolean], [materials=boolean], [modified=boolean], [noIntermediate=boolean], [nodeTypes=boolean], [objectsOnly=boolean], [orderedSelection=boolean], [partitions=boolean], [persistentNodes=boolean], [planes=boolean], [preSelectHilite=boolean], [readOnly=boolean], [recursive=boolean], [referencedNodes=boolean], [references=boolean], [renderGlobals=boolean], [renderQualities=boolean], [renderResolutions=boolean], [renderSetups=boolean], [selection=boolean], [sets=boolean], [shapes=boolean], [shortNames=boolean], [showNamespace=boolean], [showType=boolean], [tail=int], [templated=boolean], [textures=boolean], [transforms=boolean], [type=string], [ufeObjects=boolean], [undeletable=boolean], [untemplated=boolean], [uuid=boolean], [visible=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "List all objects in the world that pass a given filter.",
            "name": "lsThroughFilter",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of nodes passing the filter",
                    "type": "string[]"
                }
            ],
            "synopsis": "lsThroughFilter( string , [item=string], [nodeArray=boolean], [reverse=boolean], [selection=boolean], [sort=string])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command returns the names of UI objects.",
            "name": "lsUI",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The names of the object arguments.",
                    "type": "string[]"
                }
            ],
            "synopsis": "lsUI( [objects] , [cmdTemplates=boolean], [collection=boolean], [contexts=boolean], [controlLayouts=boolean], [controls=boolean], [dumpWidgets=boolean], [editors=boolean], [head=int], [long=boolean], [menuItems=boolean], [menus=boolean], [numWidgets=boolean], [panels=boolean], [radioMenuItemCollections=boolean], [tail=int], [type=string], [windows=boolean], [workspaceControls=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "The makebot command takes an image file and produces a block ordered texture (BOT) file, to be used for texture caching.",
            "name": "makebot",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "makebot([checkdepends=boolean], [checkres=uint], [input=string], [nooverwrite=boolean], [output=string], [verbose=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The makeIdentity command is a quick way to reset the selected transform and all of its children down to the shape level by the identity transformation.",
            "name": "makeIdentity",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "makeIdentity( [dagObject] , [apply=boolean], [jointOrient=boolean], [normal=uint], [preserveNormals=boolean], [rotate=boolean], [scale=boolean], [translate=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This commmand makes an object live.",
            "name": "makeLive",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "makeLive( [surface] , [none=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Make attributes of nodes paintable to Attribute Paint Tool.",
            "name": "makePaintable",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "makePaintable([string][string], [activate=boolean], [activateAll=boolean], [altAttribute=string], [attrType=string], [clearAll=boolean], [remove=boolean], [shapeMode=string], [uiName=string])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command performs a stitch and tessellate operation.",
            "name": "makeSingleSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "makeSingleSurface( surface , [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [object=boolean], [stitchTolerance=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a move manip context.",
            "name": "manipMoveContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the new context",
                    "type": "string"
                }
            ],
            "synopsis": "manipMoveContext( [object] , [activeHandle=int], [activeHandleNormal=int], [alignAlong=[float, float, float]], [bakePivotOri=boolean], [constrainAlongNormal=boolean], [currentActiveHandle=int], [editPivotMode=boolean], [editPivotPosition=boolean], [exists=boolean], [image1=string], [image2=string], [image3=string], [interactiveUpdate=boolean], [lastMode=int], [manipVisible=boolean], [mode=int], [orientAxes=[float, float, float]], [orientJoint=string], [orientJointEnabled=boolean], [orientObject=string], [orientTowards=[float, float, float]], [pinPivot=boolean], [pivotOriHandle=boolean], [position=boolean], [postCommand=script], [postDragCommand=[script, string]], [preCommand=script], [preDragCommand=[script, string]], [preserveChildPosition=boolean], [preserveUV=boolean], [reflection=boolean], [reflectionAbout=int], [reflectionAxis=int], [reflectionTolerance=float], [secondaryAxisOrient=string], [snap=boolean], [snapComponentsRelative=boolean], [snapLiveFaceCenter=boolean], [snapLivePoint=boolean], [snapPivotOri=boolean], [snapPivotPos=boolean], [snapRelative=boolean], [snapValue=float], [translate=[float, float, float]], [tweakMode=boolean], [xformConstraint=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a context for the translate limits manipulator.",
            "name": "manipMoveLimitsCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of newly created context",
                    "type": "string"
                }
            ],
            "synopsis": "manipMoveLimitsCtx([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Changes the global manipulator parameters.",
            "name": "manipOptions",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "manipOptions([enableSmartDuplicate=boolean], [enableSmartExtrude=boolean], [forceRefresh=boolean], [handleSize=float], [hideManipOnCtrl=boolean], [hideManipOnShift=boolean], [hideManipOnShiftCtrl=boolean], [linePick=float], [lineSize=float], [middleMouseRepositioning=boolean], [pivotRotateHandleOffset=int], [planeHandleOffset=int], [pointSize=float], [preselectHighlight=boolean], [refreshMode=int], [relative=boolean], [rememberActiveHandle=boolean], [rememberActiveHandleAfterToolSwitch=boolean], [scale=float], [showExtrudeSliders=boolean], [showPivotRotateHandle=boolean], [showPlaneHandles=boolean], [smartDuplicateType=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Changes transform component pivot used by the move/rotate/scale manipulators.",
            "name": "manipPivot",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "manipPivot([bakeOri=boolean], [moveToolOri=int], [ori=[float, float, float]], [oriValid=boolean], [pinPivot=boolean], [pos=[float, float, float]], [posValid=boolean], [reset=boolean], [resetOri=boolean], [resetPos=boolean], [rotateToolOri=int], [scaleToolOri=int], [snapOri=boolean], [snapPos=boolean], [valid=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a rotate manip context.",
            "name": "manipRotateContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "manipRotateContext( [object] , [activeHandle=int], [alignAlong=[float, float, float]], [bakePivotOri=boolean], [centerTrackball=boolean], [constrainAlongNormal=boolean], [currentActiveHandle=int], [editPivotMode=boolean], [editPivotPosition=boolean], [exists=boolean], [image1=string], [image2=string], [image3=string], [lastMode=int], [manipVisible=boolean], [mode=int], [modifyTranslation=boolean], [orientAxes=[float, float, float]], [orientObject=string], [orientTowards=[float, float, float]], [pinPivot=boolean], [pivotOriHandle=boolean], [position=boolean], [postCommand=script], [postDragCommand=[script, string]], [preCommand=script], [preDragCommand=[script, string]], [preserveChildPosition=boolean], [preserveUV=boolean], [reflection=boolean], [reflectionAbout=int], [reflectionAxis=int], [reflectionTolerance=float], [rotate=[float, float, float]], [snap=boolean], [snapPivotOri=boolean], [snapPivotPos=boolean], [snapRelative=boolean], [snapValue=float], [tweakMode=boolean], [useCenterPivot=boolean], [useManipPivot=boolean], [useObjectPivot=boolean], [xformConstraint=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a context for the rotate limits manipulator.",
            "name": "manipRotateLimitsCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of newly created context",
                    "type": "string"
                }
            ],
            "synopsis": "manipRotateLimitsCtx([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a scale manip context.",
            "name": "manipScaleContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "manipScaleContext( [object] , [activeHandle=int], [alignAlong=[float, float, float]], [bakePivotOri=boolean], [constrainAlongNormal=boolean], [currentActiveHandle=int], [editPivotMode=boolean], [editPivotPosition=boolean], [exists=boolean], [image1=string], [image2=string], [image3=string], [lastMode=int], [manipVisible=boolean], [mode=int], [orientAxes=[float, float, float]], [orientObject=string], [orientTowards=[float, float, float]], [pinPivot=boolean], [pivotOriHandle=boolean], [position=boolean], [postCommand=script], [postDragCommand=[script, string]], [preCommand=script], [preDragCommand=[script, string]], [preserveChildPosition=boolean], [preserveUV=boolean], [preventNegativeScale=boolean], [reflection=boolean], [reflectionAbout=int], [reflectionAxis=int], [reflectionTolerance=float], [scale=[float, float, float]], [snap=boolean], [snapPivotOri=boolean], [snapPivotPos=boolean], [snapRelative=boolean], [snapValue=float], [tweakMode=boolean], [useManipPivot=boolean], [useObjectPivot=boolean], [xformConstraint=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a context for the scale limits manipulator.",
            "name": "manipScaleLimitsCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of newly created context.",
                    "type": "string"
                }
            ],
            "synopsis": "manipScaleLimitsCtx([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "The marker command creates one or two markers, on a motion path curve, at the specified time and location.",
            "name": "marker",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the created markers)",
                    "type": "string[]"
                }
            ],
            "synopsis": "marker( [string] , [attach=boolean], [detach=boolean], [frontTwist=angle], [orientationMarker=boolean], [positionMarker=boolean], [sideTwist=angle], [time=time], [upTwist=angle], [valueU=float])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command modifies the source object's transform to match the target object's transform.",
            "name": "matchTransform",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "matchTransform( [objects...] , [pivots=boolean], [position=boolean], [positionX=boolean], [positionY=boolean], [positionZ=boolean], [rotatePivot=boolean], [rotation=boolean], [rotationX=boolean], [rotationY=boolean], [rotationZ=boolean], [scale=boolean], [scaleBox=boolean], [scalePivot=boolean], [scaleX=boolean], [scaleY=boolean], [scaleZ=boolean])"
        },
        {
            "categories": [
                "Language",
                "Math"
            ],
            "description": "Command to deal with matrix, composition and decomposition.",
            "name": "matrixUtil",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "matrixUtil([inverse=boolean], [quaternion=[float, float, float, float]], [relative=boolean], [rotation=[float, float, float]], [scale=[float, float, float]], [shear=[float, float, float]], [translation=[float, float, float]], [transpose=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "Provide Maya interface scaling based on system DPI or custom scale setting or no scaling.",
            "name": "mayaDpiSetting",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Scale mode or system DPI value, as queried",
                    "type": "int"
                },
                {
                    "description": "Defined scale or real scale, as queried",
                    "type": "float"
                }
            ],
            "synopsis": "mayaDpiSetting([mode=uint], [realScaleValue=boolean], [scaleValue=float], [systemDpi=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command controls and queries render setup states.",
            "name": "mayaHasRenderSetup",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "mayaHasRenderSetup([enableCurrentSession=boolean], [enableDuringTests=boolean])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command returns the names of all global MEL procedures that are currently defined as a string array.",
            "name": "melInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "procedure names",
                    "type": "string[]"
                }
            ],
            "synopsis": "melInfo()"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "Set and query options that affect the behavior of Maya's Embedded Language (MEL).",
            "name": "melOptions",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "melOptions([duplicateVariableWarnings=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Used to query essential statistics on memory availability and usage.",
            "name": "memory",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "memory([adjustedVirtualMemory=boolean], [asFloat=boolean], [debug=boolean], [freeMemory=boolean], [gigaByte=boolean], [heapMemory=boolean], [kiloByte=boolean], [megaByte=boolean], [pageFaults=boolean], [pageReclaims=boolean], [physicalMemory=boolean], [processVirtualMemory=boolean], [summary=boolean], [swapFree=boolean], [swapLogical=boolean], [swapMax=boolean], [swapPhysical=boolean], [swapReserved=boolean], [swapVirtual=boolean], [swaps=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "This command creates a new menu and adds it to the default window's menubar if no parent is specified.",
            "name": "menu",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the menu.",
                    "type": "string"
                }
            ],
            "synopsis": "menu( [string] , [allowOptionBoxes=boolean], [defineTemplate=string], [deleteAllItems=boolean], [docTag=string], [enable=boolean], [exists=boolean], [familyImage=string], [helpMenu=boolean], [itemArray=boolean], [label=string], [mnemonic=string], [numberOfItems=boolean], [parent=string], [postMenuCommand=script], [postMenuCommandOnce=boolean], [scrollable=boolean], [tearOff=boolean], [useTemplate=string], [version=string], [visible=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "Create a layout containing a menu bar.",
            "name": "menuBarLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "menuBarLayout( [string] , [annotation=string], [backgroundColor=[float, float, float]], [childArray=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [menuArray=boolean], [menuBarVisible=boolean], [menuIndex=[string, uint]], [noBackground=boolean], [numberOfChildren=boolean], [numberOfMenus=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "A menuEditor displays the contents of a popup menu and allows the menu's items to be edited.",
            "name": "menuEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the editor.",
                    "type": "string"
                }
            ],
            "synopsis": "menuEditor( [string] , [annotation=string], [backgroundColor=[float, float, float]], [cellHeight=int], [cellWidth=int], [cellWidthHeight=[int, int]], [checkBoxPresent=[boolean, string, int]], [checkBoxState=[boolean, string, int]], [childArray=boolean], [command=[string, string, int]], [defineTemplate=string], [delete=[string, int]], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [iconMenuCallback=string], [image=[string, string, int]], [isObscured=boolean], [label=[string, string, int]], [manage=boolean], [menuItemTypes=boolean], [noBackground=boolean], [numberOfChildren=boolean], [numberOfPopupMenus=boolean], [optionBoxCommand=[string, string, int]], [optionBoxPresent=[boolean, string, int]], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [radioButtonPresent=[boolean, string, int]], [radioButtonState=[boolean, string, int]], [separator=[string, int]], [statusBarMessage=string], [style=string], [subMenuAt=[string, int]], [subMenuEditorWindow=string], [subMenuEditorsOpen=boolean], [subMenuOf=[string, string, int]], [topLevelMenu=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "This command creates/edits/queries menu items.",
            "name": "menuItem",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the menu item.",
                    "type": "string"
                }
            ],
            "synopsis": "menuItem( [string] , [allowOptionBoxes=boolean], [annotation=string], [boldFont=boolean], [checkBox=boolean], [collection=string], [command=script], [data=int], [defineTemplate=string], [divider=boolean], [dividerLabel=string], [docTag=string], [dragDoubleClickCommand=script], [dragMenuCommand=script], [echoCommand=boolean], [enable=boolean], [enableCommandRepeat=boolean], [exists=boolean], [familyImage=string], [image=string], [imageOverlayLabel=string], [insertAfter=string], [isCheckBox=boolean], [isOptionBox=boolean], [isRadioButton=boolean], [italicized=boolean], [label=string], [longDivider=boolean], [optionBox=boolean], [optionBoxIcon=string], [parent=string], [postMenuCommand=script], [postMenuCommandOnce=boolean], [radialPosition=string], [radioButton=boolean], [runTimeCommand=string], [sourceType=string], [subMenu=boolean], [tearOff=boolean], [useTemplate=string], [version=string], [visible=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "Create a menu set which is used to logically order menus for display in the main menu bar.",
            "name": "menuSet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of resulting menu set. (If there are no menu sets left, an empty string is returned)",
                    "type": "string"
                }
            ],
            "synopsis": "menuSet( [object] , [addMenu=string], [allMenuSets=boolean], [currentMenuSet=string], [exists=string], [hotBoxVisible=boolean], [insertMenu=[string, uint]], [label=string], [menuArray=string[]], [moveMenu=[string, uint]], [moveMenuSet=[string, uint]], [numberOfMenuSets=boolean], [numberOfMenus=boolean], [permanent=boolean], [removeMenu=string], [removeMenuSet=string])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "Provides the functionality to save and load menuSets between sessions of Maya.",
            "name": "menuSetPref",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "menuSetPref( [object] , [exists=boolean], [force=boolean], [loadAll=boolean], [removeAll=boolean], [saveAll=boolean], [saveBackup=boolean], [version=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a message line where tool feedback is shown.",
            "name": "messageLine",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": ": Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "messageLine( [name] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command mimics what various manipulators do to support Evaluation-Manager-accelerated manipulation.",
            "name": "mimicManipulation",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "True if the transaction could be evaluated by the Evaluation Manager, false otherwise, for each provided transaction",
                    "type": "boolean[]"
                }
            ],
            "synopsis": "mimicManipulation([manipulations=string], [prevalidation=boolean], [refresh=boolean])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "This command minimizes (iconifies) all of the application's windows into a single desktop icon.",
            "name": "minimizeApp",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "minimizeApp()"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "This command will duplicate a branch of the skeleton from the selected joint symmetrically about a plane in world space.",
            "name": "mirrorJoint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Names of the mirrored joints",
                    "type": "string[]"
                }
            ],
            "synopsis": "mirrorJoint( object , [mirrorBehavior=boolean], [mirrorXY=boolean], [mirrorXZ=boolean], [mirrorYZ=boolean], [searchReplace=[string, string]])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to change current time within the model views.",
            "name": "modelCurrentTimeCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "modelCurrentTimeCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [percent=float])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "Create, edit or query a model editor.",
            "name": "modelEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "the name of the editor.",
                    "type": "string"
                }
            ],
            "synopsis": "modelEditor( [editorName] , [activeComponentsXray=boolean], [activeCustomEnvironment=string], [activeCustomGeometry=string], [activeCustomLighSet=string], [activeCustomOverrideGeometry=string], [activeCustomRenderer=string], [activeOnly=boolean], [activeShadingGraph=string], [activeView=boolean], [addObjects=string], [addSelected=boolean], [addSelectedObjects=boolean], [allObjects=boolean], [backfaceCulling=boolean], [bufferMode=string], [bumpResolution=[uint, uint]], [camera=string], [cameraName=string], [cameraSet=string], [cameraSetup=boolean], [cameras=boolean], [capture=string], [captureSequenceNumber=int], [clipGhosts=boolean], [cmEnabled=boolean], [colorMap=boolean], [colorResolution=[uint, uint]], [control=boolean], [controlVertices=boolean], [cullingOverride=string], [default=boolean], [defineTemplate=string], [deformers=boolean], [dimensions=boolean], [displayAppearance=string], [displayLights=string], [displayTextures=boolean], [docTag=string], [dynamicConstraints=boolean], [dynamics=boolean], [editorChanged=script], [exists=boolean], [exposure=float], [filter=string], [filteredObjectList=boolean], [fluids=boolean], [fogColor=[float, float, float, float]], [fogDensity=float], [fogEnd=float], [fogMode=string], [fogSource=string], [fogStart=float], [fogging=boolean], [follicles=boolean], [forceMainConnection=string], [gamma=float], [greasePencils=boolean], [grid=boolean], [hairSystems=boolean], [handles=boolean], [headsUpDisplay=boolean], [height=boolean], [highlightConnection=string], [hulls=boolean], [ignorePanZoom=boolean], [ikHandles=boolean], [imagePlane=boolean], [interactive=boolean], [interactiveBackFaceCull=boolean], [interactiveDisableShadows=boolean], [isFiltered=boolean], [jointXray=boolean], [joints=boolean], [lights=boolean], [lineWidth=float], [locators=boolean], [lockMainConnection=boolean], [lowQualityLighting=boolean], [mainListConnection=string], [manipulators=boolean], [maxConstantTransparency=float], [maximumNumHardwareLights=boolean], [modelPanel=string], [motionTrails=boolean], [nCloths=boolean], [nParticles=boolean], [nRigids=boolean], [noUndo=boolean], [nurbsCurves=boolean], [nurbsSurfaces=boolean], [objectFilter=script], [objectFilterList=script], [objectFilterListUI=script], [objectFilterShowInHUD=boolean], [objectFilterUI=script], [occlusionCulling=boolean], [panel=string], [parent=string], [particleInstancers=boolean], [pivots=boolean], [planes=boolean], [pluginObjects=[string, boolean]], [pluginShapes=boolean], [polymeshes=boolean], [queryPluginObjects=string], [removeSelected=boolean], [rendererDeviceName=boolean], [rendererList=boolean], [rendererListUI=boolean], [rendererName=string], [rendererOverrideList=boolean], [rendererOverrideListUI=boolean], [rendererOverrideName=string], [resetCustomCamera=boolean], [sceneRenderFilter=string], [selectionConnection=string], [selectionHiliteDisplay=boolean], [setSelected=boolean], [shadingModel=int], [shadows=boolean], [smallObjectCulling=boolean], [smallObjectThreshold=float], [smoothWireframe=boolean], [sortTransparent=boolean], [stateString=boolean], [stereoDrawMode=boolean], [strokes=boolean], [subdivSurfaces=boolean], [textureAnisotropic=boolean], [textureCompression=boolean], [textureDisplay=string], [textureEnvironmentMap=boolean], [textureHilight=boolean], [textureMaxSize=int], [textureMemoryUsed=boolean], [textureSampling=int], [textures=boolean], [toggleExposure=boolean], [toggleGamma=boolean], [transpInShadows=boolean], [transparencyAlgorithm=string], [twoSidedLighting=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateColorMode=boolean], [updateMainConnection=boolean], [useBaseRenderer=boolean], [useColorIndex=boolean], [useDefaultMaterial=boolean], [useInteractiveMode=boolean], [useRGBImagePlane=boolean], [useReducedRenderer=boolean], [useTemplate=string], [userNode=string], [viewObjects=boolean], [viewSelected=boolean], [viewTransformName=string], [viewType=boolean], [width=boolean], [wireframeBackingStore=boolean], [wireframeOnShaded=boolean], [xray=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command creates a panel consisting of a model editor.",
            "name": "modelPanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the panel.",
                    "type": "string"
                }
            ],
            "synopsis": "modelPanel( panelName , [barLayout=boolean], [camera=string], [control=boolean], [copy=string], [createString=boolean], [defineTemplate=string], [docTag=string], [editString=boolean], [exists=boolean], [init=boolean], [isUnique=boolean], [label=string], [menuBarRepeatLast=boolean], [menuBarVisible=boolean], [modelEditor=boolean], [needsInit=boolean], [parent=string], [popupMenuProcedure=script], [replacePanel=string], [tearOff=boolean], [tearOffCopy=string], [tearOffRestore=boolean], [unParent=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "System",
                "Plug-ins"
            ],
            "description": "Returns information on modules found by Maya.",
            "name": "moduleInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "moduleInfo([definition=boolean], [listModules=boolean], [moduleName=string], [path=boolean], [version=boolean])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command allows to configure mouse.",
            "name": "mouse",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "When `-scrollWheelStatus` flag is used, will return 1 if scroll wheel support enabled, otherwise 0.\n When `-mouseButtonTrackingStatus` flag is used, will return the number of mouse buttons being tracked.",
                    "type": "int"
                }
            ],
            "synopsis": "mouse([enableScrollWheel=boolean], [mouseButtonTracking=int], [mouseButtonTrackingStatus=boolean], [scrollWheelStatus=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The move command is used to change the positions of geometric objects.",
            "name": "move",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "move( float float float [objects] , [absolute=boolean], [componentOffset=boolean], [componentSpace=boolean], [constrainAlongNormal=boolean], [deletePriorHistory=boolean], [localSpace=boolean], [moveX=boolean], [moveXY=boolean], [moveXYZ=boolean], [moveXZ=boolean], [moveY=boolean], [moveYZ=boolean], [moveZ=boolean], [objectSpace=boolean], [orientJoint=string], [parameter=boolean], [preserveChildPosition=boolean], [preserveGeometryPosition=boolean], [preserveUV=boolean], [reflection=boolean], [reflectionAboutBBox=boolean], [reflectionAboutOrigin=boolean], [reflectionAboutX=boolean], [reflectionAboutY=boolean], [reflectionAboutZ=boolean], [reflectionTolerance=float], [relative=boolean], [rotatePivotRelative=boolean], [scalePivotRelative=boolean], [secondaryAxisOrient=string], [symNegative=boolean], [worldSpace=boolean], [worldSpaceDistance=boolean], [xformConstraint=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to move keyframes within the graph editor.",
            "name": "moveKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "moveKeyCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [moveFunction=string], [name=string], [option=string])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The command moves the selected vertex ( control vertex ) in the specified unit direction by the given magnitude.",
            "name": "moveVertexAlongDirection",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "moveVertexAlongDirection([direction=[float, float, float]], [magnitude=linear], [normalDirection=linear], [uDirection=linear], [uvNormalDirection=[linear, linear, linear]], [vDirection=linear])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "movieInfo provides a mechanism for querying information about movie files.",
            "name": "movieInfo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "movieInfo(string, [counter=boolean], [dropFrame=boolean], [frameCount=boolean], [frameDuration=boolean], [height=boolean], [movieTexture=boolean], [negTimesOK=boolean], [numFrames=boolean], [quickTime=boolean], [timeCode=boolean], [timeCodeTrack=boolean], [timeScale=boolean], [twentyFourHourMax=boolean], [width=boolean])"
        },
        {
            "categories": [
                "Animation",
                "MoCap"
            ],
            "description": "Imports a.",
            "name": "movIn",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "movIn( [attributeList] , [file=string], [startTime=time])"
        },
        {
            "categories": [
                "Animation",
                "MoCap"
            ],
            "description": "Exports a.",
            "name": "movOut",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "movOut( [targetList] , [comment=boolean], [file=string], [precision=uint], [time=timerange])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The cmd creates a railed surface by sweeping the profiles using two rail curves.",
            "name": "multiProfileBirailSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "multiProfileBirailSurface( curve curve curve... curve curve , [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [object=boolean], [polygon=int], [tangentContinuityProfile1=boolean], [tangentContinuityProfile2=boolean], [transformMode=int])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "Used to interact with the Gestura (multi-touch) library.",
            "name": "multiTouch",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "multiTouch([gestures=boolean], [trackpad=uint])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "The mute command is used to disable and enable playback on a channel.",
            "name": "mute",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name(s) of the mute node(s)",
                    "type": "string[]"
                }
            ],
            "synopsis": "mute([disable=boolean], [force=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command creates a nameCommand object.",
            "name": "nameCommand",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the nameCommand object created",
                    "type": "string"
                }
            ],
            "synopsis": "nameCommand( [string] , [annotation=string], [command=script], [data1=string], [data2=string], [data3=string], [default=boolean], [sourceType=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates an editable field that can be linked to the name of a Maya object.",
            "name": "nameField",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "nameField( [string] , [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [drawInactiveFrame=boolean], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [nameChangeCommand=script], [noBackground=boolean], [numberOfPopupMenus=boolean], [object=string], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [receiveFocusCommand=script], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command allows a namespace to be created, set or removed.",
            "name": "namespace",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "namespace( [string] , [absoluteName=boolean], [addNamespace=string], [collapseAncestors=string], [deleteNamespaceContent=boolean], [exists=string], [force=boolean], [isRootNamespace=string], [mergeNamespaceWithOther=string], [mergeNamespaceWithParent=boolean], [mergeNamespaceWithRoot=boolean], [moveNamespace=[string, string]], [parent=string], [recurse=boolean], [relativeNames=boolean], [removeNamespace=string], [rename=[string, string]], [setNamespace=string], [validateName=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command displays information about a namespace.",
            "name": "namespaceInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "namespaceInfo( string , [absoluteName=boolean], [baseName=boolean], [currentNamespace=boolean], [dagPath=boolean], [fullName=boolean], [internal=boolean], [isRootNamespace=boolean], [listNamespace=boolean], [listOnlyDependencyNodes=boolean], [listOnlyNamespaces=boolean], [parent=boolean], [recurse=boolean], [shortName=boolean])"
        },
        {
            "categories": [
                "Effects",
                "nDynamics"
            ],
            "description": "Edits one or more nBase objects.",
            "name": "nBase",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "nBase([clearCachedTextureMap=string], [clearStart=boolean], [stuffStart=boolean], [textureToVertex=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "For each listed object, the command creates a new field.",
            "name": "newton",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "newton( selectionList , [attenuation=float], [magnitude=float], [maxDistance=linear], [minDistance=float], [name=string], [perVertex=boolean], [position=[linear, linear, linear]], [torusSectionRadius=linear], [volumeExclusion=boolean], [volumeOffset=[linear, linear, linear]], [volumeShape=string], [volumeSweep=angle])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Given two nodes, a source node of type A and a target node of type B, where type A is either type B or a sub-type of B, this command will replace the target node with the source node.",
            "name": "nodeCast",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "0 for success, 1 for failure.",
                    "type": "int"
                }
            ],
            "synopsis": "nodeCast(stringstring, [copyDynamicAttrs=boolean], [disableAPICallbacks=boolean], [disableScriptJobCallbacks=boolean], [disconnectUnmatchedAttrs=boolean], [force=boolean], [swapNames=boolean], [swapValues=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command creates/edits/queries a nodeEditor editor.",
            "name": "nodeEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the created control.",
                    "type": "string"
                }
            ],
            "synopsis": "nodeEditor( [string] , [activeTab=int], [addNewNodes=boolean], [addNode=string], [additiveGraphingMode=boolean], [allAttributes=boolean], [allNodes=boolean], [allowNewTabs=boolean], [allowTabTearoff=boolean], [autoSizeNodes=boolean], [beginCreateNode=boolean], [beginNewConnection=string], [breakSelectedConnections=boolean], [closeAllTabs=boolean], [closeTab=int], [connectSelectedNodes=boolean], [connectedGraphingMode=boolean], [connectionMinSegment=float], [connectionOffset=float], [connectionRoundness=float], [connectionStyle=string], [connectionTension=int], [consistentNameSize=boolean], [contentsChangedCommand=script], [control=boolean], [createInfo=string], [createNodeCommand=script], [createTab=[int, [, string, ]]], [crosshairOnEdgeDragging=boolean], [customAttributeListEdit=[string, [, string, ]]], [cycleHUD=boolean], [defaultPinnedState=boolean], [defineTemplate=string], [deleteSelected=boolean], [docTag=string], [dotFormat=string], [downstream=boolean], [duplicateTab=[int, [, int, ]]], [enableOpenGL=boolean], [exists=boolean], [extendToShapes=boolean], [feedbackConnection=boolean], [feedbackNode=boolean], [feedbackPlug=boolean], [feedbackTabIndex=boolean], [feedbackType=boolean], [filter=string], [filterCreateNodeTypes=script], [focusCommand=script], [forceMainConnection=string], [frameAll=boolean], [frameModelSelection=boolean], [frameSelected=boolean], [getNodeList=boolean], [graphSelectedConnections=boolean], [graphSelection=boolean], [gridSnap=boolean], [gridVisibility=boolean], [hasWatchpoint=boolean], [highlightConnection=string], [highlightConnections=[string, boolean]], [hudMessage=[string, int, float]], [ignoreAssets=boolean], [island=boolean], [keyPressCommand=script], [keyReleaseCommand=script], [layout=boolean], [layoutCommand=script], [lockMainConnection=boolean], [mainListConnection=string], [nodeSwatchSize=string], [nodeTitleMode=string], [nodeViewMode=string], [overrideNodeDropPosition=[float, float]], [panView=[float, float]], [panel=string], [parent=string], [pinSelectedNodes=boolean], [popupMenuScript=script], [primary=boolean], [redockTab=boolean], [removeDownstream=boolean], [removeNode=string], [removeUnselected=boolean], [removeUpstream=boolean], [renameNode=string], [renameTab=[int, [, string, ]]], [restoreInfo=string], [restoreLastClosedTab=boolean], [rootNode=string], [rootsFromSelection=boolean], [scaleView=float], [selectAll=boolean], [selectConnectionNodes=boolean], [selectDownstream=boolean], [selectFeedbackConnection=boolean], [selectNode=string], [selectUpstream=boolean], [selectionConnection=string], [setWatchpoint=boolean], [settingsChangedCallback=script], [shaderNetworks=boolean], [showAllNodeAttributes=string], [showNamespace=boolean], [showSGShapes=boolean], [showShapes=boolean], [showTabs=boolean], [showTransforms=boolean], [showUnitConversions=boolean], [stateString=boolean], [syncedSelection=boolean], [tabChangeCommand=script], [toggleAttrFilter=boolean], [toggleSelectedPins=boolean], [toggleSwatchSize=string], [toolTipCommand=script], [traversalDepthLimit=int], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [upstream=boolean], [useAssets=boolean], [useLongName=int], [useTemplate=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This control supports up to 3 icon images and 4 different display styles.",
            "name": "nodeIconButton",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the button",
                    "type": "string"
                }
            ],
            "synopsis": "nodeIconButton( [string] , [align=string], [annotation=string], [backgroundColor=[float, float, float]], [command=script], [defineTemplate=string], [disabledImage=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [flipX=boolean], [flipY=boolean], [font=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [image=string], [image1=string], [image2=string], [image3=string], [imageOverlayLabel=string], [isObscured=boolean], [label=string], [labelOffset=int], [manage=boolean], [marginHeight=uint], [marginWidth=uint], [noBackground=boolean], [numberOfPopupMenus=boolean], [overlayLabelBackColor=[float, float, float, float]], [overlayLabelColor=[float, float, float]], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rotation=float], [statusBarMessage=string], [style=string], [useAlpha=boolean], [useTemplate=string], [version=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "The nodeOutliner command creates, edits and queries an outline control that shows dependency nodes and their attributes.",
            "name": "nodeOutliner",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "nodeOutliner( [string] , [addCommand=script], [addObject=name], [annotation=string], [attrAlphaOrder=string], [backgroundColor=[float, float, float]], [connectivity=name], [currentSelection=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [lastClickedNode=boolean], [lastMenuChoice=string], [longNames=boolean], [manage=boolean], [menuCommand=script], [menuMultiOption=boolean], [multiSelect=boolean], [niceNames=boolean], [noBackground=boolean], [noConnectivity=boolean], [nodesDisplayed=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [pressHighlightsUnconnected=boolean], [preventOverride=boolean], [redraw=boolean], [redrawRow=boolean], [remove=string], [removeAll=boolean], [replace=name], [selectCommand=script], [showConnectedOnly=boolean], [showHidden=boolean], [showInputs=boolean], [showNonConnectable=boolean], [showNonKeyable=boolean], [showOutputs=boolean], [showPublished=boolean], [showReadOnly=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Command to save and load preset settings for a node.",
            "name": "nodePreset",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "if isValidName or exists is used.",
                    "type": "boolean"
                }
            ],
            "synopsis": "nodePreset([attributes=string], [custom=string], [delete=[name, string]], [exists=[name, string]], [isValidName=string], [list=name], [load=[name, string]], [save=[name, string]])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates/edits/queries the node tree lister control.",
            "name": "nodeTreeLister",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the created control.",
                    "type": "string"
                }
            ],
            "synopsis": "nodeTreeLister( [string] , [addFavorite=string], [addItem=[string, string, script]], [addVnnItem=[string, string, string, string]], [annotation=string], [backgroundColor=[float, float, float]], [clearContents=boolean], [collapsePath=string], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [executeItem=string], [exists=boolean], [expandPath=string], [expandToDepth=int], [favoritesCallback=script], [favoritesList=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [itemScript=string], [manage=boolean], [noBackground=boolean], [nodeLibrary=string], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [refreshCommand=script], [removeFavorite=string], [removeItem=string], [resultsPathUnderCursor=boolean], [selectPath=string], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [vnnString=boolean], [width=int])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command returns a string which identifies the given node's type.",
            "name": "nodeType",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Single command result",
                    "type": "string"
                },
                {
                    "description": "Multiple command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "nodeType( string , [apiType=boolean], [derived=boolean], [inherited=boolean], [isTypeName=boolean], [ufeRuntimeName=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates a functional deformer of the specified type that will deform the selected objects.",
            "name": "nonLinear",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Deformer driver name, deformer handle transform name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "nonLinear( objects , [after=boolean], [afterReference=boolean], [autoParent=boolean], [before=boolean], [commonParent=boolean], [components=boolean], [defaultScale=boolean], [deformerTools=boolean], [exclusive=string], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [name=string], [parallel=boolean], [prune=boolean], [remove=boolean], [selectedComponents=boolean], [split=boolean], [type=string], [useComponentTags=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Constraints"
            ],
            "description": "Constrain an object's orientation based on the normal of the target surface(s) at the closest point(s) to the object.",
            "name": "normalConstraint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the created constraint node",
                    "type": "string[]"
                }
            ],
            "synopsis": "normalConstraint( [target...] object , [aimVector=[float, float, float]], [layer=string], [name=string], [remove=boolean], [targetList=boolean], [upVector=[float, float, float]], [weight=float], [weightAliasList=boolean], [worldUpObject=name], [worldUpType=string], [worldUpVector=[float, float, float]])"
        },
        {
            "categories": [
                "Effects",
                "nDynamics"
            ],
            "description": "The nParticle command creates a new nParticle object from a list of world space points.",
            "name": "nParticle",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the nParticle object created",
                    "type": "string"
                }
            ],
            "synopsis": "nParticle( selectionItem , [attribute=string], [cache=boolean], [conserve=float], [count=boolean], [deleteCache=boolean], [dynamicAttrList=boolean], [floatValue=float], [gridSpacing=linear], [inherit=float], [jitterBasePoint=[linear, linear, linear]], [jitterRadius=linear], [lowerLeft=[linear, linear, linear]], [name=string], [numJitters=uint], [order=int], [particleId=int], [perParticleDouble=boolean], [perParticleVector=boolean], [position=[linear, linear, linear]], [shapeName=string], [upperRight=[linear, linear, linear]], [vectorValue=[float, float, float]])"
        },
        {
            "categories": [
                "Effects",
                "nDynamics"
            ],
            "description": "Makes a nSoft body from the object(s) passed on the command line or in the selection list.",
            "name": "nSoft",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "array",
                    "type": "string"
                }
            ],
            "synopsis": "nSoft( selectionList , [convert=boolean], [duplicate=boolean], [duplicateHistory=boolean], [goal=float], [hideOriginal=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command performs a boolean operation.",
            "name": "nurbsBoolean",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "nurbsBoolean( surface surface , [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [nsrfsInFirstShell=int], [object=boolean], [operation=int], [smartConnection=boolean], [tolerance=linear])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This is only a sample command for debugging purposes, which makes a copy of the implicit st parameterization on a nurbs surface to be the 1st explicit uvset.",
            "name": "nurbsCopyUVSet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "nurbsCopyUVSet()"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The nurbsCube command creates a new NURBS Cube made up of six planes.",
            "name": "nurbsCube",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "nurbsCube([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [degree=int], [heightRatio=float], [lengthRatio=float], [name=string], [nodeState=int], [object=boolean], [patchesU=int], [patchesV=int], [pivot=[linear, linear, linear]], [polygon=int], [width=linear])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The nurbsCurveToBezier command attempts to convert an existing NURBS curve to a Bezier curve.",
            "name": "nurbsCurveToBezier",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(object name and node name)",
                    "type": "string[]"
                }
            ],
            "synopsis": "nurbsCurveToBezier( curve )"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "Command Edits UVs on NURBS objects.",
            "name": "nurbsEditUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "nurbsEditUV([angle=float], [pivotU=float], [pivotV=float], [relative=boolean], [rotateRatio=float], [rotation=boolean], [scale=boolean], [scaleU=float], [scaleV=float], [uValue=float], [vValue=float])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The nurbsPlane command creates a new NURBS Plane and return the name of the new surface.",
            "name": "nurbsPlane",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "nurbsPlane([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [degree=int], [lengthRatio=float], [name=string], [nodeState=int], [object=boolean], [patchesU=int], [patchesV=int], [pivot=[linear, linear, linear]], [polygon=int], [width=linear])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "Performs selection operations on NURBS objects.",
            "name": "nurbsSelect",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "nurbsSelect([borderSelection=boolean], [bottomBorder=boolean], [growSelection=int], [leftBorder=boolean], [rightBorder=boolean], [shrinkSelection=int], [topBorder=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The nurbsSquare command creates a square.",
            "name": "nurbsSquare",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "nurbsSquare([caching=boolean], [center=[linear, linear, linear]], [centerX=linear], [centerY=linear], [centerZ=linear], [constructionHistory=boolean], [degree=int], [name=string], [nodeState=int], [normal=[linear, linear, linear]], [normalX=linear], [normalY=linear], [normalZ=linear], [object=boolean], [sideLength1=linear], [sideLength2=linear], [spansPerSide=int])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command tesselates a NURBS surface and produces a polygonal surface.",
            "name": "nurbsToPoly",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The polygon and optionally the dependency node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "nurbsToPoly( [surface] , [caching=boolean], [constructionHistory=boolean], [curvatureTolerance=int], [explicitTessellationAttributes=boolean], [name=string], [nodeState=int], [object=boolean], [smoothEdge=boolean], [smoothEdgeRatio=float], [uDivisionsFactor=float], [vDivisionsFactor=float])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command sets the values used by the nurbs-to-polygons (or \"tesselate\") preference.",
            "name": "nurbsToPolygonsPref",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "nurbsToPolygonsPref([chordHeight=float], [chordHeightRatio=float], [delta3D=float], [edgeSwap=boolean], [format=uint], [fraction=float], [matchRenderTessellation=uint], [merge=uint], [mergeTolerance=float], [minEdgeLen=float], [polyCount=uint], [polyType=uint], [uNumber=uint], [uType=uint], [useChordHeight=boolean], [useChordHeightRatio=boolean], [vNumber=uint], [vType=uint])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "This command converts a NURBS surface and produces a subd surface.",
            "name": "nurbsToSubdiv",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The subd surface and optionally the dependency node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "nurbsToSubdiv( [surface] , [addUnderTransform=boolean], [caching=boolean], [collapsePoles=boolean], [constructionHistory=boolean], [matchPeriodic=boolean], [maxPolyCount=int], [name=string], [nodeState=int], [object=boolean], [reverseNormal=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "This command sets the values used by the nurbs-to-subdivision surface preference.",
            "name": "nurbsToSubdivPref",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "nurbsToSubdivPref([bridge=int], [capType=int], [collapsePoles=boolean], [matchPeriodic=boolean], [maxPolyCount=int], [offset=linear], [reverseNormal=boolean], [solidType=int], [trans00=float], [trans01=float], [trans02=float], [trans10=float], [trans11=float], [trans12=float], [trans20=float], [trans21=float], [trans22=float], [trans30=float], [trans31=float], [trans32=float])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "Allows user to toggle between implicit and explicit UVs on a NURBS object.",
            "name": "nurbsUVSet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "nurbsUVSet([create=boolean], [useExplicit=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command returns the coordinates of the center of the bounding box of the specified object.",
            "name": "objectCenter",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "When the asking for the center (default).",
                    "type": "float[]"
                },
                {
                    "description": "When asking for one coordinate only.",
                    "type": "float"
                }
            ],
            "synopsis": "objectCenter( object , [gl=boolean], [local=boolean], [x=boolean], [y=boolean], [z=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command returns the type of elements.",
            "name": "objectType",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The type of the specified object",
                    "type": "string"
                },
                {
                    "description": "For \"isType\": was the object of the specified type?",
                    "type": "boolean"
                }
            ],
            "synopsis": "objectType( object , [isAType=string], [isType=string], [tagFromType=string], [typeFromTag=int], [typeTag=boolean])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command returns the type of UI element such as button, sliders, etc.",
            "name": "objectTypeUI",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The type of the specified object.",
                    "type": "string"
                }
            ],
            "synopsis": "objectTypeUI( string , [isType=string], [listAll=boolean], [superClasses=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This command simply returns true or false depending on whether an object with the given name exists.",
            "name": "objExists",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "objExists( string )"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The offset command creates new offset curves from the selected curves.",
            "name": "offsetCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "offsetCurve( [curve] , [caching=boolean], [connectBreaks=int], [constructionHistory=boolean], [cutLoop=boolean], [cutRadius=linear], [distance=linear], [name=string], [nodeState=int], [normal=[linear, linear, linear]], [object=boolean], [range=boolean], [reparameterize=boolean], [stitch=boolean], [subdivisionDensity=int], [tolerance=linear], [useGivenNormal=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The offsetCurveOnSurface command offsets a curve on surface resulting in another curve on surface.",
            "name": "offsetCurveOnSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "offsetCurveOnSurface( [curve] , [caching=boolean], [checkPoints=int], [connectBreaks=int], [constructionHistory=boolean], [cutLoop=boolean], [distance=linear], [name=string], [nodeState=int], [object=boolean], [range=boolean], [stitch=boolean], [subdivisionDensity=int], [tolerance=linear])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The offset command creates new offset surfaces from the selected surfaces.",
            "name": "offsetSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "offsetSurface( [surface] , [caching=boolean], [constructionHistory=boolean], [distance=linear], [method=int], [name=string], [nodeState=int], [object=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "OGS is one of the viewport renderers.",
            "name": "ogs",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Result of the operation",
                    "type": "string"
                }
            ],
            "synopsis": "ogs([deviceInformation=boolean], [disposeReleasableTextures=boolean], [dumpTexture=string], [enableHardwareInstancing=boolean], [fragmentEditor=string], [fragmentXML=string], [gpuMemoryTotal=int], [gpuMemoryUsed=boolean], [isLegacyViewportEnabled=boolean], [isRemoteGLSessionEnabled=boolean], [isWinRemoteSession=boolean], [pause=boolean], [rebakeTextures=boolean], [regenerateUVTilePreview=string], [reloadTextures=boolean], [reset=boolean], [shaderSource=string], [toggleTexturePaging=boolean], [traceRenderPipeline=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Renders an image or a sequence using the OGS rendering engine.",
            "name": "ogsRender",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Query result",
                    "type": "boolean"
                }
            ],
            "synopsis": "ogsRender([activeMultisampleType=string], [activeRenderOverride=string], [activeRenderTargetFormat=string], [availableFloatingPointTargetFormat=boolean], [availableMultisampleType=boolean], [availableRenderOverrides=boolean], [camera=string], [currentFrame=boolean], [currentView=boolean], [enableFloatingPointRenderTarget=boolean], [enableMultisample=boolean], [frame=float], [height=uint], [layer=name], [noRenderView=boolean], [width=uint])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Query OpenCL information.",
            "name": "openCLInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The state of whether OpenCL is initialized or not (with the 'valid' flag)",
                    "type": "boolean"
                }
            ],
            "synopsis": "openCLInfo([minVertexBuffer=boolean], [valid=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Command returns the extension name depending on whether a given OpenGL extension is supported or not.",
            "name": "openGLExtension",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The supported string(s)",
                    "type": "string"
                }
            ],
            "synopsis": "openGLExtension([extension=string], [renderer=boolean], [vendor=boolean], [version=boolean])"
        },
        {
            "categories": [
                "System",
                "Plug-ins"
            ],
            "description": "Set or query API preferences.",
            "name": "openMayaPref",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "indicates success or failure",
                    "type": "int"
                }
            ],
            "synopsis": "openMayaPref([errlog=boolean], [lazyLoad=boolean], [oldPluginWarning=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "This command creates a popup menu control.",
            "name": "optionMenu",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "optionMenu( [string] , [alwaysCallChangeCommand=boolean], [annotation=string], [backgroundColor=[float, float, float]], [beforeShowPopup=script], [changeCommand=script], [defineTemplate=string], [deleteAllItems=boolean], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [itemListLong=boolean], [itemListShort=boolean], [label=string], [manage=boolean], [maxVisibleItems=int], [noBackground=boolean], [numberOfItems=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [postMenuCommand=script], [postMenuCommandOnce=boolean], [preventOverride=boolean], [select=int], [statusBarMessage=string], [useTemplate=string], [value=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "optionMenuGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The full name of the control on creation.",
                    "type": "string"
                }
            ],
            "synopsis": "optionMenuGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [deleteAllItems=boolean], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [extraLabel=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [itemListLong=boolean], [itemListShort=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfItems=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [postMenuCommand=script], [postMenuCommandOnce=boolean], [preventOverride=boolean], [rowAttach=[int, string, int]], [select=int], [statusBarMessage=string], [useTemplate=string], [value=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command allows you to set and query variables which are persistent between different invocations of Maya.",
            "name": "optionVar",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "0 or 1 for the `exists` option",
                    "type": "int"
                },
                {
                    "description": "When the `list` option is used",
                    "type": "string[]"
                }
            ],
            "synopsis": "optionVar([arraySize=string], [category=string], [clearArray=string], [clearStash=string], [default=boolean], [exists=string], [floatArray=string], [floatValue=[string, float]], [floatValue2=[string, float, float]], [floatValue3=[string, float, float, float]], [floatValue4=[string, float, float, float, float]], [floatValueAppend=[string, float]], [init=boolean], [intArray=string], [intValue=[string, int]], [intValue2=[string, int, int]], [intValue3=[string, int, int, int]], [intValue4=[string, int, int, int, int]], [intValueAppend=[string, int]], [list=boolean], [listCategories=boolean], [listModified=boolean], [prefFile=string], [remove=string], [removeFromArray=[string, int]], [stash=string], [stringArray=string], [stringValue=[string, string]], [stringValueAppend=[string, string]], [transient=boolean], [unstash=string], [version=int])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The orbit command revolves the camera(s) horizontally and/or vertically in the perspective window.",
            "name": "orbit",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "orbit( [camera] , [horizontalAngle=angle], [pivotPoint=[linear, linear, linear]], [rotationAngles=[angle, angle]], [verticalAngle=angle])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create, edit, or query an orbit context.",
            "name": "orbitCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context",
                    "type": "string"
                }
            ],
            "synopsis": "orbitCtx([alternateContext=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [localOrbit=boolean], [name=string], [orbitScale=float], [toolName=string])"
        },
        {
            "categories": [
                "Animation",
                "Constraints"
            ],
            "description": "Constrain an object's orientation to match the orientation of the target or the average of a number of targets.",
            "name": "orientConstraint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "[] ( name of the created constraint node)",
                    "type": "string"
                }
            ],
            "synopsis": "orientConstraint( [target ...] [object] , [createCache=[float, float]], [deleteCache=boolean], [layer=string], [maintainOffset=boolean], [name=string], [offset=[float, float, float]], [remove=boolean], [skip=string], [targetList=boolean], [weight=float], [weightAliasList=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command creates an outliner editor which can be used to display a list of objects.",
            "name": "outlinerEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the name of the editor)",
                    "type": "string"
                }
            ],
            "synopsis": "outlinerEditor( editorName , [allowMultiSelection=boolean], [alwaysToggleSelect=boolean], [animLayerFilterOptions=string], [attrAlphaOrder=string], [attrFilter=string], [autoExpand=boolean], [autoExpandAnimatedShapes=boolean], [autoExpandLayers=boolean], [autoSelectNewObjects=boolean], [containersIgnoreFilters=boolean], [control=boolean], [defineTemplate=string], [directSelect=boolean], [displayMode=string], [doNotSelectNewObjects=boolean], [docTag=string], [dropIsParent=boolean], [editAttrName=boolean], [exists=boolean], [expandAllItems=boolean], [expandAllSelectedItems=boolean], [expandAttribute=boolean], [expandConnections=boolean], [expandObjects=boolean], [feedbackItemName=boolean], [feedbackRowNumber=boolean], [filter=string], [forceMainConnection=string], [getCurrentSetOfItem=int], [highlightActive=boolean], [highlightConnection=string], [highlightSecondary=boolean], [ignoreDagHierarchy=boolean], [ignoreHiddenAttribute=boolean], [ignoreOutlinerColor=boolean], [isChildSelected=name], [isSet=int], [isSetMember=int], [isUfeItem=int], [lockMainConnection=boolean], [longNames=boolean], [mainListConnection=string], [mapMotionTrails=boolean], [masterOutliner=string], [niceNames=boolean], [object=name], [organizeByClip=boolean], [organizeByLayer=boolean], [panel=string], [parent=string], [parentObject=boolean], [pinPlug=name], [refresh=boolean], [removeFromCurrentSet=int], [renameItem=int], [renameSelectedItem=boolean], [renderFilterActive=boolean], [renderFilterIndex=int], [renderFilterVisible=boolean], [selectCommand=script], [selectionConnection=string], [selectionOrder=string], [setFilter=string], [setsIgnoreFilters=boolean], [showAnimCurvesOnly=boolean], [showAnimLayerWeight=boolean], [showAssets=boolean], [showAssignedMaterials=boolean], [showAttrValues=boolean], [showAttributes=boolean], [showCompounds=boolean], [showConnected=boolean], [showContainedOnly=boolean], [showContainerContents=boolean], [showDagOnly=boolean], [showLeafs=boolean], [showMuteInfo=boolean], [showNamespace=boolean], [showNumericAttrsOnly=boolean], [showParentContainers=boolean], [showPinIcons=boolean], [showPublishedAsConnected=boolean], [showReferenceMembers=boolean], [showReferenceNodes=boolean], [showSelected=boolean], [showSetMembers=boolean], [showShapes=boolean], [showTextureNodesOnly=boolean], [showTimeEditor=boolean], [showUVAttrsOnly=boolean], [showUnitlessCurves=boolean], [showUpstreamCurves=boolean], [sortOrder=string], [stateString=boolean], [transmitFilters=boolean], [ufeFilter=[string, string]], [ufeFilterValue=boolean], [unParent=boolean], [unlockMainConnection=boolean], [unpinPlug=name], [updateMainConnection=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command creates, edit and queries outliner panels which contain only an outliner editor.",
            "name": "outlinerPanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the name of the panel)",
                    "type": "string"
                }
            ],
            "synopsis": "outlinerPanel( [panelName] , [control=boolean], [copy=string], [createString=boolean], [defineTemplate=string], [divider=int], [docTag=string], [editString=boolean], [exists=boolean], [init=boolean], [isUnique=boolean], [label=string], [menuBarRepeatLast=boolean], [menuBarVisible=boolean], [needsInit=boolean], [outlinerEditor=boolean], [parent=string], [popupMenuProcedure=script], [replacePanel=string], [tearOff=boolean], [tearOffCopy=string], [tearOffRestore=boolean], [unParent=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "This command open the output window, if it exists.",
            "name": "outputWindow",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "outputWindow([show=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command allows you to assign modifier key behaviour to other parts of the system.",
            "name": "overrideModifier",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "overrideModifier([clear=boolean], [press=string], [release=string])"
        },
        {
            "categories": [
                "Effects",
                "PaintEffects"
            ],
            "description": "Command to set the global display methods for paint effects items.",
            "name": "paintEffectsDisplay",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "paintEffectsDisplay([meshDrawEnable=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "The pairBlend node allows a weighted combinations of 2 inputs to be blended together.",
            "name": "pairBlend",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "name of pairBlend node",
                    "type": "string"
                }
            ],
            "synopsis": "pairBlend([attribute=string], [input1=boolean], [input2=boolean], [node=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates an array of color cells.",
            "name": "palettePort",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the palettePort created",
                    "type": "string"
                }
            ],
            "synopsis": "palettePort( string , [actualTotal=int], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [colorEditable=boolean], [colorEdited=script], [defineTemplate=string], [dimensions=[int, int]], [docTag=string], [dragCallback=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [hsvValue=[int, int, float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [redraw=boolean], [rgbValue=[int, float, float, float]], [setCurCell=int], [statusBarMessage=string], [topDown=boolean], [transparent=int], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command allows editing or querying properties of any panels.",
            "name": "panel",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "panel( string , [control=boolean], [copy=string], [createString=boolean], [defineTemplate=string], [docTag=string], [editString=boolean], [exists=boolean], [init=boolean], [isUnique=boolean], [label=string], [menuBarRepeatLast=boolean], [menuBarVisible=boolean], [needsInit=boolean], [parent=string], [popupMenuProcedure=script], [replacePanel=string], [tearOff=boolean], [tearOffCopy=string], [tearOffRestore=boolean], [unParent=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command creates a pane layout.",
            "name": "paneLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "paneLayout( [string] , [activeFrameThickness=int], [activePane=string], [activePaneIndex=int], [annotation=string], [backgroundColor=[float, float, float]], [childArray=boolean], [configuration=string], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfChildren=boolean], [numberOfPopupMenus=boolean], [numberOfVisiblePanes=boolean], [pane1=boolean], [pane2=boolean], [pane3=boolean], [pane4=boolean], [paneSize=[int, int, int]], [paneUnderPointer=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [separatorMovedCommand=script], [separatorThickness=int], [setPane=[string, int]], [staticHeightPane=int], [staticWidthPane=int], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command creates a panel configuration object.",
            "name": "panelConfiguration",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the panelConfiguration created.",
                    "type": "string"
                }
            ],
            "synopsis": "panelConfiguration( [name] , [addPanel=[boolean, string, string, string, string]], [configString=string], [createStrings=boolean], [defaultImage=string], [defineTemplate=string], [editStrings=boolean], [exists=boolean], [image=string], [isFixedState=boolean], [label=string], [labelStrings=boolean], [numberOfPanels=boolean], [removeAllPanels=boolean], [removeLastPanel=boolean], [replaceCreateString=[int, string]], [replaceEditString=[int, string]], [replaceFixedState=[int, boolean]], [replaceLabel=[int, string]], [replacePanel=[int, boolean, string, string, string, string]], [replaceTypeString=[int, string]], [sceneConfig=boolean], [typeStrings=boolean], [useTemplate=string], [userCreated=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command creates a panel history object.",
            "name": "panelHistory",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the panelHistory object created.",
                    "type": "string"
                }
            ],
            "synopsis": "panelHistory( [name] , [back=boolean], [clear=boolean], [defineTemplate=string], [exists=boolean], [forward=boolean], [historyDepth=int], [isEmpty=boolean], [suspend=boolean], [targetPane=string], [useTemplate=string], [wrap=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The panZoom command pans/zooms the 2D film.",
            "name": "panZoom",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "panZoom( [camera] , [absolute=boolean], [downDistance=float], [leftDistance=float], [relative=boolean], [rightDistance=float], [upDistance=float], [zoomRatio=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create camera 2D pan/zoom context.",
            "name": "panZoomCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context",
                    "type": "string"
                }
            ],
            "synopsis": "panZoomCtx([alternateContext=boolean], [buttonDown=boolean], [buttonUp=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [panMode=boolean], [toolName=string], [zoomMode=boolean], [zoomScale=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Command used to register the paramDimCtx tool.",
            "name": "paramDimContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "paramDimContext([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command is used to create a param dimension to display the parameter value of a curve/surface at a specified point on the curve/surface.",
            "name": "paramDimension",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the paramDimension shape node created",
                    "type": "string"
                }
            ],
            "synopsis": "paramDimension( [curve|surface] )"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The command creates a locator in the underworld of a NURBS curve or NURBS surface at the specified parameter value.",
            "name": "paramLocator",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name for the new locator in the underworld of NURBS shape.",
                    "type": "string"
                }
            ],
            "synopsis": "paramLocator( [object] , [position=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command parents (moves) objects under a new group, removes objects from an existing group, or adds/removes parents.",
            "name": "parent",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Names of the objects parented (possibly renamed)",
                    "type": "string[]"
                }
            ],
            "synopsis": "parent( [dagObject...] [dagObject] , [absolute=boolean], [addObject=boolean], [noConnections=boolean], [noInvScale=boolean], [relative=boolean], [removeObject=boolean], [shape=boolean], [world=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Constraints"
            ],
            "description": "Constrain an object's position and rotation so that it behaves as if it were a child of the target object(s).",
            "name": "parentConstraint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the created constraint node",
                    "type": "string[]"
                }
            ],
            "synopsis": "parentConstraint( [target ...] [object] , [createCache=[float, float]], [decompRotationToChild=boolean], [deleteCache=boolean], [layer=string], [maintainOffset=boolean], [name=string], [remove=boolean], [skipRotate=string], [skipTranslate=string], [targetList=boolean], [weight=float], [weightAliasList=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "The particle command creates a new particle object from a list of world space points.",
            "name": "particle",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the particle object created",
                    "type": "string"
                }
            ],
            "synopsis": "particle( object , [attribute=string], [cache=boolean], [conserve=float], [count=boolean], [deleteCache=boolean], [dynamicAttrList=boolean], [floatValue=float], [gridSpacing=linear], [inherit=float], [jitterBasePoint=[linear, linear, linear]], [jitterRadius=linear], [lowerLeft=[linear, linear, linear]], [name=string], [numJitters=uint], [order=int], [particleId=int], [perParticleDouble=boolean], [perParticleVector=boolean], [position=[linear, linear, linear]], [shapeName=string], [upperRight=[linear, linear, linear]], [vectorValue=[float, float, float]])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This command is used to query if a particle or soft object with the given name exists.",
            "name": "particleExists",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "True if there is a particle object or soft object by the given name, false otherwise.",
                    "type": "boolean"
                }
            ],
            "synopsis": "particleExists( string )"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This command generates an nParticle system that fills the selected object with a grid of particles.",
            "name": "particleFill",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "particleFill([closePacking=boolean], [doubleWalled=boolean], [maxX=float], [maxY=float], [maxZ=float], [minX=float], [minY=float], [minZ=float], [particleDensity=float], [resolution=int])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This command is used to create a particle instancer node and set the proper attributes in the particle shape and in the instancer node.",
            "name": "particleInstancer",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "particleInstancer([addObject=boolean], [aimAxis=string], [aimDirection=string], [aimPosition=string], [aimUpAxis=string], [aimWorldUp=string], [attributeMapping=boolean], [cycle=string], [cycleStartObject=string], [cycleStep=float], [cycleStepUnits=string], [index=int], [instanceId=string], [levelOfDetail=string], [name=string], [object=string], [objectIndex=string], [particleAge=string], [position=string], [removeObject=boolean], [rotation=string], [rotationOrder=string], [rotationType=string], [rotationUnits=string], [scale=string], [shear=string], [visibility=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This action provides information access to the particle render subclasses.",
            "name": "particleRenderInfo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "particleRenderInfo([attrList=int], [attrListAll=boolean], [name=int], [renderTypeCount=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command is used to create, query or add/remove sets to a partition.",
            "name": "partition",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the partition that was created or edited",
                    "type": "string"
                }
            ],
            "synopsis": "partition( [string] [string...] , [addSet=name], [name=string], [removeSet=name], [render=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "The pasteKey command pastes curve segment hierarchies from the clipboard onto other objects or curves.",
            "name": "pasteKey",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The number of curves pasted",
                    "type": "int"
                }
            ],
            "synopsis": "pasteKey( [objects] , [animLayer=string], [animation=string], [attribute=string], [clipboard=string], [connect=boolean], [copies=uint], [float=floatrange], [floatOffset=float], [includeUpperBound=boolean], [index=uint], [matchByName=boolean], [option=string], [time=timerange], [timeOffset=time], [valueOffset=float])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "The pathAnimation command constructs the necessary graph nodes and their interconnections for a motion path animation.",
            "name": "pathAnimation",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the created motionPath node)",
                    "type": "string"
                }
            ],
            "synopsis": "pathAnimation( [objects] , [bank=boolean], [bankScale=float], [bankThreshold=angle], [curve=string], [endTimeU=time], [endU=float], [follow=boolean], [followAxis=string], [fractionMode=boolean], [inverseFront=boolean], [inverseUp=boolean], [name=string], [startTimeU=time], [startU=float], [upAxis=string], [useNormal=boolean], [worldUpObject=name], [worldUpType=string], [worldUpVector=[float, float, float]])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "Pause for a specified number of seconds for canned demos or for test scripts to allow user to view results.",
            "name": "pause",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "pause([seconds=int])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The perCameraVisibility command creates, queries and removes visibility relationships between DAG objects and cameras.",
            "name": "perCameraVisibility",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "perCameraVisibility([camera=name], [exclusive=boolean], [hide=boolean], [remove=boolean], [removeAll=boolean], [removeCamera=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command sets percent values on members of a weighted node such as a cluster or a jointCluster.",
            "name": "percent",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "percent( node [objects] , [addPercent=boolean], [dropoffAxis=[linear, linear, linear]], [dropoffCurve=string], [dropoffDistance=linear], [dropoffPosition=[linear, linear, linear]], [dropoffType=string], [multiplyPercent=boolean], [value=float])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Sets the global performance options for the application.",
            "name": "performanceOptions",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "One of \"on\", \"off\", or \"interactive\" giving the state of the option",
                    "type": "string"
                },
                {
                    "description": "Global resolution value",
                    "type": "float"
                }
            ],
            "synopsis": "performanceOptions([clusterResolution=float], [disableStitch=string], [disableTrimBoundaryDisplay=string], [disableTrimDisplay=string], [latticeResolution=float], [passThroughBindSkinAndFlexors=string], [passThroughBlendShape=string], [passThroughCluster=string], [passThroughDeltaMush=string], [passThroughFlexors=string], [passThroughLattice=string], [passThroughMeshBoolean=string], [passThroughPaintEffects=string], [passThroughSculpt=string], [passThroughWire=string], [regionOfEffect=string], [skipHierarchyTraversal=boolean], [useClusterResolution=string], [useLatticeResolution=string])"
        },
        {
            "categories": [
                "Effects",
                "PaintEffects"
            ],
            "description": "This command will loop through all the Paint Effects strokes, including pfxHair nodes, and write the current state of all the tubes to a file.",
            "name": "pfxstrokes",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "pfxstrokes([filename=string], [postCallback=boolean], [selected=boolean])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "The pickWalk command allows you to quickly change the selection list relative to the nodes that are currently selected.",
            "name": "pickWalk",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "A list of the newly selected items",
                    "type": "string[]"
                }
            ],
            "synopsis": "pickWalk( [objects] , [direction=string], [recurse=boolean], [type=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a static image.",
            "name": "picture",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the picture control created.",
                    "type": "string"
                }
            ],
            "synopsis": "picture( [string] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [image=string], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [tile=boolean], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The pixelMove command moves objects by what appears as pixel units based on the current view.",
            "name": "pixelMove",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "pixelMove( float float )"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command computes a planar trimmed surface given planar boundary curves that form a closed region.",
            "name": "planarSrf",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "planarSrf( objects , [caching=boolean], [constructionHistory=boolean], [degree=int], [keepOutside=boolean], [name=string], [nodeState=int], [object=boolean], [polygon=int], [range=boolean], [tolerance=linear])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The command creates a sketch plane (also known as a \"construction plane\") in space.",
            "name": "plane",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new plane)",
                    "type": "string"
                }
            ],
            "synopsis": "plane([length=linear], [name=string], [position=[linear, linear, linear]], [rotation=[angle, angle, angle]], [size=linear], [width=linear])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command starts and stops playback.",
            "name": "play",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "play([forward=boolean], [playSound=boolean], [record=boolean], [sound=string], [state=boolean], [wait=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command sets/queries certain values associated with playback: looping style, start/end times, etc.",
            "name": "playbackOptions",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "or float Query of edited option.",
                    "type": "string"
                }
            ],
            "synopsis": "playbackOptions([animationEndTime=time], [animationStartTime=time], [blockingAnim=boolean], [by=float], [framesPerSecond=boolean], [loop=string], [maxPlaybackSpeed=float], [maxTime=time], [minTime=time], [playbackSpeed=float], [stepLoop=boolean], [view=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command playblasts the current playback range.",
            "name": "playblast",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of moviefile created.",
                    "type": "string"
                }
            ],
            "synopsis": "playblast( filename , [activeEditor=boolean], [cameraSetup=[string, string]], [clearCache=boolean], [codecOptions=boolean], [combineSound=boolean], [completeFilename=string], [compression=string], [editorPanelName=string], [endTime=time], [filename=string], [forceOverwrite=boolean], [format=string], [frame=time], [framePadding=int], [height=int], [indexFromZero=boolean], [offScreen=boolean], [offScreenViewportUpdate=boolean], [options=boolean], [percent=int], [quality=int], [rawFrameNumbers=boolean], [replaceAudioOnly=boolean], [replaceEndTime=time], [replaceFilename=string], [replaceStartTime=time], [sequenceTime=boolean], [showOrnaments=boolean], [sound=string], [startTime=time], [throwOnError=boolean], [useTraxSounds=boolean], [viewer=boolean], [width=int], [widthHeight=[int, int]])"
        },
        {
            "categories": [
                "System",
                "Plug-ins"
            ],
            "description": "Register, deregister or query a plugin display filter.",
            "name": "pluginDisplayFilter",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "string[]",
                    "type": "string"
                }
            ],
            "synopsis": "pluginDisplayFilter([classification=string], [deregister=boolean], [exists=boolean], [label=string], [listFilters=boolean], [register=boolean])"
        },
        {
            "categories": [
                "System",
                "Plug-ins"
            ],
            "description": "This command provides access to the plug-in registry of the application.",
            "name": "pluginInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Dependent upon the action requested.",
                    "type": "Any"
                }
            ],
            "synopsis": "pluginInfo( [string] , [activeFile=boolean], [allEvaluators=boolean], [animCurveInterp=string], [apiVersion=boolean], [autoload=boolean], [cacheFormat=boolean], [changedCommand=script], [command=string], [constraintCommand=boolean], [controlCommand=boolean], [data=[string, string]], [dependNode=boolean], [dependNodeByType=string], [dependNodeId=string], [device=boolean], [dragAndDropBehavior=boolean], [evaluator=boolean], [iksolver=boolean], [listPlugins=boolean], [listPluginsPath=boolean], [loadPluginPrefs=boolean], [loaded=boolean], [modelEditorCommand=boolean], [name=string], [path=string], [pluginsInUse=boolean], [referenceTranslators=boolean], [registered=boolean], [remove=boolean], [renderer=boolean], [savePluginPrefs=boolean], [serviceDescriptions=boolean], [settings=boolean], [tool=string], [translator=boolean], [unloadOk=boolean], [userNamed=boolean], [vendor=string], [version=boolean], [writeRequires=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Constraints"
            ],
            "description": "Constrain an object's position to the position of the target object or to the average position of a number of targets.",
            "name": "pointConstraint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the created constraint node",
                    "type": "string[]"
                }
            ],
            "synopsis": "pointConstraint( [target...] [object] , [layer=string], [maintainOffset=boolean], [name=string], [offset=[float, float, float]], [remove=boolean], [skip=string], [targetList=boolean], [weight=float], [weightAliasList=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The command enables direct manipulation of a NURBS curve.",
            "name": "pointCurveConstraint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object Name(s), node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "pointCurveConstraint( selectionItem , [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [object=boolean], [pointConstraintUVW=[float, float, float]], [pointWeight=float], [position=[float, float, float]], [replaceOriginal=boolean], [weight=float])"
        },
        {
            "categories": [
                "Rendering",
                "Lights"
            ],
            "description": "The pointLight command is used to edit the parameters of existing pointLights, or to create new ones.",
            "name": "pointLight",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Light shape name",
                    "type": "string"
                }
            ],
            "synopsis": "pointLight([decayRate=int], [discRadius=linear], [exclusive=boolean], [intensity=float], [name=string], [position=[linear, linear, linear]], [rgb=[float, float, float]], [rotation=[angle, angle, angle]], [shadowColor=[float, float, float]], [shadowDither=float], [shadowSamples=int], [softShadow=boolean], [useRayTraceShadows=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "This command returns information for a point on a NURBS curve.",
            "name": "pointOnCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Vector query result",
                    "type": "float[3]"
                },
                {
                    "description": "Single float query result",
                    "type": "float"
                },
                {
                    "description": "String query result",
                    "type": "string"
                }
            ],
            "synopsis": "pointOnCurve( [objects] , [caching=boolean], [constructionHistory=boolean], [curvatureCenter=boolean], [curvatureRadius=boolean], [nodeState=int], [normal=boolean], [normalizedNormal=boolean], [normalizedTangent=boolean], [parameter=float], [position=boolean], [tangent=boolean], [turnOnPercentage=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Constraints"
            ],
            "description": "Constrain an object's position to the position of the target object or to the average position of a number of targets.",
            "name": "pointOnPolyConstraint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the created constraint node",
                    "type": "string[]"
                }
            ],
            "synopsis": "pointOnPolyConstraint( [target...] [object] , [layer=string], [maintainOffset=boolean], [name=string], [offset=[float, float, float]], [remove=boolean], [skip=string], [targetList=boolean], [weight=float], [weightAliasList=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command returns information for a point on a surface.",
            "name": "pointOnSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Vector query result",
                    "type": "float[3]"
                },
                {
                    "description": "String query result",
                    "type": "string"
                }
            ],
            "synopsis": "pointOnSurface( [objects] , [caching=boolean], [constructionHistory=boolean], [nodeState=int], [normal=boolean], [normalizedNormal=boolean], [normalizedTangentU=boolean], [normalizedTangentV=boolean], [parameterU=float], [parameterV=float], [position=boolean], [tangentU=boolean], [tangentV=boolean], [turnOnPercentage=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command returns the world or local space position for any type of point object.",
            "name": "pointPosition",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "float[]"
                }
            ],
            "synopsis": "pointPosition( [object] , [local=boolean], [world=boolean])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "Constrains the poleVector of an ikRPsolve handle to point at a target object or at the average position of a number of targets.",
            "name": "poleVectorConstraint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "name of the created constraint node",
                    "type": "string[]"
                }
            ],
            "synopsis": "poleVectorConstraint( [target ...] [object] , [layer=string], [name=string], [remove=boolean], [targetList=boolean], [weight=float], [weightAliasList=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Appends a new face to the selected polygonal object.",
            "name": "polyAppend",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyAppend([append=[[, float, float, float, ]]], [constructionHistory=boolean], [edge=int], [hole=boolean], [name=string], [point=[float, float, float]], [subdivision=int], [texture=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a new context to append facets on polygonal objects.",
            "name": "polyAppendFacetCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyAppendFacetCtx([append=boolean], [exists=boolean], [image1=string], [image2=string], [image3=string], [isRotateAvailable=boolean], [maximumNumberOfPoints=int], [planarConstraint=boolean], [rotate=float], [subdivision=int], [texture=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Appends a new face to the selected polygonal object.",
            "name": "polyAppendVertex",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyAppendVertex([append=[[, float, float, float, ]]], [constructionHistory=boolean], [hole=boolean], [name=string], [point=[float, float, float]], [texture=int], [vertex=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Projects a map onto an object, using several orthogonal projections simultaneously.",
            "name": "polyAutoProjection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyAutoProjection([caching=boolean], [constructionHistory=boolean], [createNewMap=boolean], [insertBeforeDeformers=boolean], [layout=int], [layoutMethod=int], [name=string], [nodeState=int], [optimize=int], [percentageSpace=float], [pivot=[linear, linear, linear]], [pivotX=linear], [pivotY=linear], [pivotZ=linear], [planes=int], [projectBothDirections=boolean], [rotate=[angle, angle, angle]], [rotateX=angle], [rotateY=angle], [rotateZ=angle], [scale=[float, float, float]], [scaleMode=int], [scaleX=float], [scaleY=float], [scaleZ=float], [skipIntersect=boolean], [translate=[linear, linear, linear]], [translateX=linear], [translateY=linear], [translateZ=linear], [uvSetName=string], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Set normals of vertices or vertex-faces to an average value when the vertices within a given threshold.",
            "name": "polyAverageNormal",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "of the node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyAverageNormal([allowZeroNormal=boolean], [distance=float], [postnormalize=boolean], [prenormalize=boolean], [replaceNormalXYZ=[float, float, float]])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Moves the selected vertices of a polygonal object to round its shape.",
            "name": "polyAverageVertex",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyAverageVertex( selectionList , [caching=boolean], [constructionHistory=boolean], [iterations=int], [name=string], [nodeState=int], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Bevel edges.",
            "name": "polyBevel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyBevel([angleTolerance=float], [autoFit=boolean], [caching=boolean], [constructionHistory=boolean], [mergeVertexTolerance=linear], [mergeVertices=boolean], [miteringAngle=float], [name=string], [nodeState=int], [offset=linear], [offsetAsFraction=boolean], [roundness=float], [segments=int], [smoothingAngle=float], [subdivideNgons=boolean], [useLegacyBevelAlgorithm=boolean], [uvAssignment=int], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Bevel edges.",
            "name": "polyBevel3",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyBevel3([angleTolerance=float], [autoFit=boolean], [caching=boolean], [chamfer=boolean], [constructionHistory=boolean], [depth=float], [fillNgons=boolean], [mergeVertexTolerance=linear], [mergeVertices=boolean], [miterAlong=int], [mitering=int], [miteringAngle=float], [name=string], [nodeState=int], [offset=linear], [offsetAsFraction=boolean], [roundness=float], [segments=int], [smoothingAngle=float], [uvAssignment=int], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Takes two color sets and blends them together into a third specified color set.",
            "name": "polyBlendColor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyBlendColor([baseColorName=string], [blendFunc=int], [blendWeightA=float], [blendWeightB=float], [blendWeightC=float], [blendWeightD=float], [caching=boolean], [constructionHistory=boolean], [dstColorName=string], [name=string], [nodeState=int], [srcColorName=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command creates blindData types (basically creates an instance of TdnPolyBlindData).",
            "name": "polyBlindData",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of nodes created",
                    "type": "string"
                }
            ],
            "synopsis": "polyBlindData([associationType=string], [binaryData=string], [booleanData=boolean], [delete=boolean], [doubleData=float], [int64Data=int64], [intData=int], [longDataName=string], [rescan=boolean], [reset=boolean], [shape=boolean], [shortDataName=string], [stringData=string], [typeId=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command creates a new poly as the result of a boolean operation on input polys : union, intersection, difference.",
            "name": "polyBoolOp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyBoolOp( poly poly , [caching=boolean], [faceAreaThreshold=linear], [mergeUVSets=int], [nodeState=int], [operation=int], [preserveColor=boolean], [useThresholds=boolean], [vertexDistanceThreshold=linear])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Bridges two sets of edges.",
            "name": "polyBridgeEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyBridgeEdge([bridgeOffset=int], [caching=boolean], [constructionHistory=boolean], [curveType=int], [divisions=int], [inputCurve=name], [name=string], [nodeState=int], [smoothingAngle=angle], [startVert1=int], [startVert2=int], [taper=float], [taperCurve_FloatValue=float], [taperCurve_Interp=int], [taperCurve_Position=float], [twist=angle], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "When the cacheInput attribute has a positive value the midModifier node caches the output mesh improving performance in computations of downstream nodes.",
            "name": "polyCacheMonitor",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyCacheMonitor([cacheValue=boolean], [nodeName=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Returns true if the specified poly edges can be bridged using polyBridgeEdge.",
            "name": "polyCanBridgeEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyCanBridgeEdge( poly poly... )"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command creates a new poly as the result of a boolean operation on input polys : union, intersection, difference.",
            "name": "polyCBoolOp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyCBoolOp( poly poly , [caching=boolean], [classification=int], [faceAreaThreshold=linear], [mergeUVSets=int], [nodeState=int], [operation=int], [preserveColor=boolean], [tagIntersection=boolean], [useCarveBooleans=boolean], [useThresholds=boolean], [vertexDistanceThreshold=linear])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Dumps a description of internal memory representation of poly objects.",
            "name": "polyCheck",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The number of errors.",
                    "type": "int"
                }
            ],
            "synopsis": "polyCheck( poly poly... , [edge=boolean], [face=boolean], [faceOffset=boolean], [openFile=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Extract facets.",
            "name": "polyChipOff",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyChipOff([attraction=float], [caching=boolean], [constructionHistory=boolean], [duplicate=boolean], [gain=float], [gravity=[linear, linear, linear]], [gravityX=linear], [gravityY=linear], [gravityZ=linear], [keepFacesTogether=boolean], [keepFacetTogether=boolean], [localCenter=int], [localDirection=[linear, linear, linear]], [localDirectionX=linear], [localDirectionY=linear], [localDirectionZ=linear], [localRotate=[angle, angle, angle]], [localRotateX=angle], [localRotateY=angle], [localRotateZ=angle], [localScale=[float, float, float]], [localScaleX=float], [localScaleY=float], [localScaleZ=float], [localTranslate=[linear, linear, linear]], [localTranslateX=linear], [localTranslateY=linear], [localTranslateZ=linear], [magnX=linear], [magnY=linear], [magnZ=linear], [magnet=[linear, linear, linear]], [name=string], [nodeState=int], [offset=float], [pivot=[linear, linear, linear]], [pivotX=linear], [pivotY=linear], [pivotZ=linear], [random=float], [scale=[float, float, float]], [scaleX=float], [scaleY=float], [scaleZ=float], [translate=[linear, linear, linear]], [translateX=linear], [translateY=linear], [translateZ=linear], [weight=float], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Mirror all the faces of the selected object.",
            "name": "polyCircularize",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyCircularize([alignment=int], [caching=boolean], [constructionHistory=boolean], [createCurve=boolean], [evenlyDistribute=boolean], [inputCurve=name], [name=string], [nodeState=int], [normalOrientation=int], [radialOffset=float], [smoothingAngle=float], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Mirror all the faces of the selected object.",
            "name": "polyCircularizeEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyCircularizeEdge([alignment=int], [caching=boolean], [constructionHistory=boolean], [createCurve=boolean], [evenlyDistribute=boolean], [inputCurve=name], [name=string], [nodeState=int], [normalOrientation=int], [radialOffset=float], [smoothingAngle=float], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Mirror all the faces of the selected object.",
            "name": "polyCircularizeFace",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyCircularizeFace([alignment=int], [caching=boolean], [constructionHistory=boolean], [createCurve=boolean], [evenlyDistribute=boolean], [inputCurve=name], [name=string], [nodeState=int], [normalOrientation=int], [radialOffset=float], [smoothingAngle=float], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "polyClean will attempt to remove components that are invalid in the description of a poly mesh.",
            "name": "polyClean",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyClean([caching=boolean], [cleanEdges=boolean], [cleanPartialUVMapping=boolean], [cleanUVs=boolean], [cleanVertices=boolean], [constructionHistory=boolean], [frozen=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The command allows the user to copy and paste certain polygonal attributes to a clipboard.",
            "name": "polyClipboard",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyClipboard([clear=boolean], [color=boolean], [copy=boolean], [paste=boolean], [shader=boolean], [uvCoordinates=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Closes open borders of objects.",
            "name": "polyCloseBorder",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyCloseBorder([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Turns each selected edge into a point.",
            "name": "polyCollapseEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyCollapseEdge([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Turns each selected facet into a point.",
            "name": "polyCollapseFacet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyCollapseFacet([areaThreshold=float], [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [useAreaThreshold=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "A command that updates a mesh's vertex tweaks by applying its tweak data (stored on the mesh node) onto its respective vertex data.",
            "name": "polyCollapseTweaks",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyCollapseTweaks([hasVertexTweaks=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command applies false color to the selected polygonal components and objects, depending on whether or not blind data exists for the selected components (or, in the case of poly objects, dynamic attributes), and, depending on the color mode indicated, what the values are.",
            "name": "polyColorBlindData",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyColorBlindData([aboveMaxColorBlue=float], [aboveMaxColorGreen=float], [aboveMaxColorRed=float], [attrName=string], [belowMinColorBlue=float], [belowMinColorGreen=float], [belowMinColorRed=float], [clashColorBlue=float], [clashColorGreen=float], [clashColorRed=float], [colorBlue=float], [colorGreen=float], [colorRed=float], [dataType=string], [enableFalseColor=boolean], [maxColorBlue=float], [maxColorGreen=float], [maxColorRed=float], [maxValue=float], [minColorBlue=float], [minColorGreen=float], [minColorRed=float], [minValue=float], [mode=int], [noColorBlue=float], [noColorGreen=float], [noColorRed=float], [numIdTypes=int], [queryMode=boolean], [typeId=int], [useMax=boolean], [useMin=boolean], [value=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Deletes color from selected components.",
            "name": "polyColorDel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyColorDel([caching=boolean], [colorSetName=string], [constructionHistory=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Modifies the attributes of a poly color set.",
            "name": "polyColorMod",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyColorMod([alphaScale_FloatValue=float], [alphaScale_Interp=int], [alphaScale_Position=float], [baseColorName=string], [blueScale_FloatValue=float], [blueScale_Interp=int], [blueScale_Position=float], [caching=boolean], [constructionHistory=boolean], [greenScale_FloatValue=float], [greenScale_Interp=int], [greenScale_Position=float], [huev=float], [intensityScale_FloatValue=float], [intensityScale_Interp=int], [intensityScale_Position=float], [name=string], [nodeState=int], [redScale_FloatValue=float], [redScale_Interp=int], [redScale_Position=float], [satv=float], [value=float])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command associates color(rgb and alpha) with vertices on polygonal objects.",
            "name": "polyColorPerVertex",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyColorPerVertex([alpha=float], [clamped=boolean], [colorB=float], [colorDisplayOption=boolean], [colorG=float], [colorR=float], [colorRGB=[float, float, float]], [notUndoable=boolean], [relative=boolean], [remove=boolean], [representation=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command to do the following to color sets: - delete an existing color set.",
            "name": "polyColorSet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyColorSet([allColorSets=boolean], [clamped=boolean], [colorSet=string], [copy=boolean], [create=boolean], [currentColorSet=boolean], [currentPerInstanceSet=boolean], [delete=boolean], [newColorSet=string], [perInstance=boolean], [rename=boolean], [representation=string], [shareInstances=boolean], [unshared=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Compares two Polygonal Geometry objects with a fine control on what to compare.",
            "name": "polyCompare",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "0 if successful, non-zero if poly1 and poly2 are not determined to be equal based on requested flags. The non-zero value depends on which attributes are different:\n Vertices = 1 \n Edges = 2 \n Face Descriptions = 4 \n UV Sets = 8 \n UV Indices = 16 \n Color Sets = 32 \n Color Indices = 64 \n User Normals = 128 \n So a return value of 3, for example, indicates both vertices and edges are different.",
                    "type": "int"
                }
            ],
            "synopsis": "polyCompare( poly poly , [colorSetIndices=boolean], [colorSets=boolean], [edges=boolean], [faceDesc=boolean], [userNormals=boolean], [uvSetIndices=boolean], [uvSets=boolean], [vertices=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The cone command creates a new polygonal cone.",
            "name": "polyCone",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyCone([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [createUVs=int], [height=linear], [name=string], [nodeState=int], [object=boolean], [radius=linear], [roundCap=boolean], [subdivisionsAxis=int], [subdivisionsCap=int], [subdivisionsHeight=int], [subdivisionsX=int], [subdivisionsY=int], [subdivisionsZ=int], [texture=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Splits polygon edges according to the selected components.",
            "name": "polyConnectComponents",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyConnectComponents([adjustEdgeFlow=float], [caching=boolean], [constructionHistory=boolean], [insertWithEdgeFlow=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Performs a contour stretch UV projection onto an object.",
            "name": "polyContourProjection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyContourProjection([caching=boolean], [constructionHistory=boolean], [createNewMap=boolean], [flipRails=boolean], [insertBeforeDeformers=boolean], [method=int], [name=string], [nodeState=int], [offset0=linear], [offset1=linear], [offset2=linear], [offset3=linear], [reduceShear=float], [smoothness0=float], [smoothness1=float], [smoothness2=float], [smoothness3=float], [userDefinedCorners=boolean], [uvSetName=string], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Copy some UVs from a UV set into another.",
            "name": "polyCopyUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyCopyUV( [selectionList] , [caching=boolean], [constructionHistory=boolean], [createNewMap=boolean], [name=string], [nodeState=int], [uvSetName=string], [uvSetNameInput=string], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command to set the crease values on the edges or vertices of a poly.",
            "name": "polyCrease",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyCrease([createHistory=boolean], [operation=uint], [relativeValue=float], [value=float], [vertexValue=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a new context to crease components on polygonal objects.",
            "name": "polyCreaseCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyCreaseCtx([createSet=string], [exists=boolean], [extendSelection=boolean], [image1=string], [image2=string], [image3=string], [relative=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Create a new polygonal object with the specified face, which will be closed.",
            "name": "polyCreateFacet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyCreateFacet([constructionHistory=boolean], [hole=boolean], [name=string], [point=[[, float, float, float, ]]], [subdivision=int], [texture=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a new context to create polygonal objects.",
            "name": "polyCreateFacetCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyCreateFacetCtx([append=boolean], [exists=boolean], [image1=string], [image2=string], [image3=string], [maximumNumberOfPoints=int], [planarConstraint=boolean], [subdivision=int], [texture=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The cube command creates a new polygonal cube.",
            "name": "polyCube",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyCube([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [createUVs=int], [depth=linear], [height=linear], [name=string], [nodeState=int], [object=boolean], [subdivisionsDepth=int], [subdivisionsHeight=int], [subdivisionsWidth=int], [subdivisionsX=int], [subdivisionsY=int], [subdivisionsZ=int], [texture=int], [width=linear])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command splits a mesh, or a set of poly faces, along a plane.",
            "name": "polyCut",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyCut([caching=boolean], [constructionHistory=boolean], [cutPlaneCenter=[linear, linear, linear]], [cutPlaneCenterX=linear], [cutPlaneCenterY=linear], [cutPlaneCenterZ=linear], [cutPlaneHeight=linear], [cutPlaneRotate=[angle, angle, angle]], [cutPlaneRotateX=angle], [cutPlaneRotateY=angle], [cutPlaneRotateZ=angle], [cutPlaneSize=[linear, linear]], [cutPlaneWidth=linear], [cuttingDirection=string], [deleteFaces=boolean], [extractFaces=boolean], [extractOffset=[linear, linear, linear]], [extractOffsetX=linear], [extractOffsetY=linear], [extractOffsetZ=linear], [name=string], [nodeState=int], [onObject=boolean], [worldSpace=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a new context to cut facets on polygonal objects.",
            "name": "polyCutCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyCutCtx([deleteFaces=boolean], [exists=boolean], [extractFaces=boolean], [extractOffset=[linear, linear, linear]], [image1=string], [image2=string], [image3=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a new context to cut UVs on polygonal objects.",
            "name": "polyCutUVCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Whether steady stroke is on or not, when querying the steadyStroke flag.",
                    "type": "boolean"
                },
                {
                    "description": "The distance for a steady stroke, when querying the steadyStrokeDistance flag.",
                    "type": "float"
                }
            ],
            "synopsis": "polyCutUVCtx( contextName , [loopSpeed=int], [mapBordersColor=[float, float, float]], [showCheckerMap=boolean], [showTextureBorders=boolean], [showUVShellColoring=boolean], [steadyStroke=boolean], [steadyStrokeDistance=float], [symmetry=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The cylinder command creates a new polygonal cylinder.",
            "name": "polyCylinder",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyCylinder([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [createUVs=int], [height=linear], [name=string], [nodeState=int], [object=boolean], [radius=linear], [roundCap=boolean], [subdivisionsAxis=int], [subdivisionsCaps=int], [subdivisionsHeight=int], [subdivisionsX=int], [subdivisionsY=int], [subdivisionsZ=int], [texture=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "TpolyProjCmdBase is a base class for the command to create a mapping on the selected polygonal faces.",
            "name": "polyCylindricalProjection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyCylindricalProjection([caching=boolean], [constructionHistory=boolean], [createNewMap=boolean], [imageCenter=[float, float]], [imageCenterX=float], [imageCenterY=float], [imageScale=[float, float]], [imageScaleU=float], [imageScaleV=float], [insertBeforeDeformers=boolean], [keepImageRatio=boolean], [mapDirection=string], [name=string], [nodeState=int], [perInstance=boolean], [projectionCenter=[linear, linear, linear]], [projectionCenterX=linear], [projectionCenterY=linear], [projectionCenterZ=linear], [projectionHeight=linear], [projectionHorizontalSweep=linear], [projectionScale=[linear, linear]], [projectionScaleU=linear], [projectionScaleV=linear], [radius=linear], [rotationAngle=angle], [seamCorrect=boolean], [smartFit=boolean], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Deletes selected edges, and merges neighboring faces.",
            "name": "polyDelEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyDelEdge([caching=boolean], [cleanVertices=boolean], [constructionHistory=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Deletes faces.",
            "name": "polyDelFacet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyDelFacet([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Deletes vertices.",
            "name": "polyDelVertex",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyDelVertex([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command duplicates the input polygonal object, connects up the outMesh attribute of the original polygonal shape to the inMesh attribute of the newly created duplicate shape and copies over the shader assignments from the original shape to the new duplicated shape.",
            "name": "polyDuplicateAndConnect",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyDuplicateAndConnect( object , [removeOriginalFromShaders=boolean], [renameChildren=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Duplicates a series of connected edges (edgeLoop).",
            "name": "polyDuplicateEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyDuplicateEdge([adjustEdgeFlow=float], [caching=boolean], [constructionHistory=boolean], [deleteEdge=boolean], [endVertexOffset=float], [insertWithEdgeFlow=boolean], [name=string], [nodeState=int], [offset=float], [smoothingAngle=angle], [splitType=int], [startVertexOffset=float])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Edit edges of a polygonal object to respect surface curvature.",
            "name": "polyEditEdgeFlow",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyEditEdgeFlow([adjustEdgeFlow=float], [caching=boolean], [constructionHistory=boolean], [edgeFlow=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command edits uvs on polygonal objects.",
            "name": "polyEditUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyEditUV([angle=float], [pivotU=float], [pivotV=float], [relative=boolean], [rotateRatio=float], [rotation=boolean], [scale=boolean], [scaleU=float], [scaleV=float], [uValue=float], [uvSetName=string], [vValue=float])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command edits uv shells on polygonal objects.",
            "name": "polyEditUVShell",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyEditUVShell([angle=float], [pivotU=float], [pivotV=float], [relative=boolean], [rotateRatio=float], [rotation=boolean], [scale=boolean], [scaleU=float], [scaleV=float], [uValue=float], [uvSetName=string], [vValue=float])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Returns the required counts on the specified objects.",
            "name": "polyEvaluate",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "a MEL array of values, a Python dictionary, or a string, depending on the format requested and the language called from.",
                    "type": "Any"
                }
            ],
            "synopsis": "polyEvaluate( [poly poly...] , [accurateEvaluation=boolean], [activeShells=boolean], [activeUVShells=boolean], [area=boolean], [boundingBox=boolean], [boundingBox2d=boolean], [boundingBoxComponent=boolean], [boundingBoxComponent2d=boolean], [displayStats=boolean], [edge=boolean], [edgeComponent=boolean], [face=boolean], [faceArea=boolean], [faceComponent=boolean], [format=boolean], [shell=boolean], [triangle=boolean], [triangleComponent=boolean], [uvArea=boolean], [uvComponent=boolean], [uvEdgePairs=boolean], [uvFaceArea=boolean], [uvSetName=string], [uvShell=boolean], [uvShellIds=boolean], [uvcoord=boolean], [uvsInShell=int], [vertex=boolean], [vertexComponent=boolean], [worldArea=boolean], [worldFaceArea=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Extrude edges separately or together.",
            "name": "polyExtrudeEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyExtrudeEdge([caching=boolean], [constructionHistory=boolean], [createCurve=boolean], [divisions=int], [gain=float], [inputCurve=name], [keepFacesTogether=boolean], [localCenter=int], [localDirection=[linear, linear, linear]], [localDirectionX=linear], [localDirectionY=linear], [localDirectionZ=linear], [localRotate=[angle, angle, angle]], [localRotateX=angle], [localRotateY=angle], [localRotateZ=angle], [localScale=[float, float, float]], [localScaleX=float], [localScaleY=float], [localScaleZ=float], [localTranslate=[linear, linear, linear]], [localTranslateX=linear], [localTranslateY=linear], [localTranslateZ=linear], [name=string], [nodeState=int], [offset=float], [pivot=[linear, linear, linear]], [pivotX=linear], [pivotY=linear], [pivotZ=linear], [random=float], [rotate=[angle, angle, angle]], [rotateX=angle], [rotateY=angle], [rotateZ=angle], [scale=[float, float, float]], [scaleX=float], [scaleY=float], [scaleZ=float], [smoothingAngle=angle], [taper=float], [taperCurve_FloatValue=float], [taperCurve_Interp=int], [taperCurve_Position=float], [thickness=float], [translate=[linear, linear, linear]], [translateX=linear], [translateY=linear], [translateZ=linear], [twist=angle], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Extrude faces.",
            "name": "polyExtrudeFacet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyExtrudeFacet([attraction=float], [caching=boolean], [constructionHistory=boolean], [createCurve=boolean], [divisions=int], [gain=float], [gravity=[linear, linear, linear]], [gravityX=linear], [gravityY=linear], [gravityZ=linear], [inputCurve=name], [keepFacesTogether=boolean], [keepFacetTogether=boolean], [localCenter=int], [localDirection=[linear, linear, linear]], [localDirectionX=linear], [localDirectionY=linear], [localDirectionZ=linear], [localRotate=[angle, angle, angle]], [localRotateX=angle], [localRotateY=angle], [localRotateZ=angle], [localScale=[float, float, float]], [localScaleX=float], [localScaleY=float], [localScaleZ=float], [localTranslate=[linear, linear, linear]], [localTranslateX=linear], [localTranslateY=linear], [localTranslateZ=linear], [magnX=linear], [magnY=linear], [magnZ=linear], [magnet=[linear, linear, linear]], [name=string], [nodeState=int], [offset=float], [pivot=[linear, linear, linear]], [pivotX=linear], [pivotY=linear], [pivotZ=linear], [random=float], [reverseAllFaces=boolean], [rotate=[angle, angle, angle]], [rotateX=angle], [rotateY=angle], [rotateZ=angle], [scale=[float, float, float]], [scaleX=float], [scaleY=float], [scaleZ=float], [smoothingAngle=angle], [taper=float], [taperCurve_FloatValue=float], [taperCurve_Interp=int], [taperCurve_Position=float], [thickness=float], [translate=[linear, linear, linear]], [translateX=linear], [translateY=linear], [translateZ=linear], [twist=angle], [weight=float], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command that extrudes selected vertices outwards.",
            "name": "polyExtrudeVertex",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyExtrudeVertex([caching=boolean], [constructionHistory=boolean], [divisions=int], [length=float], [name=string], [nodeState=int], [width=float], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command to flip the edges shared by 2 adjacent triangles.",
            "name": "polyFlipEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyFlipEdge()"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Flip (mirror) the UVs (in texture space) of input polyFaces, about either the U or V axis.",
            "name": "polyFlipUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyFlipUV([caching=boolean], [constructionHistory=boolean], [createNewMap=boolean], [cutUV=boolean], [flipType=int], [insertBeforeDeformers=boolean], [local=boolean], [name=string], [nodeState=int], [pivotU=float], [pivotV=float], [usePivot=boolean], [uvSetName=string], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "A set of functionalities can be called through this command.",
            "name": "polyForceUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "true/false",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyForceUV([cameraProjection=boolean], [createNewMap=boolean], [flipHorizontal=boolean], [flipVertical=boolean], [g=boolean], [local=boolean], [normalize=string], [numItems=uint], [preserveAspectRatio=boolean], [unitize=boolean], [unshare=boolean], [uvSetName=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command performs a render sampling of surface color and transparency for each selected vertex or face and stores the sampled data as either the color value, or uses the sampled data to displace the affected vertices or faces by a sampled data value.",
            "name": "polyGeoSampler",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyGeoSampler([alphaBlend=string], [averageColor=boolean], [clampAlphaMax=float], [clampAlphaMin=float], [clampRGBMax=[float, float, float]], [clampRGBMin=[float, float, float]], [colorBlend=string], [colorDisplayOption=boolean], [computeShadows=boolean], [displaceGeometry=boolean], [flatShading=boolean], [ignoreDoubleSided=boolean], [lightingOnly=boolean], [reuseShadows=boolean], [sampleByFace=boolean], [scaleFactor=float], [shareUV=boolean], [useLightShadows=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The polyHelix command creates a new polygonal helix.",
            "name": "polyHelix",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyHelix([caching=boolean], [coils=float], [constructionHistory=boolean], [createUVs=int], [direction=int], [height=linear], [name=string], [nodeState=int], [object=boolean], [radius=linear], [roundCap=boolean], [subdivisionsAxis=int], [subdivisionsCaps=int], [subdivisionsCoil=int], [texture=int], [useOldInitBehaviour=boolean], [width=linear])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command to set and clear holes on given faces.",
            "name": "polyHole",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyHole([assignHole=boolean], [createHistory=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command queries topological information on polygonal objects and components.",
            "name": "polyInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Components",
                    "type": "string"
                }
            ],
            "synopsis": "polyInfo([edgeToFace=boolean], [edgeToVertex=boolean], [faceNormals=boolean], [faceToEdge=boolean], [faceToVertex=boolean], [invalidEdges=boolean], [invalidVertices=boolean], [laminaFaces=boolean], [nonManifoldEdges=boolean], [nonManifoldUVEdges=boolean], [nonManifoldUVs=boolean], [nonManifoldVertices=boolean], [vertexToEdge=boolean], [vertexToFace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Installs/uninstalls several things to help the user to perform the specified action : \n\n- Pickmask\n- Internal selection constraints\n- Display attributes.",
            "name": "polyInstallAction",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "When installing constraint, returns as an array of strings the items on which the installed command will act on. otherwise, returns nothing",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyInstallAction( name , [commandName=boolean], [convertSelection=boolean], [installConstraint=boolean], [installDisplay=boolean], [keepInstances=boolean], [uninstallConstraint=boolean], [uninstallDisplay=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Move UVs in the texture plane to avoid overlaps.",
            "name": "polyLayoutUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyLayoutUV([caching=boolean], [constructionHistory=boolean], [flipReversed=boolean], [layout=int], [layoutMethod=int], [name=string], [nodeState=int], [percentageSpace=float], [rotateForBestFit=int], [scale=int], [separate=int], [uvSetName=string], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command converts poly components from one or more types to another one or more types, and returns the list of the conversion.",
            "name": "polyListComponentConversion",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of poly components",
                    "type": "selectionItem[]"
                }
            ],
            "synopsis": "polyListComponentConversion( selectionItem[] , [border=boolean], [fromEdge=boolean], [fromFace=boolean], [fromUV=boolean], [fromVertex=boolean], [fromVertexFace=boolean], [internal=boolean], [toEdge=boolean], [toFace=boolean], [toUV=boolean], [toVertex=boolean], [toVertexFace=boolean], [uvShell=boolean], [vertexFaceAllEdges=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Cut along edges of the texture mapping.",
            "name": "polyMapCut",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMapCut([caching=boolean], [constructionHistory=boolean], [moveratio=float], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Deletes texture coordinates (UVs) from selected faces.",
            "name": "polyMapDel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMapDel([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Sew border edges in texture space.",
            "name": "polyMapSew",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMapSew([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command can be used to Move and Sew together separate UV pieces along geometric edges.",
            "name": "polyMapSewMove",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMapSewMove([caching=boolean], [constructionHistory=boolean], [limitPieceSize=boolean], [name=string], [nodeState=int], [numberFaces=int], [uvSetName=string], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Sews two border edges together.",
            "name": "polyMergeEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMergeEdge([caching=boolean], [constructionHistory=boolean], [firstEdge=int], [mergeMode=int], [mergeTexture=boolean], [name=string], [nodeState=int], [secondEdge=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Sews two border edges together.",
            "name": "polyMergeEdgeCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMergeEdgeCtx([activeNodes=boolean], [caching=boolean], [constructionHistory=boolean], [exists=boolean], [firstEdge=int], [image1=string], [image2=string], [image3=string], [immediate=boolean], [mergeMode=int], [mergeTexture=boolean], [name=string], [nodeState=int], [previous=boolean], [reset=boolean], [secondEdge=int], [toolNode=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The second face becomes a hole in the first face.",
            "name": "polyMergeFacet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMergeFacet([caching=boolean], [constructionHistory=boolean], [firstFacet=int], [mergeMode=int], [name=string], [nodeState=int], [secondFacet=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The second face becomes a hole in the first face.",
            "name": "polyMergeFacetCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMergeFacetCtx([activeNodes=boolean], [caching=boolean], [constructionHistory=boolean], [exists=boolean], [firstFacet=int], [image1=string], [image2=string], [image3=string], [immediate=boolean], [mergeMode=int], [name=string], [nodeState=int], [previous=boolean], [reset=boolean], [secondFacet=int], [toolNode=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Merge UVs of an object based on their distance.",
            "name": "polyMergeUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMergeUV([caching=boolean], [constructionHistory=boolean], [distance=float], [name=string], [nodeState=int], [uvSetName=string], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Merge vertices within a given threshold.",
            "name": "polyMergeVertex",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMergeVertex([alwaysMergeTwoVertices=boolean], [caching=boolean], [constructionHistory=boolean], [distance=linear], [mergeToComponents=string], [name=string], [nodeState=int], [texture=boolean], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Mirror all the faces of the selected object.",
            "name": "polyMirrorFace",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMirrorFace([axis=int], [axisDirection=int], [caching=boolean], [constructionHistory=boolean], [direction=int], [mergeMode=int], [mergeThreshold=linear], [mergeThresholdType=int], [mirrorAxis=int], [mirrorPosition=linear], [name=string], [nodeState=int], [pivot=[linear, linear, linear]], [pivotX=linear], [pivotY=linear], [pivotZ=linear], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Modifies edges of a polygonal object.",
            "name": "polyMoveEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMoveEdge([caching=boolean], [constructionHistory=boolean], [gain=float], [localCenter=int], [localDirection=[linear, linear, linear]], [localDirectionX=linear], [localDirectionY=linear], [localDirectionZ=linear], [localRotate=[angle, angle, angle]], [localRotateX=angle], [localRotateY=angle], [localRotateZ=angle], [localScale=[float, float, float]], [localScaleX=float], [localScaleY=float], [localScaleZ=float], [localTranslate=[linear, linear, linear]], [localTranslateX=linear], [localTranslateY=linear], [localTranslateZ=linear], [name=string], [nodeState=int], [pivot=[linear, linear, linear]], [pivotX=linear], [pivotY=linear], [pivotZ=linear], [random=float], [rotate=[angle, angle, angle]], [rotateX=angle], [rotateY=angle], [rotateZ=angle], [scale=[float, float, float]], [scaleX=float], [scaleY=float], [scaleZ=float], [translate=[linear, linear, linear]], [translateX=linear], [translateY=linear], [translateZ=linear], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Modifies facet of a polygonal object.",
            "name": "polyMoveFacet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMoveFacet([attraction=float], [caching=boolean], [constructionHistory=boolean], [gain=float], [gravity=[linear, linear, linear]], [gravityX=linear], [gravityY=linear], [gravityZ=linear], [localCenter=int], [localDirection=[linear, linear, linear]], [localDirectionX=linear], [localDirectionY=linear], [localDirectionZ=linear], [localRotate=[angle, angle, angle]], [localRotateX=angle], [localRotateY=angle], [localRotateZ=angle], [localScale=[float, float, float]], [localScaleX=float], [localScaleY=float], [localScaleZ=float], [localTranslate=[linear, linear, linear]], [localTranslateX=linear], [localTranslateY=linear], [localTranslateZ=linear], [magnX=linear], [magnY=linear], [magnZ=linear], [magnet=[linear, linear, linear]], [name=string], [nodeState=int], [offset=float], [pivot=[linear, linear, linear]], [pivotX=linear], [pivotY=linear], [pivotZ=linear], [random=float], [rotate=[angle, angle, angle]], [rotateX=angle], [rotateY=angle], [rotateZ=angle], [scale=[float, float, float]], [scaleX=float], [scaleY=float], [scaleZ=float], [translate=[linear, linear, linear]], [translateX=linear], [translateY=linear], [translateZ=linear], [weight=float], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Modifies the map by moving all UV values associated with the selected face(s).",
            "name": "polyMoveFacetUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMoveFacetUV([axisLen=[float, float]], [axisLenX=float], [axisLenY=float], [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [pivot=[float, float]], [pivotU=float], [pivotV=float], [random=float], [rotationAngle=angle], [scale=[float, float]], [scaleU=float], [scaleV=float], [translate=[float, float]], [translateU=float], [translateV=float])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Moves selected UV coordinates in 2D space.",
            "name": "polyMoveUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMoveUV([axisLen=[float, float]], [axisLenX=float], [axisLenY=float], [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [pivot=[float, float]], [pivotU=float], [pivotV=float], [random=float], [rotationAngle=angle], [scale=[float, float]], [scaleU=float], [scaleV=float], [translate=[float, float]], [translateU=float], [translateV=float])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Modifies vertices of a polygonal object.",
            "name": "polyMoveVertex",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyMoveVertex([caching=boolean], [constructionHistory=boolean], [gain=float], [localDirection=[linear, linear, linear]], [localDirectionX=linear], [localDirectionY=linear], [localDirectionZ=linear], [localTranslate=[linear, linear, linear]], [localTranslateX=linear], [localTranslateY=linear], [localTranslateZ=linear], [name=string], [nodeState=int], [pivot=[linear, linear, linear]], [pivotX=linear], [pivotY=linear], [pivotZ=linear], [random=float], [rotate=[angle, angle, angle]], [rotateX=angle], [rotateY=angle], [rotateZ=angle], [scale=[float, float, float]], [scaleX=float], [scaleY=float], [scaleZ=float], [translate=[linear, linear, linear]], [translateX=linear], [translateY=linear], [translateZ=linear], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "place the UVs of the selected polygonal objects so that they do not overlap.",
            "name": "polyMultiLayoutUV",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyMultiLayoutUV([flipReversed=boolean], [gridU=int], [gridV=int], [layout=int], [layoutMethod=int], [offsetU=float], [offsetV=float], [percentageSpace=float], [prescale=int], [rotateForBestFit=int], [scale=int], [sizeU=float], [sizeV=float], [uvSetName=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Control the normals of an object.",
            "name": "polyNormal",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyNormal([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [normalMode=int], [userNormalMode=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Normalizes the UVs of input polyFaces.",
            "name": "polyNormalizeUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyNormalizeUV([caching=boolean], [centerOnTile=boolean], [constructionHistory=boolean], [createNewMap=boolean], [insertBeforeDeformers=boolean], [name=string], [nodeState=int], [normalizeDirection=int], [normalizeType=int], [preserveAspectRatio=boolean], [uvSetName=string], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command associates normal(x, y, z) with vertices on polygonal objects.",
            "name": "polyNormalPerVertex",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyNormalPerVertex([allLocked=boolean], [deformable=boolean], [freezeNormal=boolean], [normalX=float], [normalXYZ=[float, float, float]], [normalY=float], [normalZ=float], [relative=boolean], [unFreezeNormal=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Changes the global display polygonal attributes.",
            "name": "polyOptions",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyOptions([activeObjects=boolean], [allEdges=boolean], [backCullVertex=boolean], [backCulling=boolean], [colorMaterialChannel=string], [colorShadedDisplay=boolean], [displayAlphaAsGreyScale=boolean], [displayBlueChannel=boolean], [displayBorder=boolean], [displayCenter=boolean], [displayColorAsGreyScale=boolean], [displayCreaseEdge=boolean], [displayCreaseVertex=boolean], [displayGeometry=boolean], [displayGreenChannel=boolean], [displayInvisibleFaces=boolean], [displayItemNumbers=[boolean, boolean, boolean, boolean]], [displayMapBorder=boolean], [displayMetadata=[boolean, boolean, boolean]], [displayNormal=boolean], [displayRedChannel=boolean], [displaySubdComps=boolean], [displayTangent=boolean], [displayTriangle=boolean], [displayUVTopology=boolean], [displayUVs=boolean], [displayVertex=boolean], [displayWarp=boolean], [facet=boolean], [fullBack=boolean], [gl=boolean], [hardBack=boolean], [hardEdge=boolean], [hardEdgeColor=boolean], [materialBlend=string], [newPolymesh=boolean], [point=boolean], [pointFacet=boolean], [relative=boolean], [reuseTriangles=boolean], [sizeBorder=float], [sizeNormal=float], [sizeUV=float], [sizeVertex=float], [smoothDrawType=int], [softEdge=boolean], [vertexNormalMethod=int], [wireBackCulling=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Optimizes selected UVs.",
            "name": "polyOptUvs",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyOptUvs( selectionList , [applyToShell=boolean], [areaWeight=float], [caching=boolean], [constructionHistory=boolean], [globalBlend=float], [globalMethodBlend=float], [iterations=int], [name=string], [nodeState=int], [optimizeAxis=int], [pinSelected=boolean], [pinUvBorder=boolean], [scale=float], [stoppingThreshold=float], [useScale=boolean], [uvSetName=string], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Dumps a description of internal memory representation of poly objects.",
            "name": "polyOutput",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyOutput( poly poly... , [allValues=boolean], [color=boolean], [colorDesc=boolean], [edge=boolean], [edgeFace=boolean], [face=boolean], [faceNorm=boolean], [force=boolean], [group=boolean], [noOutput=boolean], [normDesc=boolean], [outputFile=string], [triangle=boolean], [uvDesc=boolean], [uvValue=boolean], [vert=boolean], [vertEdge=boolean], [vertNorm=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command is used to pin and unpin UVs.",
            "name": "polyPinUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyPinUV([createHistory=boolean], [operation=uint], [unpinned=boolean], [uvSetName=string], [value=float])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The polyPipe command creates a new polygonal pipe.",
            "name": "polyPipe",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyPipe([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [createUVs=boolean], [height=linear], [name=string], [nodeState=int], [object=boolean], [radius=linear], [roundCap=boolean], [subdivisionsAxis=int], [subdivisionsCaps=int], [subdivisionsHeight=int], [texture=boolean], [thickness=linear])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "TpolyProjCmdBase is a base class for the command to create a mapping on the selected polygonal faces.",
            "name": "polyPlanarProjection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyPlanarProjection([caching=boolean], [constructionHistory=boolean], [createNewMap=boolean], [imageCenter=[float, float]], [imageCenterX=float], [imageCenterY=float], [imageScale=[float, float]], [imageScaleU=float], [imageScaleV=float], [insertBeforeDeformers=boolean], [keepImageRatio=boolean], [mapDirection=string], [name=string], [nodeState=int], [perInstance=boolean], [projectionCenter=[linear, linear, linear]], [projectionCenterX=linear], [projectionCenterY=linear], [projectionCenterZ=linear], [projectionHeight=linear], [projectionHorizontalSweep=linear], [projectionScale=[linear, linear]], [rotate=[angle, angle, angle]], [rotateX=angle], [rotateY=angle], [rotateZ=angle], [rotationAngle=angle], [seamCorrect=boolean], [smartFit=boolean], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Create a new polygonal plane.",
            "name": "polyPlane",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyPlane([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [createUVs=int], [height=linear], [name=string], [nodeState=int], [object=boolean], [subdivisionsHeight=int], [subdivisionsWidth=int], [subdivisionsX=int], [subdivisionsY=int], [texture=int], [width=linear])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The polyPlatonicSolid command creates a new polygonal platonic solid.",
            "name": "polyPlatonicSolid",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyPlatonicSolid([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [createUVs=int], [name=string], [nodeState=int], [object=boolean], [radius=linear], [sideLength=linear], [solidType=int], [texture=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Introduces a new vertex in the middle of the selected face, and connects it to the rest of the vertices of the face.",
            "name": "polyPoke",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name",
                    "type": "string"
                }
            ],
            "synopsis": "polyPoke( selectionList , [caching=boolean], [constructionHistory=boolean], [localTranslate=[linear, linear, linear]], [localTranslateX=linear], [localTranslateY=linear], [localTranslateZ=linear], [name=string], [nodeState=int], [translate=[linear, linear, linear]], [translateX=linear], [translateY=linear], [translateZ=linear], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Create a polygon primative.",
            "name": "polyPrimitive",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyPrimitive([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [createUVs=int], [name=string], [nodeState=int], [object=boolean], [polyType=int], [radius=linear], [sideLength=linear], [texture=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The prism command creates a new polygonal prism.",
            "name": "polyPrism",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyPrism([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [createUVs=int], [length=linear], [name=string], [nodeState=int], [numberOfSides=int], [numderOfSides=int], [object=boolean], [sideLength=linear], [subdivisionsCaps=int], [subdivisionsHeight=int], [texture=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The polyProjectCurve command creates curves by projecting a selected curve onto a selected poly mesh.",
            "name": "polyProjectCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyProjectCurve( curve poly , [addUnderTransform=boolean], [caching=boolean], [direction=[linear, linear, linear]], [directionX=linear], [directionY=linear], [directionZ=linear], [nodeState=int], [tolerance=linear])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Creates a mapping on the selected polygonal faces.",
            "name": "polyProjection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of node created",
                    "type": "string"
                }
            ],
            "synopsis": "polyProjection([constructionHistory=boolean], [createNewMap=boolean], [imageCenterX=float], [imageCenterY=float], [imageScaleU=float], [imageScaleV=float], [insertBeforeDeformers=boolean], [keepImageRatio=boolean], [mapDirection=string], [projectionCenterX=float], [projectionCenterY=float], [projectionCenterZ=float], [projectionScaleU=float], [projectionScaleV=float], [rotateX=float], [rotateY=float], [rotateZ=float], [rotationAngle=float], [seamCorrect=boolean], [smartFit=boolean], [type=string], [uvSetName=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The pyramid command creates a new polygonal pyramid.",
            "name": "polyPyramid",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyPyramid([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [createUVs=int], [name=string], [nodeState=int], [numberOfSides=int], [numderOfSides=int], [object=boolean], [sideLength=linear], [subdivisionsCaps=int], [subdivisionsHeight=int], [texture=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Merges selected triangles of a polygonal object into four-sided faces.",
            "name": "polyQuad",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyQuad([angle=angle], [caching=boolean], [constructionHistory=boolean], [keepGroupBorder=boolean], [keepHardEdges=boolean], [keepTextureBorders=boolean], [name=string], [nodeState=int], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command query's blindData associated with particular polygonal components.",
            "name": "polyQueryBlindData",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Blind data",
                    "type": "string"
                }
            ],
            "synopsis": "polyQueryBlindData([associationType=string], [binaryData=string], [booleanData=boolean], [doubleData=float], [intData=int], [longDataName=string], [maxValue=float], [minValue=float], [shortDataName=string], [showComp=boolean], [stringData=string], [subString=string], [typeId=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Simplify a polygonal object by reducing geometry while preserving the overall shape of the mesh.",
            "name": "polyReduce",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyReduce([caching=boolean], [cachingReduce=boolean], [colorWeights=float], [compactness=float], [constructionHistory=boolean], [geomWeights=float], [invertVertexWeights=boolean], [keepBorder=boolean], [keepBorderWeight=float], [keepColorBorder=boolean], [keepColorBorderWeight=float], [keepCreaseEdge=boolean], [keepCreaseEdgeWeight=float], [keepFaceGroupBorder=boolean], [keepFaceGroupBorderWeight=float], [keepHardEdge=boolean], [keepHardEdgeWeight=float], [keepMapBorder=boolean], [keepMapBorderWeight=float], [keepOriginalVertices=boolean], [keepQuadsWeight=float], [name=string], [nodeState=int], [percentage=float], [preserveLocation=boolean], [preserveTopology=boolean], [replaceOriginal=boolean], [sharpness=float], [symmetryPlaneW=float], [symmetryPlaneX=float], [symmetryPlaneY=float], [symmetryPlaneZ=float], [symmetryTolerance=float], [termination=int], [triangleCount=int], [triangulate=boolean], [useVirtualSymmetry=int], [uvWeights=float], [version=int], [vertexCount=int], [vertexMapName=string], [vertexWeightCoefficient=float], [weightCoefficient=float])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Triangulates, then remeshes the given mesh through edge splitting and collapsing.",
            "name": "polyRemesh",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyRemesh([caching=boolean], [collapseThreshold=float], [constructionHistory=boolean], [interpolationType=int], [maxEdgeLength=float], [name=string], [nodeState=int], [smoothStrength=float], [tessellateBorders=boolean], [useRelativeValues=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Retopologize a polygonial surface.",
            "name": "polyRetopo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyRetopo()"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command makes different types of poly component selections.",
            "name": "polySelect",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of selected components.",
                    "type": "int[]"
                }
            ],
            "synopsis": "polySelect([add=boolean], [addFirst=boolean], [asSelectString=boolean], [deselect=boolean], [edgeBorder=uint], [edgeBorderPath=[int, int]], [edgeBorderPattern=[int, int]], [edgeLoop=uint], [edgeLoopOrBorder=uint], [edgeLoopOrBorderPattern=[int, int]], [edgeLoopPath=[int, int]], [edgeLoopPattern=[int, int]], [edgeRing=uint], [edgeRingPath=[int, int]], [edgeRingPattern=[int, int]], [edgeUVLoopOrBorder=uint], [everyN=uint], [extendToShell=uint], [noSelection=boolean], [replace=boolean], [shortestEdgePath=[int, int]], [shortestEdgePathUV=[int, int]], [shortestFacePath=[int, int]], [toggle=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Changes the global polygonal selection constraints.",
            "name": "polySelectConstraint",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polySelectConstraint([angle=int], [anglePropagation=boolean], [angleTolerance=float], [anglebound=[angle, angle]], [border=boolean], [borderPropagation=boolean], [convexity=int], [crease=boolean], [disable=boolean], [dist=int], [distaxis=[float, float, float]], [distbound=[float, float]], [distpoint=[float, float, float]], [edgeDistance=uint], [geometricarea=int], [geometricareabound=[float, float]], [holes=int], [length=int], [lengthbound=[float, float]], [loopPropagation=boolean], [max2dAngle=float], [max3dAngle=float], [mode=int], [nonmanifold=int], [oppositeEdges=boolean], [order=int], [orderbound=[int, int]], [orient=int], [orientaxis=[float, float, float]], [orientbound=[float, float]], [planarity=int], [propagate=int], [random=int], [randomratio=float], [returnSelection=boolean], [ringPropagation=boolean], [shell=boolean], [size=int], [smoothness=int], [stateString=boolean], [textured=int], [texturedarea=int], [texturedareabound=[float, float]], [textureshared=int], [topology=int], [type=int], [uvBorderSelection=boolean], [uvConstraint=boolean], [uvEdgeLoopPropagation=boolean], [uvEdgeRingPropagation=boolean], [uvFaceOrientation=int], [uvShell=boolean], [visibility=int], [visibilityangle=angle], [visibilitypoint=[float, float, float]], [where=int], [wholeSensitive=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Manage the window to display/edit the polygonal selection constraint parameters.",
            "name": "polySelectConstraintMonitor",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polySelectConstraintMonitor( string , [changeCommand=[string, string]], [create=boolean], [delete=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a new context to select polygon components.",
            "name": "polySelectCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polySelectCtx([exists=boolean], [image1=string], [image2=string], [image3=string], [mode=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a new context to select and edit polygonal objects.",
            "name": "polySelectEditCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The context name",
                    "type": "string"
                }
            ],
            "synopsis": "polySelectEditCtx([absoluteOffset=boolean], [adjustEdgeFlow=float], [autoComplete=boolean], [deleteEdge=boolean], [divisions=int], [endVertexOffset=float], [exists=boolean], [fixQuads=boolean], [image1=string], [image2=string], [image3=string], [insertWithEdgeFlow=boolean], [mode=int], [smoothingAngle=angle], [splitType=int], [startVertexOffset=float], [useEqualMultiplier=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command creates new objects from the given poly.",
            "name": "polySeparate",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name(s) and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polySeparate( [poly] , [caching=boolean], [nodeState=int], [removeShells=boolean], [separateSpecificShell=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command takes selected polygonal vertices or vertex-faces and changes their normals.",
            "name": "polySetToFaceNormal",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "of the node name",
                    "type": "string"
                }
            ],
            "synopsis": "polySetToFaceNormal([setUserNormal=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Merge border edges within a given threshold.",
            "name": "polySewEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polySewEdge([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [texture=boolean], [tolerance=linear], [worldSpace=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Creates a new context to select shortest edge path between two vertices or UVs in the 3d viewport.",
            "name": "polyShortestPathCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyShortestPathCtx([exists=boolean], [image1=string], [image2=string], [image3=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Moves an edge loop selection along the edges connected to the sides of its vertices.",
            "name": "polySlideEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success value",
                    "type": "boolean"
                }
            ],
            "synopsis": "polySlideEdge([absolute=boolean], [direction=uint], [edgeDirection=float], [symmetry=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Smooth a polygonal object.",
            "name": "polySmooth",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polySmooth([caching=boolean], [constructionHistory=boolean], [continuity=float], [degree=int], [divisions=int], [divisionsPerEdge=int], [keepBorder=boolean], [keepHardEdge=boolean], [keepMapBorders=int], [keepSelectionBorder=boolean], [keepTesselation=boolean], [keepTessellation=boolean], [method=int], [name=string], [nodeState=int], [osdCreaseMethod=int], [osdFvarBoundary=int], [osdFvarPropagateCorners=boolean], [osdSmoothTriangles=boolean], [osdVertBoundary=int], [propagateEdgeHardness=boolean], [pushStrength=float], [roundness=float], [smoothUVs=boolean], [subdivisionLevels=int], [subdivisionType=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Selectively makes edges soft or hard.",
            "name": "polySoftEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the polySoftEdge node.",
                    "type": "string"
                }
            ],
            "synopsis": "polySoftEdge([angle=angle], [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The sphere command creates a new polygonal sphere.",
            "name": "polySphere",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polySphere([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [createUVs=int], [name=string], [nodeState=int], [object=boolean], [radius=linear], [subdivisionsAxis=int], [subdivisionsHeight=int], [subdivisionsX=int], [subdivisionsY=int], [texture=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "TpolyProjCmdBase is a base class for the command to create a mapping on the selected polygonal faces.",
            "name": "polySphericalProjection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polySphericalProjection([caching=boolean], [constructionHistory=boolean], [createNewMap=boolean], [imageCenter=[float, float]], [imageCenterX=float], [imageCenterY=float], [imageScale=[float, float]], [imageScaleU=float], [imageScaleV=float], [insertBeforeDeformers=boolean], [keepImageRatio=boolean], [mapDirection=string], [name=string], [nodeState=int], [perInstance=boolean], [projectionCenter=[linear, linear, linear]], [projectionCenterX=linear], [projectionCenterY=linear], [projectionCenterZ=linear], [projectionHorizontalSweep=linear], [projectionScale=[linear, linear]], [projectionScaleU=linear], [projectionScaleV=linear], [radius=linear], [rotate=[angle, angle, angle]], [rotateX=angle], [rotateY=angle], [rotateZ=angle], [rotationAngle=angle], [seamCorrect=boolean], [smartFit=boolean], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Split facets/edges of a polygonal object.",
            "name": "polySplit",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polySplit([adjustEdgeFlow=float], [constructionHistory=boolean], [detachEdges=boolean], [edgepoint=[int, float]], [facepoint=[int, float, float, float]], [insertWithEdgeFlow=boolean], [insertpoint=[int, float, [, float, float, ]]], [name=string], [projectedCurve=name], [projectedCurveTolerance=float], [smoothingangle=angle], [subdivision=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a new context to split facets on polygonal objects.",
            "name": "polySplitCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polySplitCtx([enablesnap=boolean], [exists=boolean], [image1=string], [image2=string], [image3=string], [magnetsnap=int], [precsnap=float], [smoothingangle=angle], [snaptoedge=boolean], [subdivision=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a new context to split facets on polygonal objects.",
            "name": "polySplitCtx2",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polySplitCtx2([adjustEdgeFlow=float], [constrainToEdges=boolean], [edgeMagnets=int], [exists=boolean], [image1=string], [image2=string], [image3=string], [insertWithEdgeFlow=boolean], [snapTolerance=float], [snappedToEdgeColor=[float, float, float]], [snappedToFaceColor=[float, float, float]], [snappedToMagnetColor=[float, float, float]], [snappedToVertexColor=[float, float, float]])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Split Edges.",
            "name": "polySplitEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polySplitEdge([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [operation=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Splits a series of ring edges of connected quads and inserts connecting edges between them.",
            "name": "polySplitRing",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polySplitRing([adjustEdgeFlow=float], [caching=boolean], [constructionHistory=boolean], [direction=boolean], [divisions=int], [enableProfileCurve=boolean], [fixQuads=boolean], [insertWithEdgeFlow=boolean], [name=string], [nodeState=int], [profileCurveInputOffset=float], [profileCurveInputScale=float], [profileCurve_FloatValue=float], [profileCurve_Interp=int], [profileCurve_Position=float], [rootEdge=int], [smoothingAngle=angle], [splitType=int], [useEqualMultiplier=boolean], [useFaceNormalsAtEnds=boolean], [weight=float], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Use this command to split one or more vertices.",
            "name": "polySplitVertex",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The polySplitVert node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polySplitVertex([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Move border UVs along a simple curve.",
            "name": "polyStraightenUVBorder",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name",
                    "type": "string"
                }
            ],
            "synopsis": "polyStraightenUVBorder( selectionList , [blendOriginal=float], [caching=boolean], [constructionHistory=boolean], [curvature=float], [gapTolerance=int], [name=string], [nodeState=int], [preserveLength=float], [uvSetName=string], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Subdivides an edge into two or more subedges.",
            "name": "polySubdivideEdge",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polySubdivideEdge([caching=boolean], [constructionHistory=boolean], [divisions=int], [name=string], [nodeState=int], [size=linear], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Subdivides a face into quads or triangles.",
            "name": "polySubdivideFacet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polySubdivideFacet([caching=boolean], [constructionHistory=boolean], [divisions=int], [divisionsU=int], [divisionsV=int], [mode=int], [name=string], [nodeState=int], [subdMethod=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "The torus command creates a new polygonal torus.",
            "name": "polyTorus",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyTorus([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [createUVs=boolean], [name=string], [nodeState=int], [object=boolean], [radius=linear], [sectionRadius=linear], [subdivisionsAxis=int], [subdivisionsHeight=int], [subdivisionsX=int], [subdivisionsY=int], [texture=boolean], [twist=angle])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "This command converts a polygon and produces a subd surface.",
            "name": "polyToSubdiv",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- the subdivision and optionally the dependency node name",
                    "type": "string"
                }
            ],
            "synopsis": "polyToSubdiv( [poly] , [absolutePosition=boolean], [addUnderTransform=boolean], [applyMatrixToResult=boolean], [caching=boolean], [constructionHistory=boolean], [maxEdgesPerVert=int], [maxPolyCount=int], [name=string], [nodeState=int], [object=boolean], [preserveVertexOrdering=boolean], [quickConvert=boolean], [uvPoints=[float, float]], [uvPointsU=float], [uvPointsV=float], [uvTreatment=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Transfer information from one polygonal object to another one.",
            "name": "polyTransfer",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "representing the node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyTransfer([alternateObject=string], [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [uvSets=boolean], [vertexColor=boolean], [vertices=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Triangulation breaks polygons down into triangles, ensuring that all faces are planar and non-holed.",
            "name": "polyTriangulate",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyTriangulate([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command creates a new poly as an union of a list of polys If no objects are specified in the command line, then the objects from the active list are used.",
            "name": "polyUnite",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyUnite( poly poly [poly ...] , [caching=boolean], [centerPivot=boolean], [mergeUVSets=int], [nodeState=int], [objectPivot=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "Command to combine poly mesh objects (as polyUnite) while retaining the smooth skinning setup on the combined object.",
            "name": "polyUniteSkinned",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "polyUniteSkinned([centerPivot=boolean], [constructionHistory=boolean], [mergeUVSets=int], [objectPivot=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Return the UV space coverage of the specified components.",
            "name": "polyUVCoverage",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "UV space coverage percentage",
                    "type": "float[]"
                }
            ],
            "synopsis": "polyUVCoverage( selectionItem[] , [uvRange=[float, float, float, float]])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Return the required result on the specified components.",
            "name": "polyUVOverlap",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of poly components",
                    "type": "selectionItem[]"
                }
            ],
            "synopsis": "polyUVOverlap( selectionItem[] , [nonOverlappingComponents=boolean], [overlappingComponents=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Given two vertices, does one of the following: 1) If the vertices define opposite corners of a rectangular area of quads, assigns a grid of UVs spanning the 0-1 area to that rectangle.",
            "name": "polyUVRectangle",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyUVRectangle([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command to do the following to uv sets: - delete an existing uv set.",
            "name": "polyUVSet",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "polyUVSet([allUVSets=boolean], [allUVSetsIndices=boolean], [allUVSetsWithCount=boolean], [copy=boolean], [create=boolean], [currentLastUVSet=boolean], [currentPerInstanceUVSet=boolean], [currentUVSet=boolean], [delete=boolean], [genNewUVSet=boolean], [newUVSet=string], [perInstance=boolean], [projections=boolean], [rename=boolean], [reorder=boolean], [shareInstances=boolean], [unshared=boolean], [uvSet=string])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Stack Similar UV Shells.",
            "name": "polyUVStackSimilarShells",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "UVs of stacked UV Shells or target UV shells.",
                    "type": "string[]"
                }
            ],
            "synopsis": "polyUVStackSimilarShells( selectionItem[] , [onlyMatch=boolean], [tolerance=float])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Extrude faces about an axis.",
            "name": "polyWedgeFace",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "polyWedgeFace([axis=[float, float, float]], [caching=boolean], [center=[float, float, float]], [constructionHistory=boolean], [divisions=int], [edge=int], [name=string], [nodeState=int], [wedgeAngle=angle], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "This command creates a popup menu and attaches it to the current control if no parent is specified.",
            "name": "popupMenu",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the menu.",
                    "type": "string"
                }
            ],
            "synopsis": "popupMenu( string , [allowOptionBoxes=boolean], [altModifier=boolean], [button=int], [ctrlModifier=boolean], [defineTemplate=string], [deleteAllItems=boolean], [exists=boolean], [itemArray=boolean], [markingMenu=boolean], [numberOfItems=boolean], [parent=string], [postMenuCommand=script], [postMenuCommandOnce=boolean], [shiftModifier=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command is used to create character poses.",
            "name": "pose",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Pose name",
                    "type": "string"
                }
            ],
            "synopsis": "pose([allPoses=boolean], [apply=boolean], [name=string])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates an editor that derives from the base editor class that has controls for deformer and control nodes.",
            "name": "poseEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the editor",
                    "type": "string"
                }
            ],
            "synopsis": "poseEditor( string , [control=boolean], [defineTemplate=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [highlightConnection=string], [lockMainConnection=boolean], [mainListConnection=string], [panel=string], [parent=string], [selectionConnection=string], [stateString=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates a panel that derives from the base panel class that houses a poseEditor.",
            "name": "posePanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the panel",
                    "type": "string"
                }
            ],
            "synopsis": "posePanel( string , [control=boolean], [copy=string], [createString=boolean], [defineTemplate=string], [docTag=string], [editString=boolean], [exists=boolean], [init=boolean], [isUnique=boolean], [label=string], [menuBarRepeatLast=boolean], [menuBarVisible=boolean], [needsInit=boolean], [parent=string], [popupMenuProcedure=script], [poseEditor=boolean], [replacePanel=string], [tearOff=boolean], [tearOffCopy=string], [tearOffRestore=boolean], [unParent=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Command to set the preferred renderer.",
            "name": "preferredRenderer",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "preferredRenderer([string], [fallback=string], [makeCurrent=boolean])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This creates an editor for managing which references will be read in (loaded) and which deferred (unloaded) upon opening a file.",
            "name": "preloadRefEd",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of editor",
                    "type": "string"
                }
            ],
            "synopsis": "preloadRefEd([control=boolean], [defineTemplate=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [highlightConnection=string], [lockMainConnection=boolean], [mainListConnection=string], [panel=string], [parent=string], [selectCommand=script], [selectFileNode=boolean], [selectionConnection=string], [stateString=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command is used to register, manage and invoke render traversals.",
            "name": "prepareRender",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "prepareRender([defaultTraversalSet=string], [deregister=string], [invokePostRender=boolean], [invokePostRenderFrame=boolean], [invokePostRenderLayer=boolean], [invokePreRender=boolean], [invokePreRenderFrame=boolean], [invokePreRenderLayer=boolean], [invokeSettingsUI=boolean], [label=string], [listTraversalSets=boolean], [postRender=script], [postRenderFrame=script], [postRenderLayer=script], [preRender=script], [preRenderFrame=script], [preRenderLayer=script], [restore=boolean], [saveAssemblyConfig=boolean], [settingsUI=script], [setup=boolean], [traversalSet=string], [traversalSetInit=script])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The profiler is used to record timing information from key events within Maya, as an aid in tuning the performance of scenes, scripts and plug-ins.",
            "name": "profiler",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "profiler([addCategory=string], [allCategories=boolean], [bufferSize=int], [categoryIndex=int], [categoryIndexToName=int], [categoryInfo=string], [categoryName=string], [categoryNameToIndex=string], [categoryRecording=boolean], [clearAllMelInstrumentation=boolean], [colorIndex=int], [eventCPUId=boolean], [eventCategory=boolean], [eventColor=boolean], [eventCount=boolean], [eventDescription=boolean], [eventDuration=boolean], [eventIndex=int], [eventName=boolean], [eventStartTime=boolean], [eventThreadId=boolean], [instrumentMel=boolean], [load=string], [output=string], [procedureDescription=string], [procedureName=string], [removeCategory=string], [reset=boolean], [sampling=boolean], [signalEvent=boolean], [signalMelEvent=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This script is intended to be used by the profilerPanel to interact with the profiler tool's view (draw region).",
            "name": "profilerTool",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "profilerTool([categoryView=boolean], [collapseSelectedEvents=boolean], [collapseSelectedEventsRepetition=boolean], [cpuView=boolean], [destroy=boolean], [eventTypes=boolean], [exists=boolean], [expandSelectedEvents=boolean], [expandSelectedEventsRepetition=boolean], [findNext=boolean], [findPrevious=boolean], [frameAll=boolean], [frameSelected=boolean], [isolateSegment=int], [make=boolean], [matchWholeWord=boolean], [searchEvent=string], [segmentCount=boolean], [showAllEvent=boolean], [showCriticalPath=boolean], [showHotspot=boolean], [showSelectedEvents=boolean], [showSelectedEventsRepetition=boolean], [threadView=boolean], [unisolateSegment=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Creates a progress bar control that graphically fills in as its progress value increases.",
            "name": "progressBar",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "progressBar( [string] , [annotation=string], [backgroundColor=[float, float, float]], [beginProgress=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [endProgress=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isCancelled=boolean], [isInterruptable=boolean], [isMainProgressBar=boolean], [isObscured=boolean], [manage=boolean], [maxValue=int], [minValue=int], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [progress=int], [status=string], [statusBarMessage=string], [step=int], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "The progressWindow command creates a window containing a status message, a graphical progress gauge, and optionally a \"Hit ESC to Cancel\" label for interruptable operations.",
            "name": "progressWindow",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Returns true if the window was successfully created, and false if the window could not be created (possibly because one is already showing).",
                    "type": "boolean"
                }
            ],
            "synopsis": "progressWindow([endProgress=boolean], [isCancelled=boolean], [isInterruptable=boolean], [maxValue=int], [minValue=int], [progress=int], [status=string], [step=int], [title=string])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The projectCurve command creates curves on surface where all selected curves project onto the selected surfaces.",
            "name": "projectCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "projectCurve( [curve] [surface] , [caching=boolean], [constructionHistory=boolean], [direction=[linear, linear, linear]], [directionX=linear], [directionY=linear], [directionZ=linear], [name=string], [nodeState=int], [object=boolean], [range=boolean], [tolerance=linear], [useNormal=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Set the context for projection manips.",
            "name": "projectionContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name.",
                    "type": "string"
                }
            ],
            "synopsis": "projectionContext([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Various commands to set the manipulator to interesting positions.",
            "name": "projectionManip",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "projectionManip([fitBBox=boolean], [projType=int], [switchType=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The project tangent command is used to align (for tangents) a curve to two other curves or a surface.",
            "name": "projectTangent",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "projectTangent( [curve] [[curve] [curve] | [surface]] , [caching=boolean], [constructionHistory=boolean], [curvature=boolean], [curvatureScale=linear], [ignoreEdges=boolean], [name=string], [nodeState=int], [object=boolean], [replaceOriginal=boolean], [reverseTangent=boolean], [rotate=angle], [tangentDirection=int], [tangentScale=linear])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "The promptDialog command creates a modal dialog with a message to the user, a text field in which the user may enter a response, and a variable number of buttons to dismiss the dialog.",
            "name": "promptDialog",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Indicates how the dialog was dismissed. If a button is pressed then the label of the button is returned. If the dialog is closed then the value for the flag `ds/dismissString` is returned.",
                    "type": "string"
                }
            ],
            "synopsis": "promptDialog([backgroundColor=[float, float, float]], [button=string], [cancelButton=string], [defaultButton=string], [dismissString=string], [message=string], [messageAlign=string], [parent=string], [scrollableField=boolean], [style=string], [text=string], [title=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Controls the proportional move context.",
            "name": "propModCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the new context created",
                    "type": "string"
                }
            ],
            "synopsis": "propModCtx( string , [animCurve=string], [animCurveFalloff=[float, float]], [animCurveParam=string], [direction=[float, float, float]], [exists=boolean], [image1=string], [image2=string], [image3=string], [linear=float], [linearParam=[float, float]], [nurbsCurve=string], [powerCutoff=float], [powerCutoffParam=[float, float]], [powerDegree=float], [powerDegreeParam=float], [script=string], [scriptParam=string], [type=int], [worldspace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "Performs a proportional translate, scale or rotate operation on any number of objects.",
            "name": "propMove",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "propMove( [objects] , [percent=float], [percentX=float], [percentY=float], [percentZ=float], [pivot=[float, float, float]], [rotate=[angle, angle, angle]], [scale=[float, float, float]], [translate=[linear, linear, linear]], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates a proximityWrap deformer, which deforms geometry based on the distance from its drivers.",
            "name": "proximityWrap",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the proximityWrap node name)",
                    "type": "string[]"
                }
            ],
            "synopsis": "proximityWrap( [objects] , [addDrivers=string], [applyUserDefaults=boolean], [canBeAdded=string], [driverIndices=boolean], [dumpInfo=boolean], [freeDriverIndex=boolean], [removeDrivers=string])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "Create a psdChannelOutliner control which is capable of displaying a tree structure upto one level.",
            "name": "psdChannelOutliner",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The full name of the psdChannelOutliner control",
                    "type": "string"
                }
            ],
            "synopsis": "psdChannelOutliner( string , [addChild=[string, string]], [allItems=boolean], [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [doubleClickCommand=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfItems=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [psdParent=string], [removeAll=boolean], [removeChild=string], [select=string], [selectCommand=string], [selectItem=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "Edits the existing PSD file.",
            "name": "psdEditTextureFile",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "psdEditTextureFile([addChannel=string], [addChannelColor=[string, float, float, float]], [addChannelImage=[string, string]], [deleteChannel=string], [psdFileName=string], [snapShotImage=string], [uvSnapPostionTop=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "Writes the Photoshop file layer set into different formats.",
            "name": "psdExport",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "psdExport([alphaChannelIdx=int], [bytesPerChannel=int], [emptyLayerSet=boolean], [format=string], [layerName=string], [layerSetName=string], [outFileName=string], [preMultiplyAlpha=boolean], [psdFileName=string])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "Creates a Photoshop file with UVSnap shot image and the layer set names as the input.",
            "name": "psdTextureFile",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "psdTextureFile([channelRGB=[string, uint, uint, uint, uint]], [channels=[string, uint, boolean]], [imageFileName=[string, string, uint]], [psdFileName=string], [snapShotImageName=string], [uvSnapPostionTop=boolean], [xResolution=uint], [yResolution=uint])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Queries a subdivision surface based on a set of query parameters and updates the selection list with the results.",
            "name": "querySubdiv",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "querySubdiv([action=int], [level=int], [relative=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command is used to exit the application.",
            "name": "quit",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "quit([abort=boolean], [exitCode=uint], [force=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "For each listed object, the command creates a new field.",
            "name": "radial",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "radial( selectionList , [attenuation=float], [magnitude=float], [maxDistance=linear], [name=string], [perVertex=boolean], [position=[linear, linear, linear]], [torusSectionRadius=linear], [type=float], [volumeExclusion=boolean], [volumeOffset=[linear, linear, linear]], [volumeShape=string], [volumeSweep=angle])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a radio button that is added to the most recently created radio collection if the `-cl/collection` flag is not used.",
            "name": "radioButton",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "radioButton( [string] , [align=string], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [collection=string], [data=int], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [offCommand=script], [onCommand=script], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [recomputeSize=boolean], [select=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "radioButtonGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "radioButtonGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [annotation1=string], [annotation2=string], [annotation3=string], [annotation4=string], [backgroundColor=[float, float, float]], [changeCommand=script], [changeCommand1=script], [changeCommand2=script], [changeCommand3=script], [changeCommand4=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [data1=int], [data2=int], [data3=int], [data4=int], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enable1=boolean], [enable2=boolean], [enable3=boolean], [enable4=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [label1=string], [label2=string], [label3=string], [label4=string], [labelAnnotation=string], [labelArray2=[string, string]], [labelArray3=[string, string, string]], [labelArray4=[string, string, string, string]], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [numberOfRadioButtons=int], [offCommand=script], [offCommand1=script], [offCommand2=script], [offCommand3=script], [offCommand4=script], [onCommand=script], [onCommand1=script], [onCommand2=script], [onCommand3=script], [onCommand4=script], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowAttach=[int, string, int]], [select=int], [shareCollection=string], [statusBarMessage=string], [useTemplate=string], [vertical=boolean], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a radio button collection.",
            "name": "radioCollection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the collection.",
                    "type": "string"
                }
            ],
            "synopsis": "radioCollection( [string] , [collectionItemArray=boolean], [defineTemplate=string], [exists=boolean], [gl=boolean], [numberOfCollectionItems=boolean], [parent=string], [select=string], [useTemplate=string])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "This command creates a radioMenuItemCollection.",
            "name": "radioMenuItemCollection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the collection.",
                    "type": "string"
                }
            ],
            "synopsis": "radioMenuItemCollection( [string] , [defineTemplate=string], [exists=boolean], [gl=boolean], [parent=string], [useTemplate=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command creates a control that displays an image representing the ramp node specified, and supports editing of that node.",
            "name": "rampColorPort",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the port created or modified",
                    "type": "string"
                }
            ],
            "synopsis": "rampColorPort( [string] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [node=name], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [selectedColorControl=string], [selectedInterpControl=string], [selectedPositionControl=string], [statusBarMessage=string], [useTemplate=string], [verticalLayout=boolean], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a control used for displaying and modifying the current playback range.",
            "name": "rangeControl",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of newly created rangeControl.",
                    "type": "string"
                }
            ],
            "synopsis": "rangeControl( name , [annotation=string], [backgroundColor=[float, float, float]], [changedCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [maxRange=time], [minRange=time], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int], [widthHeight=[int, int]])"
        },
        {
            "categories": [
                "Animation",
                "MoCap"
            ],
            "description": "This action reads a take (.",
            "name": "readTake",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "readTake([angle=string], [device=string], [frequency=float], [linear=string], [noTime=boolean], [take=string])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "This command rebuilds a curve by modifying its parameterization.",
            "name": "rebuildCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "rebuildCurve( curve [curve] , [caching=boolean], [constructionHistory=boolean], [degree=int], [endKnots=int], [fitRebuild=boolean], [keepControlPoints=boolean], [keepEndPoints=boolean], [keepRange=int], [keepTangents=boolean], [name=string], [nodeState=int], [object=boolean], [range=boolean], [rebuildType=int], [replaceOriginal=boolean], [smartSurfaceCurveRebuild=boolean], [spans=int], [tolerance=linear])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command rebuilds a surface by modifying its parameterization.",
            "name": "rebuildSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "rebuildSurface( surface [surface] , [caching=boolean], [constructionHistory=boolean], [degreeU=int], [degreeV=int], [direction=int], [endKnots=int], [fitRebuild=int], [keepControlPoints=boolean], [keepCorners=boolean], [keepRange=int], [name=string], [nodeState=int], [object=boolean], [polygon=int], [rebuildType=int], [replaceOriginal=boolean], [spansU=int], [spansV=int], [tolerance=linear])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command sets up an attribute to be recorded.",
            "name": "recordAttr",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "recordAttr([attribute=string], [delete=boolean])"
        },
        {
            "categories": [
                "Animation",
                "MoCap"
            ],
            "description": "Starts and stops server side device recording.",
            "name": "recordDevice",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "recordDevice([cleanup=boolean], [data=boolean], [device=string], [duration=int], [playback=boolean], [state=boolean], [wait=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Takes the most recently undone command from the undo list and redoes it.",
            "name": "redo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "redo()"
        },
        {
            "categories": [],
            "description": "",
            "name": "reference",
            "obsolete": true,
            "returnTypes": [],
            "synopsis": ""
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Use this command to remove and change the modifications which have been applied to references.",
            "name": "referenceEdit",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "referenceEdit([applyFailedEdits=boolean], [changeEditTarget=[string, string]], [editCommand=string], [failedEdits=boolean], [onReferenceNode=string], [removeEdits=boolean], [successfulEdits=boolean])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Use this command to find out information about references and referenced nodes.",
            "name": "referenceQuery",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "For query execution.",
                    "type": "string[]"
                }
            ],
            "synopsis": "referenceQuery([child=boolean], [dagPath=boolean], [editAttrs=boolean], [editCommand=string], [editNodes=boolean], [editStrings=boolean], [failedEdits=boolean], [filename=boolean], [isExportEdits=boolean], [isLoaded=boolean], [isNodeReferenced=boolean], [isPreviewOnly=boolean], [liveEdits=boolean], [namespace=boolean], [nodes=boolean], [onReferenceNode=string], [parent=boolean], [parentNamespace=boolean], [referenceNode=boolean], [shortName=boolean], [showDagPath=boolean], [showFullPath=boolean], [showNamespace=boolean], [successfulEdits=boolean], [topReference=boolean], [unresolvedName=boolean], [withoutCopyNumber=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Refines a subdivision surface set of components based on the selection list.",
            "name": "refineSubdivSelectionList",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "refineSubdivSelectionList()"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command is used to force a redraw during script execution.",
            "name": "refresh",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "refresh([currentView=boolean], [fileExtension=string], [filename=string], [force=boolean], [suspend=boolean])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "This command refreshes all cached attribute editor templates, including those copied from the standard AE.",
            "name": "refreshEditorTemplates",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "refreshEditorTemplates()"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to scale keyframes within the graph editor using the region select tool.",
            "name": "regionSelectKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Manip values, when queried",
                    "type": "float"
                }
            ],
            "synopsis": "regionSelectKeyCtx( contextName , [bottomManip=float], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [leftManip=float], [name=string], [rightManip=float], [topManip=float])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "This is primarily for use with file IO.",
            "name": "relationship",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "relationship([b=boolean], [relationshipData=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command reloads an xpm image from disk.",
            "name": "reloadImage",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "True if image is successfully loaded, false otherwise.",
                    "type": "boolean"
                }
            ],
            "synopsis": "reloadImage( string string )"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command restores a tool to its saved settings.",
            "name": "rememberCtxSettings",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "rememberCtxSettings( [string] )"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "This command will remove the selected joint or the joint given at the command line from the skeleton.",
            "name": "removeJoint",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "removeJoint( [object] )"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Removes a particular instance of a multiElement.",
            "name": "removeMultiInstance",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(true if the instance was removed, false if something went wrong, like the attribute is connected but -b true was not specified)",
                    "type": "boolean"
                }
            ],
            "synopsis": "removeMultiInstance( attribute , [allChildren=boolean], [b=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Renames the given object to have the new name.",
            "name": "rename",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The new name. When undone returns original name.",
                    "type": "string"
                }
            ],
            "synopsis": "rename( [object] string , [ignoreShape=boolean], [uuid=boolean])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Renames the given user-defined attribute to the name given in the string argument.",
            "name": "renameAttr",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The new name. When undone returns the original name.",
                    "type": "string"
                }
            ],
            "synopsis": "renameAttr()"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command renames the UI object passed as first arument to the new name specified as second argument.",
            "name": "renameUI",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The new name, or the old name if re-naming fails.",
                    "type": "string"
                }
            ],
            "synopsis": "renameUI( string string )"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "The render command is used to start off a MayaSoftware rendering session of the currently active camera.",
            "name": "render",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the rendered image.",
                    "type": "string"
                }
            ],
            "synopsis": "render( [camera] , [abortMissingTexture=boolean], [batch=boolean], [keepPreImage=boolean], [layer=string], [nglowpass=boolean], [nshadows=boolean], [replace=boolean], [xresolution=int], [yresolution=int])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Command to register renders.",
            "name": "renderer",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "renderer([string], [addGlobalsNode=string], [addGlobalsTab=[string, string, string]], [batchRenderOptionsProcedure=string], [batchRenderOptionsStringProcedure=string], [batchRenderProcedure=string], [cancelBatchRenderProcedure=string], [changeIprRegionProcedure=string], [commandRenderProcedure=string], [exists=boolean], [globalsNodes=boolean], [globalsTabCreateProcNames=boolean], [globalsTabLabels=boolean], [globalsTabUpdateProcNames=boolean], [iprOptionsMenuLabel=string], [iprOptionsProcedure=string], [iprOptionsSubMenuProcedure=string], [iprRenderProcedure=string], [iprRenderSubMenuProcedure=string], [isRunningIprProcedure=string], [logoCallbackProcedure=string], [logoImageName=string], [materialViewRendererList=boolean], [materialViewRendererPause=boolean], [materialViewRendererSuspend=boolean], [namesOfAvailableRenderers=boolean], [pauseIprRenderProcedure=string], [polyPrelightProcedure=string], [refreshIprRenderProcedure=string], [renderDiagnosticsProcedure=string], [renderGlobalsProcedure=string], [renderMenuProcedure=string], [renderOptionsProcedure=string], [renderProcedure=string], [renderRegionProcedure=string], [renderSequenceProcedure=string], [rendererUIName=string], [renderingEditorsSubMenuProcedure=string], [showBatchRenderLogProcedure=string], [showBatchRenderProcedure=string], [showRenderLogProcedure=string], [startIprRenderProcedure=string], [stopIprRenderProcedure=string], [supportColorManagement=boolean], [textureBakingProcedure=string], [unregisterRenderer=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command creates a new node in the dependency graph of the specified type.",
            "name": "renderGlobalsNode",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the new node.",
                    "type": "string"
                },
                {
                    "description": "The name of the render globals node",
                    "type": "string"
                }
            ],
            "synopsis": "renderGlobalsNode( string , [name=string], [parent=string], [renderQuality=string], [renderResolution=string], [shared=boolean], [skipSelect=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "The renderInfo commands sets geometric properties of surfaces of the selected object.",
            "name": "renderInfo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "renderInfo([castShadows=boolean], [chordHeight=float], [chordHeightRatio=float], [doubleSided=boolean], [edgeSwap=boolean], [minScreen=float], [name=string], [opposite=boolean], [smoothShading=boolean], [unum=int], [useChordHeight=boolean], [useChordHeightRatio=boolean], [useDefaultLights=boolean], [useMinScreen=boolean], [utype=int], [vnum=int], [vtype=int])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "Post process the results when rendering is done with.",
            "name": "renderLayerPostProcess",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "renderLayerPostProcess([keepImages=boolean], [sceneName=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command creates manipulators for cameras or lights.",
            "name": "renderManip",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "renderManip( object , [camera=[boolean, boolean, boolean, boolean, boolean]], [light=[boolean, boolean, boolean]], [spotLight=[boolean, boolean, boolean, boolean, boolean, boolean, boolean]], [state=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Set or query the model's current partition.",
            "name": "renderPartition",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The render partition",
                    "type": "string"
                }
            ],
            "synopsis": "renderPartition( string )"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "query information related with render passes.",
            "name": "renderPassRegistry",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "renderPassRegistry([channels=int], [isPassSupported=boolean], [passID=string], [passName=boolean], [renderer=string], [supportedChannelCounts=boolean], [supportedDataTypes=boolean], [supportedPassSemantics=boolean], [supportedRenderPassNames=boolean], [supportedRenderPasses=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command creates a new node in the dependency graph of the specified type.",
            "name": "renderQualityNode",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the new node.",
                    "type": "string"
                },
                {
                    "description": "The Name of the render quality node",
                    "type": "string"
                }
            ],
            "synopsis": "renderQualityNode( string , [name=string], [parent=string], [shared=boolean], [skipSelect=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Query interface to the common tab of the render settings.",
            "name": "renderSettings",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]"
                }
            ],
            "synopsis": "renderSettings([camera=string], [customTokenString=string], [firstImageName=boolean], [fullPath=boolean], [fullPathTemp=boolean], [genericFrameImageName=string], [imageGenericName=boolean], [lastImageName=boolean], [layer=string], [leaveUnmatchedTokens=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Toggle the updating of object thumbnails.",
            "name": "renderThumbnailUpdate",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "renderThumbnailUpdate( boolean , [forceUpdate=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Create a editor window that can receive the result of the rendering process.",
            "name": "renderWindowEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the editor",
                    "type": "string"
                }
            ],
            "synopsis": "renderWindowEditor( editorName , [autoResize=boolean], [blendMode=int], [caption=string], [changeCommand=[string, string, string, string]], [clear=[int, int, float, float, float]], [cmEnabled=boolean], [colorManage=boolean], [compDisplay=int], [compImageFile=string], [control=boolean], [currentCamera=string], [currentCameraRig=string], [defineTemplate=string], [displayImage=int], [displayImageViewCount=int], [displayStyle=string], [docTag=string], [doubleBuffer=boolean], [drawAxis=boolean], [editorName=boolean], [exists=boolean], [exposure=float], [filter=string], [forceMainConnection=string], [frameImage=boolean], [frameRegion=boolean], [gamma=float], [highlightConnection=string], [loadImage=string], [lockMainConnection=boolean], [mainListConnection=string], [marquee=[float, float, float, float]], [nbImages=boolean], [nextViewImage=boolean], [outputColorManage=boolean], [panel=string], [parent=string], [pcaption=string], [realSize=boolean], [refresh=boolean], [removeAllImages=boolean], [removeImage=boolean], [resetRegion=boolean], [resetViewImage=boolean], [saveImage=boolean], [scaleBlue=float], [scaleGreen=float], [scaleRed=float], [selectionConnection=string], [showRegion=[int, int]], [singleBuffer=boolean], [snapshot=[string, int, int]], [snapshotMode=boolean], [stateString=boolean], [stereo=int], [stereoImageOrientation=[string, string]], [stereoMode=string], [toggle=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string], [viewImageCount=int], [viewTransformName=string], [writeImage=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Set the selection context for the render view panel.",
            "name": "renderWindowSelectContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "renderWindowSelectContext([exists=boolean], [image1=string], [image2=string], [image3=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command reorders (moves) objects relative to their siblings.",
            "name": "reorder",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "reorder( [objects...] , [back=boolean], [front=boolean], [relative=int])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command reorders (moves) objects relative to their siblings in a container.",
            "name": "reorderContainer",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "reorderContainer([back=boolean], [front=boolean], [relative=int])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command changes the order in which 2 deformation nodes affect the output geometry.",
            "name": "reorderDeformers",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "reorderDeformers( string string selectionList , [name=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command is used during file I/O to specify the requirements needed to load the given file.",
            "name": "requires",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "requires( string string , [dataType=string], [nodeType=string])"
        },
        {
            "categories": [
                "Animation",
                "IK"
            ],
            "description": "This command will reroot a skeleton.",
            "name": "reroot",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "reroot( [object] )"
        },
        {
            "categories": [
                "Effects",
                "Fluids"
            ],
            "description": "A command to extend the fluid grid, keeping the voxels the same size, and keeping the existing contents of the fluid in the same place.",
            "name": "resampleFluid",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "resampleFluid([resampleDepth=int], [resampleHeight=int], [resampleWidth=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command resets a tool back to its \"factory settings\".",
            "name": "resetTool",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "resetTool( [string] )"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command creates a new node in the dependency graph of the specified type.",
            "name": "resolutionNode",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the new node.",
                    "type": "string"
                },
                {
                    "description": "The name of the render resolution node",
                    "type": "string"
                }
            ],
            "synopsis": "resolutionNode( string , [name=string], [parent=string], [shared=boolean], [skipSelect=boolean])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "List resources matching certain properties.",
            "name": "resourceManager",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "resourceManager([nameFilter=string], [saveAs=[string, string]])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to scale keyframes within the graph editor using the retime tool.",
            "name": "retimeKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Query value from the snapOnFame setting.",
                    "type": "boolean"
                }
            ],
            "synopsis": "retimeKeyCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [moveByFrame=int], [name=string], [snapOnFrame=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The reverseCurve command reverses the direction of a curve or curve-on-surface.",
            "name": "reverseCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(object name and node name)",
                    "type": "string[]"
                }
            ],
            "synopsis": "reverseCurve( curve , [caching=boolean], [constructionHistory=boolean], [curveOnSurface=boolean], [name=string], [nodeState=int], [object=boolean], [range=boolean], [replaceOriginal=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The reverseSurface command reverses one or both directions of a surface or can be used to \"swap\" the U and V directions (this creates the effect of reversing the surface normal).",
            "name": "reverseSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "reverseSurface( surface , [caching=boolean], [constructionHistory=boolean], [direction=int], [name=string], [nodeState=int], [object=boolean], [replaceOriginal=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command creates a revolved surface by revolving the given profile curve about an axis.",
            "name": "revolve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "revolve( curve , [autoCorrectNormal=boolean], [axis=[linear, linear, linear]], [axisChoice=int], [axisX=linear], [axisY=linear], [axisZ=linear], [bridge=boolean], [caching=boolean], [computePivotAndAxis=int], [constructionHistory=boolean], [degree=int], [endSweep=angle], [name=string], [nodeState=int], [object=boolean], [pivot=[linear, linear, linear]], [pivotX=linear], [pivotY=linear], [pivotZ=linear], [polygon=int], [radius=linear], [radiusAnchor=float], [range=boolean], [rebuild=boolean], [sections=int], [startSweep=angle], [tolerance=linear], [useLocalPivot=boolean], [useTolerance=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This command creates a rigid body from a polygonal or nurbs surface.",
            "name": "rigidBody",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "New rigid body name.",
                    "type": "string"
                }
            ],
            "synopsis": "rigidBody([active=boolean], [angularVelocity=boolean], [applyForceAt=string], [bounciness=float], [cache=boolean], [centerOfMass=[float, float, float]], [collisions=boolean], [contactCount=boolean], [contactName=boolean], [contactPosition=boolean], [damping=float], [deleteCache=boolean], [dynamicFriction=float], [force=boolean], [ignore=boolean], [impulse=[float, float, float]], [impulsePosition=[float, float, float]], [initialAngularVelocity=[float, float, float]], [initialVelocity=[float, float, float]], [layer=int], [lockCenterOfMass=boolean], [mass=float], [name=string], [orientation=[float, float, float]], [particleCollision=boolean], [passive=boolean], [position=[float, float, float]], [removeShape=string], [solver=string], [spinImpulse=[float, float, float]], [standInObject=string], [staticFriction=float], [tesselationFactor=int], [velocity=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This command sets the attributes for the rigid solver.",
            "name": "rigidSolver",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "rigidSolver([autoTolerances=boolean], [bounciness=boolean], [cacheData=boolean], [collide=boolean], [collisionTolerance=float], [contactData=boolean], [create=boolean], [current=boolean], [deleteCache=boolean], [displayCenterOfMass=boolean], [displayConstraint=boolean], [displayVelocity=boolean], [dynamics=boolean], [friction=boolean], [interpenetrate=boolean], [interpenetrationCheck=boolean], [name=string], [rigidBodies=boolean], [rigidBodyCount=boolean], [showCollision=boolean], [showInterpenetration=boolean], [solverMethod=int], [startTime=float], [state=boolean], [statistics=boolean], [stepSize=float], [velocityVectorScale=float])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The roll command rotates a camera about its viewing direction, a positive angle produces clockwise camera rotation, while a negative angle produces counter-clockwise camera rotation.",
            "name": "roll",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "roll( [camera] , [absolute=boolean], [degree=angle], [relative=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create, edit, or query a roll context.",
            "name": "rollCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context",
                    "type": "string"
                }
            ],
            "synopsis": "rollCtx( [context] , [alternateContext=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [rollScale=float], [toolName=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The rotate command is used to change the rotation of geometric objects.",
            "name": "rotate",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "rotate( float float float [objects] , [absolute=boolean], [centerPivot=boolean], [componentSpace=boolean], [constrainAlongNormal=boolean], [deletePriorHistory=boolean], [euler=boolean], [forceOrderXYZ=boolean], [objectCenterPivot=boolean], [objectSpace=boolean], [orientAxes=[angle, angle, angle]], [pivot=[linear, linear, linear]], [preserveChildPosition=boolean], [preserveGeometryPosition=boolean], [preserveUV=boolean], [reflection=boolean], [reflectionAboutBBox=boolean], [reflectionAboutOrigin=boolean], [reflectionAboutX=boolean], [reflectionAboutY=boolean], [reflectionAboutZ=boolean], [reflectionTolerance=float], [relative=boolean], [rotateX=boolean], [rotateXY=boolean], [rotateXYZ=boolean], [rotateXZ=boolean], [rotateY=boolean], [rotateYZ=boolean], [rotateZ=boolean], [symNegative=boolean], [translate=boolean], [worldSpace=boolean], [xformConstraint=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "The rotationInterpolation command converts the rotation curves to the desired rotation interpolation representation.",
            "name": "rotationInterpolation",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "rotationInterpolation([convert=string])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command generates constant radius NURBS fillets and NURBS corner surfaces for matching edge pairs on NURBS surfaces.",
            "name": "roundConstantRadius",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(resulting NURBS surfaces' names and node name)",
                    "type": "string[]"
                }
            ],
            "synopsis": "roundConstantRadius( string string [string string] , [append=boolean], [constructionHistory=boolean], [name=string], [object=boolean], [radiuss=linear], [side=[string, int]], [sidea=int], [sideb=int])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command creates a rowColumn layout.",
            "name": "rowColumnLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "rowColumnLayout( [string] , [adjustableColumn=int], [annotation=string], [backgroundColor=[float, float, float]], [childArray=boolean], [columnAlign=[int, string]], [columnAttach=[int, string, int]], [columnOffset=[int, string, int]], [columnSpacing=[int, int]], [columnWidth=[int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfChildren=boolean], [numberOfColumns=int], [numberOfPopupMenus=boolean], [numberOfRows=int], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowAlign=[int, string]], [rowAttach=[int, string, int]], [rowHeight=[int, int]], [rowOffset=[int, string, int]], [rowSpacing=[int, int]], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command creates a layout capable of positioning children into a single horizontal row.",
            "name": "rowLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "rowLayout( [string] , [adjustableColumn=int], [adjustableColumn1=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [childArray=boolean], [columnAlign=[int, string]], [columnAlign1=string], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach1=string], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset1=int], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfChildren=boolean], [numberOfColumns=int], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowAttach=[int, string, int]], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "Create a MEL command given the specified name.",
            "name": "runTimeCommand",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the command on.",
                    "type": "string"
                }
            ],
            "synopsis": "runTimeCommand( name , [addKeyword=string], [addTag=string], [annotation=string], [category=string], [categoryArray=boolean], [command=script], [commandArray=boolean], [commandLanguage=string], [default=boolean], [defaultCommandArray=boolean], [delete=boolean], [exists=boolean], [helpUrl=string], [hotkeyCtx=string], [image=string], [keywords=string], [label=string], [longAnnotation=string], [numberOfCommands=boolean], [numberOfDefaultCommands=boolean], [numberOfUserCommands=boolean], [plugin=string], [save=boolean], [showInHotkeyEditor=boolean], [tags=string], [userCommandArray=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "runup plays the scene through a frame of frames, forcing dynamic objects to evaluate as it does so.",
            "name": "runup",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "runup([cache=boolean], [fromPreviousFrame=boolean], [fromStartFrame=boolean], [maxFrame=time], [state=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "The sampleImage command is used to control parameters of sample images, such as swatches in the multilister.",
            "name": "sampleImage",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "sampleImage([fastSample=boolean], [resolution=[int, name]])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command writes all shelves that are immediate children of the specified control layout to the prefs directory.",
            "name": "saveAllShelves",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "True if successful, otherwise issues an error message and returns false.",
                    "type": "boolean"
                }
            ],
            "synopsis": "saveAllShelves( string )"
        },
        {
            "categories": [
                "Effects",
                "Fluids"
            ],
            "description": "A command to save the current state of the fluid to the initial state cache.",
            "name": "saveFluid",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "saveFluid([currentTime=int], [endTime=int], [startTime=int])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command creates a static image for non-xpm files.",
            "name": "saveImage",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the image created.",
                    "type": "string"
                },
                {
                    "description": "The name of the saveImage control created.",
                    "type": "string"
                }
            ],
            "synopsis": "saveImage( [imageName] [imageName] , [annotation=string], [backgroundColor=[float, float, float]], [currentView=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [image=string], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [objectThumbnail=string], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [sceneFile=string], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "saveInitialState saves the current state of dynamics objects as the initial state.",
            "name": "saveInitialState",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "saveInitialState( selectionList , [attribute=string], [saveall=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Menus"
            ],
            "description": "This command is used for saving the contents of a menu, so that another instance of the menu may be recreated later.",
            "name": "saveMenu",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the saved file.",
                    "type": "string"
                }
            ],
            "synopsis": "saveMenu( string string )"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command saves preference dependency nodes to \"userPrefObjects.",
            "name": "savePrefObjects",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "True if successful.",
                    "type": "boolean"
                }
            ],
            "synopsis": "savePrefObjects()"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command saves preferences to disk.",
            "name": "savePrefs",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "savePrefs([colors=boolean], [file=string], [general=boolean], [hotkeys=boolean], [menuSets=boolean], [plugins=boolean], [uiLayout=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command saves the specified shelf (first argument) to the specified file (second argument).",
            "name": "saveShelf",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "True if successful.",
                    "type": "boolean"
                }
            ],
            "synopsis": "saveShelf( string string )"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command causes all the tools not on the shelf to save their settings as optionVars.",
            "name": "saveToolSettings",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "saveToolSettings()"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command causes all the 3d views to save their settings as optionVar's.",
            "name": "saveViewportSettings",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "saveViewportSettings()"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The scale command is used to change the sizes of geometric objects.",
            "name": "scale",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "scale( float float float [objects] , [absolute=boolean], [centerPivot=boolean], [componentSpace=boolean], [constrainAlongNormal=boolean], [deletePriorHistory=boolean], [distanceOnly=boolean], [localSpace=boolean], [objectCenterPivot=boolean], [objectSpace=boolean], [orientAxes=[angle, angle, angle]], [pivot=[linear, linear, linear]], [preserveChildPosition=boolean], [preserveGeometryPosition=boolean], [preserveUV=boolean], [reflection=boolean], [reflectionAboutBBox=boolean], [reflectionAboutOrigin=boolean], [reflectionAboutX=boolean], [reflectionAboutY=boolean], [reflectionAboutZ=boolean], [reflectionTolerance=float], [relative=boolean], [scaleX=boolean], [scaleXY=boolean], [scaleXYZ=boolean], [scaleXZ=boolean], [scaleY=boolean], [scaleYZ=boolean], [scaleZ=boolean], [symNegative=boolean], [worldSpace=boolean], [xformConstraint=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This is a limited version of the scale command.",
            "name": "scaleComponents",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "scaleComponents( float float float [objects] , [pivot=[linear, linear, linear]], [rotation=[angle, angle, angle]])"
        },
        {
            "categories": [
                "Animation",
                "Constraints"
            ],
            "description": "Constrain an object's scale to the scale of the target object or to the average scale of a number of targets.",
            "name": "scaleConstraint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the created constraint node",
                    "type": "string[]"
                }
            ],
            "synopsis": "scaleConstraint( [target...] [object] , [layer=string], [maintainOffset=boolean], [name=string], [offset=[float, float, float]], [remove=boolean], [scaleCompensate=boolean], [skip=string], [targetList=boolean], [weight=float], [weightAliasList=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command operates on a keyset.",
            "name": "scaleKey",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of curves on which scale was performed",
                    "type": "int"
                }
            ],
            "synopsis": "scaleKey( objects , [animation=string], [attribute=string], [autoSnap=boolean], [controlPoints=boolean], [float=floatrange], [floatPivot=float], [floatScale=float], [hierarchy=string], [includeUpperBound=boolean], [index=uint], [newEndFloat=float], [newEndTime=time], [newStartFloat=float], [newStartTime=time], [scaleSpecifiedKeys=boolean], [shape=boolean], [time=timerange], [timePivot=time], [timeScale=float], [valuePivot=float], [valueScale=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to scale keyframes within the graph editor.",
            "name": "scaleKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Scale type, if the type flag was queried",
                    "type": "string"
                },
                {
                    "description": "Whether specified keys should be scaled, if the scaleSpecifiedKeys flag was queried",
                    "type": "boolean"
                }
            ],
            "synopsis": "scaleKeyCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [scaleSpecifiedKeys=boolean], [type=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This creates an editor for managing the files in a scene.",
            "name": "sceneEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of editor.",
                    "type": "string"
                }
            ],
            "synopsis": "sceneEditor([control=boolean], [defineTemplate=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [highlightConnection=string], [lockMainConnection=boolean], [mainListConnection=string], [onlyParents=boolean], [panel=string], [parent=string], [refreshReferences=boolean], [selectCommand=script], [selectItem=int], [selectReference=string], [selectionConnection=string], [shortName=boolean], [stateString=boolean], [unParent=boolean], [unlockMainConnection=boolean], [unresolvedName=boolean], [updateMainConnection=boolean], [useTemplate=string], [withoutCopyNumber=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "{ \"sceneLint\" : { \"ISSUE_CODE\" : { \"description\" : \"DETAILED_DESCRIPTION_OF_ISSUE\", \"mitigation\" : [ // List of mitigations that can be applied { \"objects\" : [ LIST_OF_STRINGS_NAMING_OBJECTS_TO_WHICH_IT_APPLIES ], \"benefit\" : DESCRIPTION_OF_HOW_THE_CODE_MAKES_THE_SCENE_BETTER, \"description\" : DESCRIPTION_OF_WHAT_THE_CODE_DOES, \"code\" : PYTHON_MITIGATION_CODE_WITH_LOOP_OVER_INSTANCES } ] } } }.",
            "name": "sceneLint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "JSON formatted results showing the issues that could potentially cause problems in the scene.",
                    "type": "string"
                },
                {
                    "description": "When querying issueType shows the description, and benefit values for the named scene issue.",
                    "type": "string[]"
                },
                {
                    "description": "When querying returns the list of all issueTypes by name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "sceneLint([issueType=string], [verbose=boolean])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command returns existing scene based UI that can be utilized by the scene that is being loaded.",
            "name": "sceneUIReplacement",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "When used with getNextScriptedPanel, getNextPanel, or getNextFilter",
                    "type": "string"
                }
            ],
            "synopsis": "sceneUIReplacement([clear=boolean], [deleteRemaining=boolean], [getNextFilter=[string, string]], [getNextPanel=[string, string]], [getNextScriptedPanel=[string, string]], [update=string])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "Set the current manipulator handle value(s).",
            "name": "scmh",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "scmh( float [float...] , [absolute=boolean], [ignore=uint], [quiet=boolean], [relative=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command allows a user to create their own tools based on the selection tool.",
            "name": "scriptCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "scriptCtx( string , [allComponents=boolean], [allObjects=boolean], [animBreakdown=boolean], [animCurve=boolean], [animInTangent=boolean], [animKeyframe=boolean], [animOutTangent=boolean], [baseClassName=string], [camera=boolean], [cluster=boolean], [collisionModel=boolean], [controlVertex=boolean], [cumulativeLists=boolean], [curve=boolean], [curveKnot=boolean], [curveOnSurface=boolean], [curveParameterPoint=boolean], [dimension=boolean], [dynamicConstraint=boolean], [edge=boolean], [editPoint=boolean], [emitter=boolean], [enableRootSelection=boolean], [escToQuit=boolean], [exists=boolean], [exitUponCompletion=boolean], [expandSelectionList=boolean], [facet=boolean], [field=boolean], [finalCommandScript=script], [fluid=boolean], [follicle=boolean], [forceAddSelect=boolean], [hairSystem=boolean], [handle=boolean], [history=boolean], [hull=boolean], [ignoreInvalidItems=boolean], [ikEndEffector=boolean], [ikHandle=boolean], [image1=string], [image2=string], [image3=string], [imagePlane=boolean], [implicitGeometry=boolean], [isoparm=boolean], [joint=boolean], [jointPivot=boolean], [lastAutoComplete=boolean], [lattice=boolean], [latticePoint=boolean], [light=boolean], [localRotationAxis=boolean], [locator=boolean], [locatorUV=boolean], [locatorXYZ=boolean], [nCloth=boolean], [nParticle=boolean], [nParticleShape=boolean], [nRigid=boolean], [name=string], [nonlinear=boolean], [nurbsCurve=boolean], [nurbsSurface=boolean], [objectComponent=boolean], [orientationLocator=boolean], [particle=boolean], [particleShape=boolean], [plane=boolean], [polymesh=boolean], [polymeshEdge=boolean], [polymeshFace=boolean], [polymeshFreeEdge=boolean], [polymeshUV=boolean], [polymeshVertex=boolean], [polymeshVtxFace=boolean], [rigidBody=boolean], [rigidConstraint=boolean], [rotatePivot=boolean], [scalePivot=boolean], [sculpt=boolean], [selectHandle=boolean], [setAllowExcessCount=boolean], [setAutoComplete=boolean], [setAutoToggleSelection=boolean], [setDoneSelectionPrompt=string], [setNoSelectionHeadsUp=string], [setNoSelectionPrompt=string], [setSelectionCount=int], [setSelectionHeadsUp=string], [setSelectionPrompt=string], [showManipulators=boolean], [spring=boolean], [springComponent=boolean], [stroke=boolean], [subdiv=boolean], [subdivMeshEdge=boolean], [subdivMeshFace=boolean], [subdivMeshPoint=boolean], [subdivMeshUV=boolean], [surfaceEdge=boolean], [surfaceFace=boolean], [surfaceKnot=boolean], [surfaceParameterPoint=boolean], [surfaceRange=boolean], [surfaceUV=boolean], [texture=boolean], [title=string], [toolCursorType=string], [toolFinish=script], [toolStart=script], [totalSelectionSets=int], [vertex=boolean])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "Use this command to directly manipulate and query the contents of the Command Window window.",
            "name": "scriptEditorInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the Command Window window is returned.",
                    "type": "string"
                }
            ],
            "synopsis": "scriptEditorInfo([clearHistory=boolean], [clearHistoryFile=boolean], [historyFilename=string], [input=string], [suppressErrors=boolean], [suppressInfo=boolean], [suppressResults=boolean], [suppressStackWindow=boolean], [suppressWarnings=boolean], [writeHistory=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command will create an instance of the specified scriptedPanelType.",
            "name": "scriptedPanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the scripted panel.",
                    "type": "string"
                }
            ],
            "synopsis": "scriptedPanel( [panelName] , [control=boolean], [copy=string], [createString=boolean], [defineTemplate=string], [docTag=string], [editString=boolean], [exists=boolean], [init=boolean], [isUnique=boolean], [label=string], [menuBarRepeatLast=boolean], [menuBarVisible=boolean], [needsInit=boolean], [parent=string], [popupMenuProcedure=script], [replacePanel=string], [tearOff=boolean], [tearOffCopy=string], [tearOffRestore=boolean], [type=string], [unParent=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command defines the callbacks for a type of scripted panel.",
            "name": "scriptedPanelType",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the scripted panel type.",
                    "type": "string"
                }
            ],
            "synopsis": "scriptedPanelType( [string] , [addCallback=string], [copyStateCallback=string], [createCallback=string], [customView=boolean], [defineTemplate=string], [deleteCallback=string], [exists=boolean], [hotkeyCtxClient=string], [initCallback=string], [label=string], [obsolete=boolean], [removeCallback=string], [retainOnFileOpen=boolean], [saveStateCallback=string], [unique=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command creates a \"script job\", which is a MEL command or script.",
            "name": "scriptJob",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The `job number`, which can be used to kill the job. The job number will be a value greater than or equal to zero",
                    "type": "int"
                },
                {
                    "description": "A string list when the `list` flag is used",
                    "type": "string[]"
                },
                {
                    "description": "For the `exists` flag.",
                    "type": "boolean"
                }
            ],
            "synopsis": "scriptJob([allChildren=boolean], [attributeAdded=[string, script]], [attributeChange=[string, script]], [attributeDeleted=[string, script]], [compressUndo=boolean], [conditionChange=[string, script]], [conditionFalse=[string, script]], [conditionTrue=[string, script]], [connectionChange=[string, script]], [disregardIndex=boolean], [event=[string, script]], [exists=int], [force=boolean], [idleEvent=script], [kill=int], [killAll=boolean], [killWithScene=boolean], [listConditions=boolean], [listEvents=boolean], [listJobs=boolean], [nodeDeleted=[string, script]], [nodeNameChanged=[string, script]], [optionVarChanged=[string, script]], [parent=string], [permanent=boolean], [protected=boolean], [replacePrevious=boolean], [runOnce=boolean], [timeChange=script], [uiDeleted=[string, script]])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "scriptNodes contain scripts that are executed when a file is loaded or when the script node is deleted.",
            "name": "scriptNode",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "scriptNode( [attributeList] , [afterScript=string], [beforeScript=string], [executeAfter=boolean], [executeBefore=boolean], [ignoreReferenceEdits=boolean], [name=string], [scriptType=int], [sourceType=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates/edits/queries the script table control.",
            "name": "scriptTable",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The full path name to the created script table control.",
                    "type": "string"
                }
            ],
            "synopsis": "scriptTable( [name] , [afterCellChangedCmd=script], [annotation=string], [backgroundColor=[float, float, float]], [cellBackgroundColorCommand=script], [cellChangedCmd=script], [cellForegroundColorCommand=script], [cellIndex=[int, int]], [cellValue=string], [clearRow=int], [clearTable=boolean], [columnFilter=[int, string]], [columnWidth=[int, int]], [columns=int], [defineTemplate=string], [deleteRow=int], [docTag=string], [dragCallback=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [excludingHeaders=boolean], [exists=boolean], [fullPathName=boolean], [getCellCmd=script], [height=int], [highlightColor=[float, float, float]], [insertRow=int], [isObscured=boolean], [label=[int, string]], [manage=boolean], [multiEditEnabled=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowHeight=int], [rows=int], [rowsRemovedCmd=script], [rowsToBeRemovedCmd=script], [selectedCells=int[]], [selectedColumns=int[]], [selectedRow=boolean], [selectedRows=int[]], [selectionBehavior=int], [selectionChangedCmd=script], [selectionMode=int], [sortEnabled=boolean], [statusBarMessage=string], [underPointerColumn=boolean], [underPointerRow=boolean], [useDoubleClickEdit=boolean], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a scrolling field that handles multiple lines of text.",
            "name": "scrollField",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "scrollField( [string] , [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [clear=boolean], [command=string], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [enterCommand=script], [exists=boolean], [font=string], [fontPointSize=int], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [insertText=string], [insertionPosition=int], [isObscured=boolean], [keyPressCommand=script], [manage=boolean], [noBackground=boolean], [numberOfLines=int], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [selection=boolean], [statusBarMessage=string], [text=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int], [wordWrap=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command creates a scroll layout.",
            "name": "scrollLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "scrollLayout( [string] , [annotation=string], [backgroundColor=[float, float, float]], [borderVisible=boolean], [childArray=boolean], [childResizable=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [horizontalScrollBarThickness=int], [isObscured=boolean], [manage=boolean], [minChildWidth=int], [noBackground=boolean], [numberOfChildren=boolean], [numberOfPopupMenus=boolean], [panEnabled=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [resizeCommand=script], [scrollAreaHeight=boolean], [scrollAreaValue=boolean], [scrollAreaWidth=boolean], [scrollByPixel=[string, int]], [scrollPage=string], [statusBarMessage=string], [useTemplate=string], [verticalScrollBarAlwaysVisible=boolean], [verticalScrollBarThickness=int], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates/edits/queries a sculpt object deformer.",
            "name": "sculpt",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Sculpt algorithm node name, sculpt sphere name, and sculpt stretch origin name",
                    "type": "string[]"
                }
            ],
            "synopsis": "sculpt( selectionList , [after=boolean], [afterReference=boolean], [before=boolean], [components=boolean], [deformerTools=boolean], [dropoffDistance=linear], [dropoffType=string], [exclusive=string], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [groupWithLocator=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [insideMode=string], [maxDisplacement=linear], [mode=string], [name=string], [objectCentered=boolean], [parallel=boolean], [prune=boolean], [remove=boolean], [sculptTool=string], [selectedComponents=boolean], [split=boolean], [useComponentTags=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command changes the source blend shape and target for the clone target tool.",
            "name": "sculptMeshCacheChangeCloneSource",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "sculptMeshCacheChangeCloneSource([blendShape=string], [target=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This is a tool context command for mesh cache sculpting tool.",
            "name": "sculptMeshCacheCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "sculptMeshCacheCtx([adjustSize=boolean], [adjustStrength=boolean], [affectAllLayers=boolean], [brushDirection=int], [brushSize=float], [brushStrength=float], [buildUpRate=float], [cloneHideSource=boolean], [cloneMethod=int], [cloneShapeSource=string], [cloneTargetSource=string], [constrainToSurface=boolean], [direction=int], [displayFrozen=boolean], [displayMask=boolean], [displayWireframe=boolean], [falloffType=int], [flood=float], [floodFreeze=float], [frame=boolean], [freezeSelection=boolean], [grabFollowPath=boolean], [grabSilhouette=boolean], [grabTwist=boolean], [inverted=boolean], [lastMode=string], [lockShellBorder=boolean], [makeStroke=[uint, uint, uint, float, float]], [minSize=float], [minStrength=float], [mirror=int], [mode=string], [orientToSurface=boolean], [recordStroke=boolean], [sculptFalloffCurve=string], [size=float], [stampDistance=float], [stampFile=string], [stampFlipX=boolean], [stampFlipY=boolean], [stampOrientToStroke=boolean], [stampPlacement=int], [stampRandomization=boolean], [stampRandomizationSeed=int], [stampRandomizeFlipX=boolean], [stampRandomizeFlipY=boolean], [stampRandomizePosX=float], [stampRandomizePosY=float], [stampRandomizeRotation=float], [stampRandomizeScale=float], [stampRandomizeStrength=float], [stampRotation=float], [steadyStrokeDistance=float], [strength=float], [updatePlane=boolean], [useGlobalSize=boolean], [useScreenSpace=boolean], [useStampDistance=boolean], [useStampImage=boolean], [useSteadyStroke=boolean], [wholeStroke=boolean], [wireframeAlpha=float], [wireframeColor=[float, float, float]])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command is used to specify the blend shape target to be modified by the sculpting tools and transform manipulators.",
            "name": "sculptTarget",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "sculptTarget( int , [after=boolean], [afterReference=boolean], [before=boolean], [components=boolean], [deformerTools=boolean], [exclusive=string], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [inbetweenWeight=float], [includeHiddenSelections=boolean], [name=string], [parallel=boolean], [prune=boolean], [regenerate=boolean], [remove=boolean], [selectedComponents=boolean], [snapshot=int], [split=boolean], [target=int], [useComponentTags=boolean])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "This command is used to put objects onto or off of the active list.",
            "name": "select",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "select( [objects...] , [add=boolean], [addFirst=boolean], [all=boolean], [allDagObjects=boolean], [allDependencyNodes=boolean], [clear=boolean], [containerCentric=boolean], [deselect=boolean], [hierarchy=boolean], [noExpand=boolean], [replace=boolean], [symmetry=boolean], [symmetrySide=int], [toggle=boolean], [visible=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Creates a context to perform selection.",
            "name": "selectContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "selectContext( string , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [],
            "description": "",
            "name": "selectedNodes",
            "obsolete": true,
            "returnTypes": [],
            "synopsis": ""
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command creates a named selectionConnection object.",
            "name": "selectionConnection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Value of the queried flag",
                    "type": "string"
                }
            ],
            "synopsis": "selectionConnection( string , [activeCacheList=boolean], [activeCharacterList=boolean], [activeList=boolean], [addScript=script], [addTo=string], [characterList=boolean], [clear=boolean], [connectionList=boolean], [defineTemplate=string], [deselect=name], [editor=string], [exists=boolean], [filter=string], [findObject=name], [g=boolean], [highlightList=boolean], [identify=boolean], [keyframeList=boolean], [lock=boolean], [modelList=boolean], [object=name], [parent=string], [remove=string], [removeScript=script], [select=name], [setList=boolean], [switch=boolean], [useTemplate=string], [worldList=boolean])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "This command operates on a keyset.",
            "name": "selectKey",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The number of curves on which keys were selected (or deselcted).",
                    "type": "int"
                }
            ],
            "synopsis": "selectKey( [targetList] , [addTo=boolean], [animation=string], [attribute=string], [clear=boolean], [controlPoints=boolean], [float=floatrange], [hierarchy=string], [inTangent=boolean], [includeUpperBound=boolean], [index=uint], [keyframe=boolean], [outTangent=boolean], [remove=boolean], [replace=boolean], [shape=boolean], [time=timerange], [toggle=boolean], [unsnappedKeys=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to select keyframes within the graph editor.",
            "name": "selectKeyCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "selectKeyCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to select keyframes within the keyframe region of the dope sheet editor.",
            "name": "selectKeyframeRegionCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "selectKeyframeRegionCtx( contextName , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "The `selectMode` command is used to change the selection mode.",
            "name": "selectMode",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "if a query operation",
                    "type": "boolean"
                }
            ],
            "synopsis": "selectMode([component=boolean], [hierarchical=boolean], [leaf=boolean], [object=boolean], [preset=boolean], [root=boolean], [template=boolean])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "This command controls state variables used to selection UI behavior.",
            "name": "selectPref",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "in the query mode.",
                    "type": "boolean"
                }
            ],
            "synopsis": "selectPref([affectsActive=boolean], [allowHiliteSelection=boolean], [autoSelectContainer=boolean], [autoSelectOutlinerSetMembers=boolean], [autoUseDepth=boolean], [clickBoxSize=uint], [clickDrag=boolean], [containerCentricSelection=boolean], [disableComponentPopups=boolean], [expandPopupList=boolean], [ignoreSelectionPriority=boolean], [manipClickBoxSize=uint], [paintSelect=boolean], [paintSelectWithDepth=boolean], [popupMenuSelection=boolean], [preSelectBackfacing=boolean], [preSelectClosest=boolean], [preSelectDeadSpace=uint], [preSelectHilite=boolean], [preSelectHiliteSize=float], [preSelectTweakDeadSpace=uint], [selectTypeChangeAffectsActive=boolean], [selectionChildHighlightMode=int], [singleBoxSelection=boolean], [straightLineDistance=boolean], [trackSelectionOrder=boolean], [useDepth=boolean], [xformNoSelect=boolean])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "The `selectPriority` command is used to change the selection priority of particular types of objects that can be selected when using the select tool.",
            "name": "selectPriority",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "if a query operation",
                    "type": "int"
                }
            ],
            "synopsis": "selectPriority([allComponents=uint], [allObjects=uint], [animBreakdown=uint], [animCurve=uint], [animInTangent=uint], [animKeyframe=uint], [animOutTangent=uint], [byName=[string, boolean]], [camera=uint], [cluster=uint], [collisionModel=uint], [controlVertex=uint], [curve=uint], [curveKnot=uint], [curveOnSurface=uint], [curveParameterPoint=uint], [dimension=uint], [dynamicConstraint=uint], [edge=uint], [editPoint=uint], [emitter=uint], [facet=uint], [field=uint], [fluid=uint], [follicle=uint], [hairSystem=uint], [handle=uint], [hull=uint], [ikEndEffector=uint], [ikHandle=uint], [imagePlane=uint], [implicitGeometry=uint], [isoparm=uint], [joint=uint], [jointPivot=uint], [lattice=uint], [latticePoint=uint], [light=uint], [localRotationAxis=uint], [locator=uint], [locatorUV=uint], [locatorXYZ=uint], [meshUVShell=uint], [motionTrailPoint=uint], [motionTrailTangent=uint], [nCloth=uint], [nParticle=uint], [nParticleShape=uint], [nRigid=uint], [nonlinear=uint], [nurbsCurve=uint], [nurbsSurface=uint], [orientationLocator=uint], [particle=uint], [particleShape=uint], [plane=uint], [polymesh=uint], [polymeshEdge=uint], [polymeshFace=uint], [polymeshFreeEdge=uint], [polymeshUV=uint], [polymeshVertex=uint], [polymeshVtxFace=uint], [queryByName=string], [rigidBody=uint], [rigidConstraint=uint], [rotatePivot=uint], [scalePivot=uint], [sculpt=uint], [selectHandle=uint], [spring=uint], [springComponent=uint], [stroke=uint], [subdiv=uint], [subdivMeshEdge=uint], [subdivMeshFace=uint], [subdivMeshPoint=uint], [subdivMeshUV=uint], [surfaceEdge=uint], [surfaceFace=uint], [surfaceKnot=uint], [surfaceParameterPoint=uint], [surfaceRange=uint], [texture=uint], [vertex=uint])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "The `selectType` command is used to change the set of allowable types of objects that can be selected when using the select tool.",
            "name": "selectType",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "if a query operation",
                    "type": "boolean"
                }
            ],
            "synopsis": "selectType([allComponents=boolean], [allObjects=boolean], [animBreakdown=boolean], [animCurve=boolean], [animInTangent=boolean], [animKeyframe=boolean], [animOutTangent=boolean], [byName=[string, boolean]], [camera=boolean], [cluster=boolean], [collisionModel=boolean], [controlVertex=boolean], [curve=boolean], [curveKnot=boolean], [curveOnSurface=boolean], [curveParameterPoint=boolean], [dimension=boolean], [dynamicConstraint=boolean], [edge=boolean], [editPoint=boolean], [emitter=boolean], [facet=boolean], [field=boolean], [fluid=boolean], [follicle=boolean], [hairSystem=boolean], [handle=boolean], [hull=boolean], [ikEndEffector=boolean], [ikHandle=boolean], [imagePlane=boolean], [implicitGeometry=boolean], [isoparm=boolean], [joint=boolean], [jointPivot=boolean], [lattice=boolean], [latticePoint=boolean], [light=boolean], [localRotationAxis=boolean], [locator=boolean], [locatorUV=boolean], [locatorXYZ=boolean], [meshUVShell=boolean], [motionTrailPoint=boolean], [motionTrailTangent=boolean], [nCloth=boolean], [nParticle=boolean], [nParticleShape=boolean], [nRigid=boolean], [nonlinear=boolean], [nurbsCurve=boolean], [nurbsSurface=boolean], [objectComponent=boolean], [orientationLocator=boolean], [particle=boolean], [particleShape=boolean], [plane=boolean], [polymesh=boolean], [polymeshEdge=boolean], [polymeshFace=boolean], [polymeshFreeEdge=boolean], [polymeshUV=boolean], [polymeshVertex=boolean], [polymeshVtxFace=boolean], [queryByName=string], [rigidBody=boolean], [rigidConstraint=boolean], [rotatePivot=boolean], [scalePivot=boolean], [sculpt=boolean], [selectHandle=boolean], [spring=boolean], [springComponent=boolean], [stroke=boolean], [subdiv=boolean], [subdivMeshEdge=boolean], [subdivMeshFace=boolean], [subdivMeshPoint=boolean], [subdivMeshUV=boolean], [surfaceEdge=boolean], [surfaceFace=boolean], [surfaceKnot=boolean], [surfaceParameterPoint=boolean], [surfaceRange=boolean], [surfaceUV=boolean], [texture=boolean], [vertex=boolean])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command is used to edit and query information about the implicit load settings.",
            "name": "selLoadSettings",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "For query execution.",
                    "type": "string"
                }
            ],
            "synopsis": "selLoadSettings([activeProxy=string], [deferReference=boolean], [fileName=string], [numSettings=uint], [proxyManager=string], [proxySetFiles=string], [proxySetTags=string], [proxyTag=string], [referenceNode=string], [shortName=boolean], [unresolvedName=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a separator widget in a variety of drawing styles.",
            "name": "separator",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "separator( [string] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [horizontal=boolean], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [style=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "The sequenceManager command manages sequences, shots, and their related scenes.",
            "name": "sequenceManager",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "sequenceManager([addSequencerAudio=string], [attachSequencerAudio=string], [currentShot=string], [currentTime=time], [listSequencerAudio=string], [listShots=boolean], [modelPanel=string], [node=string], [writableSequencer=string])"
        },
        {
            "categories": [
                "General",
                "Attributes"
            ],
            "description": "Sets the value of a dependency node attribute.",
            "name": "setAttr",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "setAttr( attribute Any [Any...] , [alteredValue=boolean], [caching=boolean], [capacityHint=uint], [channelBox=boolean], [clamp=boolean], [keyable=boolean], [lock=boolean], [size=uint], [type=string])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command applies an offset and scale to a specified device attachment.",
            "name": "setAttrMapping",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "setAttrMapping([absolute=boolean], [attribute=string], [axis=string], [clutch=string], [device=string], [offset=float], [relative=boolean], [scale=float], [selection=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "The setDefaultShadingGroup command is used to change which shading group is considered the current default shading group.",
            "name": "setDefaultShadingGroup",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "setDefaultShadingGroup( string )"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command sets a driven keyframe.",
            "name": "setDrivenKeyframe",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of keyframes set.",
                    "type": "int"
                }
            ],
            "synopsis": "setDrivenKeyframe( [objects] , [attribute=string], [controlPoints=boolean], [count=boolean], [currentDriver=string], [driven=boolean], [driver=boolean], [driverValue=float], [hierarchy=string], [inTangentType=string], [insert=boolean], [insertBlend=boolean], [outTangentType=string], [shape=boolean], [value=float])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "setDynamic sets the isDynamic attribute of particle objects on or off.",
            "name": "setDynamic",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "array",
                    "type": "string"
                }
            ],
            "synopsis": "setDynamic( selectionList , [allOnWhenRun=boolean], [disableAllOnWhenRun=boolean], [setAll=boolean], [setOff=boolean], [setOn=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a tool that can be used to modify set membership.",
            "name": "setEditCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context",
                    "type": "string"
                }
            ],
            "synopsis": "setEditCtx( name , [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "Effects",
                "Fluids"
            ],
            "description": "Sets values of built-in fluid attributes such as density, velocity, etc.",
            "name": "setFluidAttr",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "setFluidAttr([addValue=boolean], [attribute=string], [clear=boolean], [floatRandom=float], [floatValue=float], [lowerFace=boolean], [reset=boolean], [vectorRandom=[float, float, float]], [vectorValue=[float, float, float]], [xIndex=int], [xvalue=boolean], [yIndex=int], [yvalue=boolean], [zIndex=int], [zvalue=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "Give keyboard focus to a specific control or panel, passed as an argument.",
            "name": "setFocus",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "setFocus( string )"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Set the infinity type before (after) a paramCurve's first (last) keyframe.",
            "name": "setInfinity",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "setInfinity( objects , [attribute=string], [controlPoints=boolean], [hierarchy=string], [postInfinite=string], [preInfinite=string], [shape=boolean])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "The command sets a scale and offset for all attachments made to a specified device axis.",
            "name": "setInputDeviceMapping",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "setInputDeviceMapping([absolute=boolean], [axis=string], [device=string], [offset=float], [relative=boolean], [scale=float], [view=boolean], [world=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to set keys within the graph editor.",
            "name": "setKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Value of the breakdown flag, when queried",
                    "type": "boolean"
                }
            ],
            "synopsis": "setKeyCtx( contextName , [breakdown=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [preserveTangent=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command creates keyframes for the specified objects, or the active objects if none are specified on the command line.",
            "name": "setKeyframe",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of keyframes set by this command.",
                    "type": "int"
                }
            ],
            "synopsis": "setKeyframe( [objects] , [adjustTangent=boolean], [animLayer=string], [animated=boolean], [attribute=string], [breakdown=boolean], [clip=string], [controlPoints=boolean], [dirtyDG=boolean], [float=float], [hierarchy=string], [identity=boolean], [inTangentType=string], [insert=boolean], [insertBlend=boolean], [minimizeRotation=boolean], [noResolve=boolean], [outTangentType=string], [preserveCurveShape=boolean], [respectKeyable=boolean], [shape=boolean], [time=time], [useCurrentLockedWeights=boolean], [value=float])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command can be used to keyframe per-point blendshape target weights.",
            "name": "setKeyframeBlendshapeTargetWts",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "number of vertices for which the targets weights are keyed",
                    "type": "int"
                }
            ],
            "synopsis": "setKeyframeBlendshapeTargetWts()"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "The setKeyPath command either creates or edits the path (a nurbs curve) based on the current position of the selected object at the current time.",
            "name": "setKeyPath",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(Names of the created curve node and motionPath node)",
                    "type": "string[]"
                }
            ],
            "synopsis": "setKeyPath( [object] )"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "Optionally sets a new Menu Mode for the menu bar in the main Maya window.",
            "name": "setMenuMode",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The current Menu Mode for the menu bar in the main Maya window.",
                    "type": "string"
                }
            ],
            "synopsis": "setMenuMode([string])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command sets static data on the specified node type.",
            "name": "setNodeTypeFlag",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Did the command succeed?",
                    "type": "boolean"
                }
            ],
            "synopsis": "setNodeTypeFlag( [string] , [display=boolean], [threadSafe=boolean])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command changes the default parent to be the specified parent.",
            "name": "setParent",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the parent if the parent changes. Empty string if the parent doesn't change.",
                    "type": "string"
                }
            ],
            "synopsis": "setParent( [string] , [defineTemplate=string], [menu=boolean], [topLevel=boolean], [upLevel=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "This action will set the value of the chosen attribute for every particle or selected component in the selected or passed particle object.",
            "name": "setParticleAttr",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "setParticleAttr( selectionList , [attribute=string], [floatValue=float], [object=string], [randomFloat=float], [randomVector=[float, float, float]], [relative=boolean], [vectorValue=[float, float, float]])"
        },
        {
            "categories": [
                "Rendering",
                "Layers"
            ],
            "description": "This command will set the passID of a renderPass node and create the custom attributes specified by the corresponding render pass definition.",
            "name": "setRenderPassType",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "true/false",
                    "type": "boolean"
                }
            ],
            "synopsis": "setRenderPassType([defaultDataType=boolean], [numChannels=int], [type=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command is used to create a set, query some state of a set, or perform operations to update the membership of a set.",
            "name": "sets",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "For creation operations (name of the set that was created or edited)",
                    "type": "string"
                },
                {
                    "description": "For query operation (names of items in the set)",
                    "type": "string[]"
                },
                {
                    "description": "For isIntersecting and isMember operations",
                    "type": "boolean"
                }
            ],
            "synopsis": "sets( selectionList , [addElement=name], [afterFilters=boolean], [anyMember=name], [clear=name], [color=int], [copy=name], [edges=boolean], [editPoints=boolean], [empty=boolean], [facets=boolean], [flatten=name], [forceElement=name], [include=name], [intersection=name], [isIntersecting=name], [isMember=name], [layer=boolean], [name=string], [noIntermediate=boolean], [noSurfaceShader=boolean], [noWarnings=boolean], [nodesOnly=boolean], [remove=name], [renderable=boolean], [size=boolean], [split=name], [subtract=name], [text=string], [union=name], [vertices=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "Update the startup window message.",
            "name": "setStartupMessage",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "setStartupMessage( string )"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command switches control to the named context.",
            "name": "setToolTo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "setToolTo( [string] )"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command sets the current(default) command template for the ELF commands.",
            "name": "setUITemplate",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the currently selected command template.",
                    "type": "string"
                }
            ],
            "synopsis": "setUITemplate( [string] , [popTemplate=boolean], [pushTemplate=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command changes some of the settings of the xform manip, to control its appearance.",
            "name": "setXformManip",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "setXformManip([showUnits=boolean], [suppress=boolean], [useRotatePivot=boolean], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Sets the connection state of a connection between nodes that are used in shading.",
            "name": "shadingConnection",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "shadingConnection( attribute , [connectionState=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context that can be used for associating geometry to shading groups.",
            "name": "shadingGeometryRelCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the context created.",
                    "type": "string"
                }
            ],
            "synopsis": "shadingGeometryRelCtx([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [offCommand=string], [onCommand=string], [shadingCentric=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context that can be used for associating lights to shading groups.",
            "name": "shadingLightRelCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the context created.",
                    "type": "string"
                }
            ],
            "synopsis": "shadingLightRelCtx([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [offCommand=string], [onCommand=string], [shadingCentric=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command allows you to compare two shading networks.",
            "name": "shadingNetworkCompare",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string[]|string|int"
                }
            ],
            "synopsis": "shadingNetworkCompare([byName=boolean], [byValue=boolean], [delete=boolean], [equivalent=boolean], [network1=boolean], [network2=boolean], [upstreamOnly=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command creates a new node in the dependency graph of the specified type.",
            "name": "shadingNode",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the new node.",
                    "type": "string"
                },
                {
                    "description": "(the name of the new node)",
                    "type": "string"
                }
            ],
            "synopsis": "shadingNode( node string , [asLight=boolean], [asPostProcess=boolean], [asRendering=boolean], [asShader=boolean], [asTexture=boolean], [asUtility=boolean], [isColorManaged=boolean], [name=string], [parent=string], [shared=boolean], [skipSelect=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Compares two shapes.",
            "name": "shapeCompare",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "0 if successful, 1 if both shapes are not determined to be equal based on requested flags.",
                    "type": "int"
                }
            ],
            "synopsis": "shapeCompare( [object object] )"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates an editor that derives from the base editor class that has controls for deformer, control nodes.",
            "name": "shapeEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the editor",
                    "type": "string"
                }
            ],
            "synopsis": "shapeEditor( string , [clearSelection=boolean], [control=boolean], [defineTemplate=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [highlightConnection=string], [lockMainConnection=boolean], [lowestSelection=boolean], [mainListConnection=string], [panel=string], [parent=string], [selectionConnection=string], [stateString=boolean], [targetControlList=boolean], [targetList=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string], [verticalSliders=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates a panel that derives from the base panel class that houses a shapeEditor.",
            "name": "shapePanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the panel",
                    "type": "string"
                }
            ],
            "synopsis": "shapePanel( string , [control=boolean], [copy=string], [createString=boolean], [defineTemplate=string], [docTag=string], [editString=boolean], [exists=boolean], [init=boolean], [isUnique=boolean], [label=string], [menuBarRepeatLast=boolean], [menuBarVisible=boolean], [needsInit=boolean], [parent=string], [popupMenuProcedure=script], [replacePanel=string], [shapeEditor=boolean], [tearOff=boolean], [tearOffCopy=string], [tearOffRestore=boolean], [unParent=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This control supports up to 3 icon images and 4 different display styles.",
            "name": "shelfButton",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The full name of the button.",
                    "type": "string"
                }
            ],
            "synopsis": "shelfButton( [string] , [align=string], [annotation=string], [backgroundColor=[float, float, float]], [command=script], [commandRepeatable=boolean], [defineTemplate=string], [disabledImage=string], [docTag=string], [doubleClickCommand=script], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableCommandRepeat=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [flat=boolean], [flexibleWidthType=int], [flexibleWidthValue=int], [flipX=boolean], [flipY=boolean], [font=string], [fullPathName=boolean], [handleNodeDropCallback=script], [height=int], [highlightColor=[float, float, float]], [highlightImage=string], [image=string], [image1=string], [image2=string], [image3=string], [imageOverlayLabel=string], [isObscured=boolean], [label=string], [labelEditingCallback=script], [labelOffset=int], [manage=boolean], [marginHeight=uint], [marginWidth=uint], [menuItem=[string, string]], [menuItemPython=int], [menuItemWithOptionBox=[string, string, string]], [noBackground=boolean], [noDefaultPopup=boolean], [numberOfPopupMenus=boolean], [overlayLabelBackColor=[float, float, float, float]], [overlayLabelColor=[float, float, float]], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [rotation=float], [scaleIcon=boolean], [selectionImage=string], [sourceType=string], [statusBarMessage=string], [style=string], [useAlpha=boolean], [useTemplate=string], [version=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command creates a new empty shelf layout.",
            "name": "shelfLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the layout.",
                    "type": "string"
                }
            ],
            "synopsis": "shelfLayout( [string] , [alignment=string], [annotation=string], [backgroundColor=[float, float, float]], [cellHeight=int], [cellWidth=int], [cellWidthHeight=[int, int]], [childArray=boolean], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [horizontal=boolean], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfChildren=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [position=[string, int]], [preventOverride=boolean], [spacing=int], [statusBarMessage=string], [style=string], [useTemplate=string], [version=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command creates/edits/queries a shelf tab group which is essentially a normal tabLayout with some drop behaviour in the tab bar.",
            "name": "shelfTabLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the shelfTabLayout.",
                    "type": "string"
                }
            ],
            "synopsis": "shelfTabLayout( [string] , [annotation=string], [backgroundColor=[float, float, float]], [borderStyle=string], [changeCommand=script], [childArray=boolean], [childResizable=boolean], [closeTab=int], [closeTabCommand=script], [defineTemplate=string], [docTag=string], [doubleClickCommand=script], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [horizontalScrollBarThickness=int], [image=string], [imageVisible=boolean], [innerMarginHeight=int], [innerMarginWidth=int], [isObscured=boolean], [manage=boolean], [minChildWidth=int], [moveTab=[int, int]], [newTabCommand=script], [noBackground=boolean], [numberOfChildren=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [postMenuCommand=script], [preSelectCommand=script], [preventOverride=boolean], [scrollable=boolean], [scrollableTabs=boolean], [selectCommand=script], [selectTab=string], [selectTabIndex=int], [showNewTab=boolean], [statusBarMessage=string], [tabIcon=[string, string]], [tabIconIndex=[int, string]], [tabLabel=[string, string]], [tabLabelIndex=[int, string]], [tabPosition=string], [tabTooltip=[string, string]], [tabTooltipIndex=[int, string]], [tabsClosable=boolean], [tabsVisible=boolean], [useTemplate=string], [verticalScrollBarThickness=int], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Use this command to create a shot node or manipulate that node.",
            "name": "shot",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Shot name",
                    "type": "string"
                }
            ],
            "synopsis": "shot([audio=string], [clip=string], [clipDuration=time], [clipOpacity=float], [clipSyncState=boolean], [clipZeroOffset=time], [copy=boolean], [createCustomAnim=boolean], [currentCamera=string], [customAnim=boolean], [deleteCustomAnim=boolean], [determineTrack=boolean], [endTime=time], [favorite=boolean], [flag1=boolean], [flag10=boolean], [flag11=boolean], [flag12=boolean], [flag2=boolean], [flag3=boolean], [flag4=boolean], [flag5=boolean], [flag6=boolean], [flag7=boolean], [flag8=boolean], [flag9=boolean], [hasCameraSet=boolean], [hasStereoCamera=boolean], [imagePlaneVisibility=boolean], [linkAudio=string], [lock=boolean], [mute=boolean], [paste=boolean], [pasteInstance=boolean], [postHoldTime=time], [preHoldTime=time], [scale=float], [selfmute=boolean], [sequenceDuration=time], [sequenceEndTime=time], [sequenceStartTime=time], [shotName=string], [sourceDuration=time], [startTime=time], [track=int], [transitionInLength=time], [transitionInType=int], [transitionOutLength=time], [transitionOutType=int], [unlinkAudio=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "When Ripple Edit Mode is enabled, neighboring shots to the shot that gets manipulated are moved in sequence time to either make way or close up gaps corresponding to that node's editing.",
            "name": "shotRipple",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "shotRipple([deleted=boolean], [endDelta=time], [endTime=time], [startDelta=time], [startTime=time])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This command is used for inserting and removing tracks related to the shots displayed in the Sequencer.",
            "name": "shotTrack",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "shotTrack([insertTrack=uint], [lock=boolean], [mute=boolean], [numTracks=uint], [removeEmptyTracks=boolean], [removeTrack=uint], [selfmute=boolean], [solo=boolean], [swapTracks=[uint, uint]], [title=string], [track=uint], [unsolo=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Invokes a web browser to open the on-line documentation and help files.",
            "name": "showHelp",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "showHelp([string], [absolute=boolean], [docs=boolean], [helpTable=boolean], [version=boolean])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "The `showHidden` command is used to make invisible objects visible.",
            "name": "showHidden",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "showHidden( [objects...] , [above=boolean], [allObjects=boolean], [below=boolean], [lastHidden=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create a show manip context.",
            "name": "showManipCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the newly created context.",
                    "type": "string"
                }
            ],
            "synopsis": "showManipCtx( string , [addAttr=string], [currentNodeName=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [incSnap=[uint, boolean]], [incSnapRelative=[uint, boolean]], [incSnapUI=boolean], [incSnapValue=[uint, float]], [iveVisible=boolean], [lockSelection=boolean], [moveActiveAttrDown=boolean], [moveActiveAttrToTop=boolean], [moveActiveAttrUp=boolean], [name=string], [removeAttr=string], [resetActiveAttr=boolean], [selectedAttributes=boolean], [setAttrActive=string], [setNextAttrActive=boolean], [setPreviousAttrActive=boolean], [toggleIncSnap=boolean], [toolFinish=script], [toolStart=script])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command is used to show metadata values which is in the specified channels \"vertex\", \"edge\", \"face\", and \"vertexFace\" in the viewport.",
            "name": "showMetadata",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "result of the operation or the queried status",
                    "type": "string"
                }
            ],
            "synopsis": "showMetadata([auto=boolean], [dataType=string], [interpolation=boolean], [isActivated=boolean], [listAllStreams=boolean], [listMembers=boolean], [listValidMethods=boolean], [listVisibleStreams=boolean], [member=string], [method=string], [off=boolean], [range=[float, float]], [rayScale=float], [stream=string])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "This command causes the title of the window specified as an argument to be linked to the current file and selection.",
            "name": "showSelectionInTitle",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "showSelectionInTitle( [string] )"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "The showShadingGroupAttrEditor command opens up the attribute editor for the current object's shading-group information.",
            "name": "showShadingGroupAttrEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "true if a shading group is displayed, otherwise false.",
                    "type": "boolean"
                }
            ],
            "synopsis": "showShadingGroupAttrEditor()"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "Make a window visible.",
            "name": "showWindow",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "showWindow( [string] )"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command operates on a keyset.",
            "name": "simplify",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of animation curves simplified",
                    "type": "int"
                }
            ],
            "synopsis": "simplify( animatedObject , [animation=string], [attribute=string], [controlPoints=boolean], [float=floatrange], [floatTolerance=float], [hierarchy=string], [includeUpperBound=boolean], [index=uint], [shape=boolean], [time=timerange], [timeTolerance=time], [valueTolerance=float])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This cmd creates a railed surface by sweeping the profile curve along the two rail curves.",
            "name": "singleProfileBirailSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "singleProfileBirailSurface( curve curve curve , [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [object=boolean], [polygon=int], [tangentContinuityProfile1=boolean], [transformMode=int])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "This command is used to embed a skeleton inside meshes.",
            "name": "skeletonEmbed",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "skeletonEmbed([mergedMesh=boolean], [segmentationMethod=uint], [segmentationResolution=uint])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a tool that can be used to edit volumes from an interactive bind.",
            "name": "skinBindCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "skinBindCtx( string , [about=string], [axis=string], [colorRamp=string], [currentInfluence=string], [displayInactiveMode=int], [displayNormalized=boolean], [exists=boolean], [falloffCurve=string], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [symmetry=boolean], [tolerance=float])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "The skinCluster command is used for smooth skinning in maya.",
            "name": "skinCluster",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the skinCluster node name)",
                    "type": "string"
                }
            ],
            "synopsis": "skinCluster( objects , [addInfluence=string], [addToSelection=boolean], [after=boolean], [afterReference=boolean], [baseShape=string], [before=boolean], [bindMethod=int], [components=boolean], [deformerTools=boolean], [dropoffRate=float], [exclusive=string], [forceNormalizeWeights=boolean], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [heatmapFalloff=float], [ignoreBindPose=boolean], [ignoreHierarchy=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [influence=string], [lockWeights=boolean], [maximumInfluences=int], [moveJointsMode=boolean], [name=string], [normalizeWeights=int], [nurbsSamples=int], [obeyMaxInfluences=boolean], [parallel=boolean], [polySmoothness=float], [prune=boolean], [recacheBindMatrices=boolean], [remove=boolean], [removeFromSelection=boolean], [removeInfluence=string], [removeUnusedInfluence=boolean], [selectInfluenceVerts=string], [selectedComponents=boolean], [skinMethod=int], [smoothWeights=float], [smoothWeightsMaxIterations=int], [split=boolean], [toSelectedBones=boolean], [toSkeletonAndTransforms=boolean], [unbind=boolean], [unbindKeepHistory=boolean], [useComponentTags=boolean], [useGeometry=boolean], [volumeBind=float], [volumeType=int], [weight=float], [weightDistribution=int], [weightedInfluence=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "This command edits and queries the weight values on members of a skinCluster node, given as the first argument.",
            "name": "skinPercent",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "skinPercent( [object] [selectionList] , [ignoreBelow=float], [normalize=boolean], [pruneWeights=float], [relative=boolean], [resetToDefault=boolean], [transform=string], [transformMoveWeights=string], [transformValue=[string, float]], [value=boolean], [zeroRemainingInfluences=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The smooth command smooths the curve at the given control points.",
            "name": "smoothCurve",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "smoothCurve( selectionList , [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [object=boolean], [replaceOriginal=boolean], [smoothness=float])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The smoothTangentSurface command smooths the surface along an isoparm at each parameter value.",
            "name": "smoothTangentSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "smoothTangentSurface( surface , [caching=boolean], [constructionHistory=boolean], [direction=int], [name=string], [nodeState=int], [object=boolean], [parameter=float], [replaceOriginal=boolean], [smoothness=int])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command operates on a keyset.",
            "name": "snapKey",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of animation curves with keys that were not snapped because of time-snapping conflicts.",
                    "type": "int"
                }
            ],
            "synopsis": "snapKey( animatedObject , [animation=string], [attribute=string], [controlPoints=boolean], [float=floatrange], [hierarchy=string], [includeUpperBound=boolean], [index=uint], [mergeDuplicate=boolean], [shape=boolean], [time=timerange], [timeMultiple=float], [valueMultiple=float])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The snapMode command is used to control snapping.",
            "name": "snapMode",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "if command is a query",
                    "type": "boolean"
                }
            ],
            "synopsis": "snapMode([curve=boolean], [distanceIncrement=linear], [edgeMagnet=uint], [edgeMagnetTolerance=float], [grid=boolean], [liveFaceCenter=boolean], [livePoint=boolean], [meshCenter=boolean], [pixelCenter=boolean], [pixelSnap=boolean], [point=boolean], [tolerance=uint], [useTolerance=boolean], [uvTolerance=uint], [viewPlane=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command can be used to create either a series of surfaces evaluated at the times specified by the command flags, or a motion trail displaying the trajectory of the object's pivot point at the times specified.",
            "name": "snapshot",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "names of nodes created or edited: transform-name [snapshot-node-name]",
                    "type": "string[]"
                }
            ],
            "synopsis": "snapshot( [objects] , [constructionHistory=boolean], [endTime=time], [increment=time], [motionTrail=boolean], [name=string], [startTime=time], [update=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Creates a context for manipulating in and/or out tangent beads on the motion trail.",
            "name": "snapshotBeadCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "snapshotBeadCtx([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [inTangent=boolean], [name=string], [outTangent=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Creates a context for inserting/delete keys on an editable motion trail.",
            "name": "snapshotModifyKeyCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "snapshotModifyKeyCtx([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The snapTogetherCtx command creates a tool for snapping surfaces together.",
            "name": "snapTogetherCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "snapTogetherCtx( [contextName] , [clearSelection=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [setOrientation=boolean], [snapPolygonFace=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "Makes a soft body from the object(s) passed on the command line or in the selection list.",
            "name": "soft",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "array",
                    "type": "string"
                }
            ],
            "synopsis": "soft( selectionList , [convert=boolean], [duplicate=boolean], [duplicateHistory=boolean], [goal=float], [hideOriginal=boolean], [name=string])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "The softMod command creates a softMod or edits the membership of an existing softMod.",
            "name": "softMod",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "[] (the softMod node name and the softMod handle name)",
                    "type": "string"
                }
            ],
            "synopsis": "softMod( [objects] , [after=boolean], [afterReference=boolean], [before=boolean], [bindState=boolean], [components=boolean], [curveInterpolation=int], [curvePoint=float], [curveValue=float], [deformerTools=boolean], [envelope=float], [exclusive=string], [falloffAroundSelection=boolean], [falloffBasedOnX=boolean], [falloffBasedOnY=boolean], [falloffBasedOnZ=boolean], [falloffCenter=[float, float, float]], [falloffMasking=boolean], [falloffMode=int], [falloffRadius=float], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [name=string], [parallel=boolean], [prune=boolean], [relative=boolean], [remove=boolean], [resetGeometry=boolean], [selectedComponents=boolean], [split=boolean], [useComponentTags=boolean], [weightedNode=[string, string]])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Controls the softMod context.",
            "name": "softModCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- name of the new context created",
                    "type": "string"
                }
            ],
            "synopsis": "softModCtx( string , [dragSlider=string], [exists=boolean], [falseColor=boolean], [image1=string], [image2=string], [image3=string], [reset=boolean])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "This command allows you to change the soft modelling options.",
            "name": "softSelect",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "softSelect([compressUndo=int], [enableFalseColor=int], [softSelectColorCurve=string], [softSelectCurve=string], [softSelectDistance=float], [softSelectEnabled=int], [softSelectFalloff=int], [softSelectReset=boolean], [softSelectUVDistance=float])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Shows a preview of a specified material node output attribute.",
            "name": "soloMaterial",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure",
                    "type": "boolean"
                }
            ],
            "synopsis": "soloMaterial([attr=string], [last=boolean], [node=string], [unsolo=boolean])"
        },
        {
            "categories": [
                "Language",
                "Strings"
            ],
            "description": "This command sorts all the strings of an array in a case insensitive way.",
            "name": "sortCaseInsensitive",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "string to sort",
                    "type": "string[]"
                }
            ],
            "synopsis": "sortCaseInsensitive()"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Creates an audio node which can be used with UI commands such as soundControl or timeControl which support sound scrubbing and sound during playback.",
            "name": "sound",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of resulting audio node",
                    "type": "string"
                }
            ],
            "synopsis": "sound( [objects] , [endTime=time], [file=string], [length=boolean], [mute=boolean], [name=string], [offset=time], [sourceEnd=time], [sourceStart=time])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a control used for changing current time and scratching/scrubbing through sound files.",
            "name": "soundControl",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of created or edited control.",
                    "type": "string"
                }
            ],
            "synopsis": "soundControl( string , [annotation=string], [backgroundColor=[float, float, float]], [beginScrub=boolean], [defineTemplate=string], [displaySound=boolean], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [endScrub=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [maxTime=time], [minTime=time], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [pressCommand=string], [preventOverride=boolean], [releaseCommand=string], [repeatChunkSize=float], [repeatOnHold=boolean], [resample=boolean], [sound=string], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [waveform=string], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Create a poup with sound slider control that accepts only float values and is bound by a minimum and maximum value.",
            "name": "soundPopup",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "soundPopup( [string] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The command creates a locator at the specified position in space.",
            "name": "spaceLocator",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name for the new locator in space.",
                    "type": "string[]"
                }
            ],
            "synopsis": "spaceLocator([absolute=boolean], [name=string], [position=[linear, linear, linear]], [relative=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The sphere command creates a new sphere.",
            "name": "sphere",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "sphere([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [degree=int], [endSweep=angle], [heightRatio=float], [name=string], [nodeState=int], [object=boolean], [pivot=[linear, linear, linear]], [polygon=int], [radius=linear], [sections=int], [spans=int], [startSweep=angle], [tolerance=linear], [useTolerance=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Lights"
            ],
            "description": "TlightCmd is the base class for other light commands.",
            "name": "spotLight",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Light shape name boolean Barn door enabled state angle Left barn door angle angle Right barn door angle angle Top barn door angle angle Bottom barn door angle angle Cone angle angle Penumbra angle float Dropoff value",
                    "type": "string"
                },
                {
                    "description": "when querying the rgb or shadowColor flags double when querying the intensity flag boolean when querying the useRayTraceShadows or exclusive flags linear[] when querying the position flag angle[] when querying the rotation flag string when querying the name flag",
                    "type": "double[]"
                },
                {
                    "description": "rate of light decay, when querying the decayRate flag",
                    "type": "int"
                },
                {
                    "description": "Number of shadow samples, when querying the shadowSamples flag boolean True if soft shadows are enabled, when querying the softShadow flag float Shadow dithering value, when querying the shadowDither flag float Disc radius value, when querying the discRadius flag",
                    "type": "int"
                }
            ],
            "synopsis": "spotLight([barnDoors=boolean], [bottomBarnDoorAngle=angle], [coneAngle=angle], [decayRate=int], [discRadius=linear], [dropOff=float], [exclusive=boolean], [intensity=float], [leftBarnDoorAngle=angle], [name=string], [penumbra=angle], [position=[linear, linear, linear]], [rgb=[float, float, float]], [rightBarnDoorAngle=angle], [rotation=[angle, angle, angle]], [shadowColor=[float, float, float]], [shadowDither=float], [shadowSamples=int], [softShadow=boolean], [topBarnDoorAngle=angle], [useRayTraceShadows=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Lights"
            ],
            "description": "This command creates a 3dPort that displays an image representing the illumination provided by the spotLight.",
            "name": "spotLightPreviewPort",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- the name of the port created or modified",
                    "type": "string"
                }
            ],
            "synopsis": "spotLightPreviewPort( [string] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [spotLight=name], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int], [widthHeight=[int, int]])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command creates a new spread sheet editor in the current layout.",
            "name": "spreadSheetEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the editor",
                    "type": "string"
                }
            ],
            "synopsis": "spreadSheetEditor( [name] , [allAttr=boolean], [attrRegExp=string], [control=boolean], [defineTemplate=string], [docTag=string], [execute=string], [exists=boolean], [filter=string], [fixedAttrList=string[]], [forceMainConnection=string], [highlightConnection=string], [keyableOnly=boolean], [lockMainConnection=boolean], [longNames=boolean], [mainListConnection=string], [niceNames=boolean], [panel=string], [parent=string], [precision=int], [selectedAttr=boolean], [selectionConnection=string], [showShapes=boolean], [stateString=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "The spring command can do any of the following:.",
            "name": "spring",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "spring( objects , [addSprings=boolean], [allPoints=boolean], [count=boolean], [damping=float], [dampingPS=float], [endForceWeight=float], [exclusive=boolean], [length=float], [maxDistance=float], [minDistance=float], [minMax=boolean], [name=string], [noDuplicate=boolean], [restLength=float], [restLengthPS=float], [startForceWeight=float], [stiffness=float], [stiffnessPS=float], [useDampingPS=boolean], [useRestLengthPS=boolean], [useStiffnessPS=boolean], [walkLength=uint], [wireframe=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command produces a square surface given 3 or 4 curves.",
            "name": "squareSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "squareSurface( string string string [string] , [caching=boolean], [constructionHistory=boolean], [continuityType1=int], [continuityType2=int], [continuityType3=int], [continuityType4=int], [curveFitCheckpoints=int], [endPointTolerance=linear], [name=string], [nodeState=int], [object=boolean], [polygon=int], [rebuildCurve1=boolean], [rebuildCurve2=boolean], [rebuildCurve3=boolean], [rebuildCurve4=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create a combined transform (translate/scale/rotate) context.",
            "name": "srtContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- name of the newly created context",
                    "type": "string"
                }
            ],
            "synopsis": "srtContext([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "Create, edit or query a model editor.",
            "name": "stereoCameraView",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "the name of the editor.",
                    "type": "string"
                }
            ],
            "synopsis": "stereoCameraView( objects [editorName] , [activeComponentsXray=boolean], [activeCustomEnvironment=string], [activeCustomGeometry=string], [activeCustomLighSet=string], [activeCustomOverrideGeometry=string], [activeCustomRenderer=string], [activeOnly=boolean], [activeShadingGraph=string], [activeSupported=boolean], [activeView=boolean], [addObjects=string], [addSelected=boolean], [allObjects=boolean], [backfaceCulling=boolean], [bufferMode=string], [bumpResolution=[uint, uint]], [camera=string], [cameraName=string], [cameraSet=string], [cameraSetup=boolean], [cameras=boolean], [capture=string], [captureSequenceNumber=int], [centerCamera=string], [colorMap=boolean], [colorResolution=[uint, uint]], [control=boolean], [controlVertices=boolean], [cullingOverride=string], [default=boolean], [defineTemplate=string], [deformers=boolean], [dimensions=boolean], [displayAppearance=string], [displayLights=string], [displayMode=string], [displayTextures=boolean], [docTag=string], [dynamicConstraints=boolean], [dynamics=boolean], [editorChanged=script], [exists=boolean], [filter=string], [filteredObjectList=boolean], [fluids=boolean], [fogColor=[float, float, float, float]], [fogDensity=float], [fogEnd=float], [fogMode=string], [fogSource=string], [fogStart=float], [fogging=boolean], [follicles=boolean], [forceMainConnection=string], [grid=boolean], [hairSystems=boolean], [handles=boolean], [headsUpDisplay=boolean], [height=boolean], [highlightConnection=string], [hulls=boolean], [ignorePanZoom=boolean], [ikHandles=boolean], [imagePlane=boolean], [interactive=boolean], [interactiveBackFaceCull=boolean], [interactiveDisableShadows=boolean], [isFiltered=boolean], [jointXray=boolean], [joints=boolean], [leftCamera=string], [lights=boolean], [lineWidth=float], [locators=boolean], [lockMainConnection=boolean], [lowQualityLighting=boolean], [mainListConnection=string], [manipulators=boolean], [maxConstantTransparency=float], [maximumNumHardwareLights=boolean], [modelPanel=string], [motionTrails=boolean], [nCloths=boolean], [nParticles=boolean], [nRigids=boolean], [noUndo=boolean], [nurbsCurves=boolean], [nurbsSurfaces=boolean], [objectFilter=script], [objectFilterList=script], [objectFilterListUI=script], [objectFilterShowInHUD=boolean], [objectFilterUI=script], [occlusionCulling=boolean], [panel=string], [parent=string], [pivots=boolean], [planes=boolean], [pluginObjects=[string, boolean]], [pluginShapes=boolean], [polymeshes=boolean], [queryPluginObjects=string], [removeSelected=boolean], [rendererDeviceName=boolean], [rendererList=boolean], [rendererListUI=boolean], [rendererName=string], [rendererOverrideList=boolean], [rendererOverrideListUI=boolean], [rendererOverrideName=string], [resetCustomCamera=boolean], [rigRoot=string], [rightCamera=string], [sceneRenderFilter=string], [selectionConnection=string], [selectionHiliteDisplay=boolean], [setSelected=boolean], [shadingModel=int], [shadows=boolean], [smallObjectCulling=boolean], [smallObjectThreshold=float], [smoothWireframe=boolean], [sortTransparent=boolean], [stateString=boolean], [stereoDrawMode=boolean], [strokes=boolean], [subdivSurfaces=boolean], [swapEyes=boolean], [textureAnisotropic=boolean], [textureCompression=boolean], [textureDisplay=string], [textureEnvironmentMap=boolean], [textureHilight=boolean], [textureMaxSize=int], [textureMemoryUsed=boolean], [textureSampling=int], [textures=boolean], [transpInShadows=boolean], [transparencyAlgorithm=string], [twoSidedLighting=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateColorMode=boolean], [updateMainConnection=boolean], [useBaseRenderer=boolean], [useColorIndex=boolean], [useCustomBackground=boolean], [useDefaultMaterial=boolean], [useInteractiveMode=boolean], [useRGBImagePlane=boolean], [useReducedRenderer=boolean], [useTemplate=string], [userNode=string], [viewColor=[float, float, float, float]], [viewObjects=boolean], [viewSelected=boolean], [viewType=boolean], [width=boolean], [wireframeBackingStore=boolean], [wireframeOnShaded=boolean], [xray=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "This command manages the set of stereo rig tools.",
            "name": "stereoRigManager",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "stereoRigManager( objects , [addRig=[string, string, string]], [cameraSetFunc=[string, string]], [creationProcedure=[string, string]], [defaultRig=string], [delete=string], [language=[string, string]], [listRigs=boolean], [rigDefinition=string])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The stitchSurface command aligns two surfaces together to be G(0) and/or G(1) continuous by ajusting only the Control Vertices of the surfaces.",
            "name": "stitchSurface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "stitchSurface( [surfaceIsoparm] [surfaceIsoparm] , [bias=float], [caching=boolean], [cascade=boolean], [constructionHistory=boolean], [cvIthIndex=int], [cvJthIndex=int], [fixBoundary=boolean], [keepG0Continuity=boolean], [keepG1Continuity=boolean], [name=string], [nodeState=int], [numberOfSamples=int], [object=boolean], [parameterU=float], [parameterV=float], [positionalContinuity=boolean], [replaceOriginal=boolean], [stepCount=int], [tangentialContinuity=boolean], [togglePointNormals=boolean], [togglePointPosition=boolean], [toggleTolerance=boolean], [tolerance=linear], [weight0=float], [weight1=float])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The stitchSurfacePoints command aligns two or more surface points along the boundaries together to a single point.",
            "name": "stitchSurfacePoints",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "stitchSurfacePoints( selectionList , [bias=float], [caching=boolean], [cascade=boolean], [constructionHistory=boolean], [cvIthIndex=int], [cvJthIndex=int], [equalWeight=boolean], [fixBoundary=boolean], [keepG0Continuity=boolean], [keepG1Continuity=boolean], [name=string], [nodeState=int], [object=boolean], [parameterU=float], [parameterV=float], [positionalContinuity=boolean], [replaceOriginal=boolean], [stepCount=int], [tangentialContinuity=boolean], [togglePointNormals=boolean], [togglePointPosition=boolean], [toggleTolerance=boolean], [tolerance=linear])"
        },
        {
            "categories": [
                "Language",
                "Array"
            ],
            "description": "The stringArrayIntersector command creates and edits an object which is able to efficiently intersect large string arrays.",
            "name": "stringArrayIntersector",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the intersector.",
                    "type": "string"
                }
            ],
            "synopsis": "stringArrayIntersector( string , [allowDuplicates=boolean], [defineTemplate=string], [exists=boolean], [intersect=string[]], [reset=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Effects",
                "PaintEffects"
            ],
            "description": "The stroke command creates a new Paint Effects stroke node.",
            "name": "stroke",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(The path to the new stroke or the replaced stroke)",
                    "type": "string"
                }
            ],
            "synopsis": "stroke( [string] , [name=string], [pressure=boolean], [seed=int])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Projects a texture map onto an object, using several orthogonal projections simultaneously.",
            "name": "subdAutoProjection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "subdAutoProjection( selectionList , [caching=boolean], [constructionHistory=boolean], [layout=int], [layoutMethod=int], [name=string], [nodeState=int], [optimize=int], [percentageSpace=float], [planes=int], [scale=int], [skipIntersect=boolean], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Command cleans topology of subdiv surfaces - at all levels.",
            "name": "subdCleanTopology",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "subdCleanTopology()"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "This command converts a takes a subdivision surface, passed as the argument, and produces a subdivision surface with a number of hierarchy levels \"removed\".",
            "name": "subdCollapse",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The subd surface and optionally the dependency node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "subdCollapse( [string] , [caching=boolean], [constructionHistory=boolean], [level=int], [name=string], [nodeState=int], [object=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "This command duplicates the input subdivision surface object, connects up the outSubdiv attribute of the original subd shape to the create attribute of the newly created duplicate shape and copies over the shader assignments from the original shape to the new duplicated shape.",
            "name": "subdDuplicateAndConnect",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "subdDuplicateAndConnect( object )"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Command edits uvs on subdivision surfaces.",
            "name": "subdEditUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "subdEditUV([angle=float], [pivotU=float], [pivotV=float], [relative=boolean], [rotateRatio=float], [rotation=boolean], [scale=boolean], [scaleU=float], [scaleV=float], [uValue=float], [uvSetName=string], [vValue=float])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Provides useful information about the selected subdiv or components, such as the deepest subdivided level, the children or parents of the currently selected components, etc.",
            "name": "subdiv",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "subdiv([currentLevel=boolean], [currentSubdLevel=boolean], [deepestLevel=int], [displayLoad=boolean], [edgeStats=boolean], [faceStats=boolean], [maxPossibleLevel=int], [proxyMode=int], [smallOffsets=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Set the creasing on subdivision mesh edges or mesh points that are on the selection list.",
            "name": "subdivCrease",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "subdivCrease([sharpness=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Sets or querys the display smoothness of subdivision surfaces on the selection list or of all subdivision surfaces if the -all option is set.",
            "name": "subdivDisplaySmoothness",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "subdivDisplaySmoothness([all=boolean], [smoothness=int])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Move UVs in the texture plane to avoid overlaps.",
            "name": "subdLayoutUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "subdLayoutUV([caching=boolean], [constructionHistory=boolean], [flipReversed=boolean], [layout=int], [layoutMethod=int], [name=string], [nodeState=int], [percentageSpace=float], [rotateForBestFit=int], [scale=int], [separate=int], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "This command converts subdivision surface components from one or more types to another one or more types, and returns the list of the conversion.",
            "name": "subdListComponentConversion",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of subdivision surface components",
                    "type": "string[]"
                }
            ],
            "synopsis": "subdListComponentConversion( [objects...] , [border=boolean], [fromEdge=boolean], [fromFace=boolean], [fromUV=boolean], [fromVertex=boolean], [internal=boolean], [toEdge=boolean], [toFace=boolean], [toUV=boolean], [toVertex=boolean], [uvShell=boolean], [uvShellBorder=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Cut along edges of the texture mapping.",
            "name": "subdMapCut",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "subdMapCut([caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "This command can be used to Move and Sew together separate UV pieces along geometric edges.",
            "name": "subdMapSewMove",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "subdMapSewMove( selectionList , [caching=boolean], [constructionHistory=boolean], [limitPieceSize=boolean], [name=string], [nodeState=int], [numberFaces=int], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "Command matches topology across multiple subdiv surfaces - at all levels.",
            "name": "subdMatchTopology",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Success or Failure.",
                    "type": "boolean"
                }
            ],
            "synopsis": "subdMatchTopology([frontOfChain=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "This command takes a subdivision surface, passed as the argument, and produces a subdivision surface that is a mirror.",
            "name": "subdMirror",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The subdivision surface and optionally the dependency node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "subdMirror( [string] , [caching=boolean], [constructionHistory=boolean], [name=string], [nodeState=int], [object=boolean], [xMirror=boolean], [yMirror=boolean], [zMirror=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "TsubProjCmdBase is a base class for the command to create a mapping on the selected subdivision faces.",
            "name": "subdPlanarProjection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "subdPlanarProjection([caching=boolean], [constructionHistory=boolean], [createNewMap=boolean], [imageCenter=[float, float]], [imageCenterX=float], [imageCenterY=float], [imageScale=[float, float]], [imageScaleU=float], [imageScaleV=float], [insertBeforeDeformers=boolean], [keepImageRatio=boolean], [mapDirection=string], [name=string], [nodeState=int], [projectionCenter=[linear, linear, linear]], [projectionCenterX=linear], [projectionCenterY=linear], [projectionCenterZ=linear], [projectionHeight=linear], [projectionScale=[linear, linear]], [projectionWidth=linear], [rotate=[angle, angle, angle]], [rotateX=angle], [rotateY=angle], [rotateZ=angle], [rotationAngle=angle], [smartFit=boolean], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "The subdivision surface hierarchical edits will get copied into blind data on the given polygon.",
            "name": "subdToBlind",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "subdToBlind([absolutePosition=boolean], [includeCreases=boolean], [includeZeroOffsets=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "This command tessellates a subdivision surface and produces polygon.",
            "name": "subdToPoly",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The polygon and optionally the dependency node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "subdToPoly( [subd] , [addUnderTransform=boolean], [applyMatrixToResult=boolean], [caching=boolean], [connectShaders=boolean], [constructionHistory=boolean], [copyUVTopology=boolean], [depth=int], [extractPointPosition=boolean], [format=int], [inSubdCVId=[int, int]], [inSubdCVIdLeft=int], [inSubdCVIdRight=int], [maxPolys=int], [name=string], [nodeState=int], [object=boolean], [outSubdCVId=[int, int]], [outSubdCVIdLeft=int], [outSubdCVIdRight=int], [outv=int], [preserveVertexOrdering=boolean], [sampleCount=int], [shareUVs=boolean], [subdNormals=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "SubDs"
            ],
            "description": "The subdivision surface finer level uvs will get copied to the polygonToSubd node sent in as argument.",
            "name": "subdTransferUVsToCache",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "boolean"
                }
            ],
            "synopsis": "subdTransferUVsToCache()"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "This command can be used to replace the geometry which is already connected to deformers with a new geometry.",
            "name": "substituteGeometry",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of shapes that were replaced",
                    "type": "string"
                }
            ],
            "synopsis": "substituteGeometry([disableNonSkinDeformers=boolean], [newGeometryToLayer=boolean], [oldGeometryToLayer=boolean], [reWeightDistTolerance=float], [retainOldGeometry=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command sets the mouse and keyboard interaction mode for Maya and other Suites applications (if Maya is part of a Suites install).",
            "name": "suitePrefs",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "suitePrefs([applyToSuite=string], [installedAsSuite=boolean], [isCompleteSuite=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The cmd creates a NURBS spline surface (rational or non rational).",
            "name": "surface",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The path to the new surface",
                    "type": "string"
                }
            ],
            "synopsis": "surface([degreeU=int], [degreeV=int], [formU=string], [formV=string], [knotU=float], [knotV=float], [name=string], [objectSpace=boolean], [point=[linear, linear, linear]], [pointWeight=[linear, linear, linear, linear]], [worldSpace=boolean])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Maps surface detail from a source surface to a new texture map on a target surface.",
            "name": "surfaceSampler",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "surfaceSampler([camera=name], [fileFormat=string], [filename=string], [filterSize=float], [filterType=uint], [flipU=boolean], [flipV=boolean], [ignoreMirroredFaces=boolean], [ignoreTransforms=boolean], [mapHeight=uint], [mapMaterials=boolean], [mapOutput=string], [mapSpace=string], [mapWidth=uint], [maxSearchDistance=linear], [maximumValue=linear], [overscan=uint], [searchCage=string], [searchMethod=uint], [searchOffset=linear], [shadows=boolean], [source=string], [sourceUVSpace=string], [superSampling=uint], [target=string], [targetUVSpace=string], [useGeometryNormals=boolean], [uvSet=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "Add/Remove a relationship between an object and the current shading group.",
            "name": "surfaceShaderList",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "surfaceShaderList([add=name], [remove=name])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a 3dPort that displays a swatch representing the shading node.",
            "name": "swatchDisplayPort",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "- the name of the port created or modified",
                    "type": "string"
                }
            ],
            "synopsis": "swatchDisplayPort( [string] , [annotation=string], [backgroundColor=[float, float, float]], [borderColor=[float, float, float]], [borderWidth=int], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [pressCommand=script], [preventOverride=boolean], [renderPriority=int], [renderSize=int], [shadingNode=name], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int], [widthHeight=[int, int]])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "The `swatchRefresh` command causes image source node swatches to be refreshed on screen.",
            "name": "swatchRefresh",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "true if all arguments are valid image source nodes and the operation succeded.",
                    "type": "boolean"
                }
            ],
            "synopsis": "swatchRefresh()"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates/edits/queries the switch table control.",
            "name": "switchTable",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the switch table control.",
                    "type": "string"
                }
            ],
            "synopsis": "switchTable( [string] , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label1=string], [label2=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [selectedRow=boolean], [statusBarMessage=string], [switchNode=name], [underPointerRow=boolean], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a symbol button.",
            "name": "symbolButton",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "symbolButton( [string] , [annotation=string], [backgroundColor=[float, float, float]], [command=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [image=string], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a symbol check box.",
            "name": "symbolCheckBox",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "symbolCheckBox( [string] , [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [disableOffImage=string], [disableOnImage=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [image=string], [innerMargin=boolean], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [offCommand=script], [offImage=string], [onCommand=script], [onImage=string], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [value=boolean], [version=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "General",
                "Selection"
            ],
            "description": "This command allows you to change the symmetric modelling options.",
            "name": "symmetricModelling",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "symmetricModelling([about=string], [allowPartial=boolean], [axis=string], [preserveSeam=int], [reset=boolean], [seamFalloffCurve=string], [seamTolerance=float], [symmetry=int], [tolerance=float], [topoSymmetry=boolean])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "This command provides a system independent way to create a directory or to rename or delete a file.",
            "name": "sysFile",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "True if successful, false otherwise.",
                    "type": "boolean"
                }
            ],
            "synopsis": "sysFile( string , [copy=string], [delete=boolean], [makeDir=boolean], [move=string], [removeEmptyDir=boolean], [rename=string])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "This command creates a tab group.",
            "name": "tabLayout",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "tabLayout( [string] , [annotation=string], [backgroundColor=[float, float, float]], [borderStyle=string], [changeCommand=script], [childArray=boolean], [childResizable=boolean], [closeTab=int], [closeTabCommand=script], [defineTemplate=string], [docTag=string], [doubleClickCommand=script], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [horizontalScrollBarThickness=int], [image=string], [imageVisible=boolean], [innerMarginHeight=int], [innerMarginWidth=int], [isObscured=boolean], [manage=boolean], [minChildWidth=int], [moveTab=[int, int]], [newTabCommand=script], [noBackground=boolean], [numberOfChildren=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [postMenuCommand=script], [preSelectCommand=script], [preventOverride=boolean], [scrollable=boolean], [scrollableTabs=boolean], [selectCommand=script], [selectTab=string], [selectTabIndex=int], [showNewTab=boolean], [statusBarMessage=string], [tabIcon=[string, string]], [tabIconIndex=[int, string]], [tabLabel=[string, string]], [tabLabelIndex=[int, string]], [tabPosition=string], [tabTooltip=[string, string]], [tabTooltipIndex=[int, string]], [tabsClosable=boolean], [tabsVisible=boolean], [useTemplate=string], [verticalScrollBarThickness=int], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation",
                "Constraints"
            ],
            "description": "Constrain an object's orientation based on the tangent of the target curve[s] at the closest point[s] to the object.",
            "name": "tangentConstraint",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the created constraint node",
                    "type": "string[]"
                }
            ],
            "synopsis": "tangentConstraint( [target...] object , [aimVector=[float, float, float]], [layer=string], [name=string], [remove=boolean], [targetList=boolean], [upVector=[float, float, float]], [weight=float], [weightAliasList=boolean], [worldUpObject=name], [worldUpType=string], [worldUpVector=[float, float, float]])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a new context to weld vertices together on a poly object.",
            "name": "targetWeldCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "targetWeldCtx([exists=boolean], [image1=string], [image2=string], [image3=string], [mergeToCenter=boolean], [preserveUV=boolean])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command is used to create, edit and query tension nodes.",
            "name": "tension",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Tension deformer node name",
                    "type": "string"
                }
            ],
            "synopsis": "tension( selectionList , [after=boolean], [afterReference=boolean], [before=boolean], [components=boolean], [deformerTools=boolean], [envelope=float], [exclusive=string], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [inwardConstraint=float], [name=string], [outwardConstraint=float], [parallel=boolean], [pinBorderVertices=boolean], [prune=boolean], [remove=boolean], [selectedComponents=boolean], [smoothingIterations=uint], [smoothingStep=float], [split=boolean], [useComponentTags=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context for cut uv tool.",
            "name": "texCutContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Size of the brush rung, when querying brushSize",
                    "type": "float"
                },
                {
                    "description": "The value of the edge selection sensitivity, when querying the edgeSelectSensitive flag.",
                    "type": "float"
                },
                {
                    "description": "Whether steady stroke is on or not, when querying the steadyStroke flag.",
                    "type": "boolean"
                },
                {
                    "description": "The distance for a steady stroke, when querying the steadyStrokeDistance flag.",
                    "type": "float"
                },
                {
                    "description": "The cut open ratio relative to edge length, when querying the moveRatio flag.",
                    "type": "float"
                },
                {
                    "description": "The type of effect the brush will perform, when querying the mode flag.",
                    "type": "string"
                },
                {
                    "description": "Whether shell borders are displayed, when querying the displayShellBorders flag.",
                    "type": "boolean"
                },
                {
                    "description": "Current touch-to-sew mode, when querying the touchToSew flag.",
                    "type": "boolean"
                }
            ],
            "synopsis": "texCutContext( contextName , [adjustSize=boolean], [displayShellBorders=boolean], [edgeSelectSensitive=float], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [mode=string], [moveRatio=float], [name=string], [size=float], [steadyStroke=boolean], [steadyStrokeDistance=float], [touchToSew=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context which may be used to deform UV maps with lattice manipulator.",
            "name": "texLatticeDeformContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Number of column divisions, when querying the latticeColumns flag.",
                    "type": "int"
                },
                {
                    "description": "Number of row divisions, when querying the latticeRows flag.",
                    "type": "int"
                },
                {
                    "description": "Value of the deform envelope, when querying the envelope flag.",
                    "type": "float"
                },
                {
                    "description": "Whether snapping to pixels is on, when querying the snapPixelMode flag.",
                    "type": "boolean"
                },
                {
                    "description": "Whether the bounding rectangle is to be used for deforemation, when querying the useBoundingRect flag.",
                    "type": "boolean"
                }
            ],
            "synopsis": "texLatticeDeformContext( contextName , [envelope=float], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [latticeColumns=uint], [latticeRows=uint], [name=string], [showMoveManipulator=boolean], [snapPixelMode=boolean], [useBoundingRect=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Command used to register the texSelectCtx tool.",
            "name": "texManipContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": ": name of the context created",
                    "type": "string"
                },
                {
                    "description": ": name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "texManipContext([exists=boolean], [image1=string], [image2=string], [image3=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a texture editor move manip context.",
            "name": "texMoveContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "texMoveContext( [object] , [editPivotMode=boolean], [exists=boolean], [image1=string], [image2=string], [image3=string], [position=boolean], [snap=boolean], [snapComponentsRelative=boolean], [snapPixelMode=int], [snapValue=float], [tweakMode=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a texture editor move manip context.",
            "name": "texMoveUVShellContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "texMoveUVShellContext( [object] , [exists=boolean], [image1=string], [image2=string], [image3=string], [iterations=int], [mask=boolean], [position=boolean], [shellBorder=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a rotate context for the UV Editor.",
            "name": "texRotateContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": ": name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "texRotateContext([editPivotMode=boolean], [exists=boolean], [image1=string], [image2=string], [image3=string], [position=boolean], [snap=boolean], [snapRelative=boolean], [snapValue=float], [tweakMode=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a scale context for the UV Editor.",
            "name": "texScaleContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": ": name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "texScaleContext([editPivotMode=boolean], [exists=boolean], [image1=string], [image2=string], [image3=string], [position=boolean], [preventNegativeScale=boolean], [snap=boolean], [snapRelative=boolean], [snapValue=float], [tweakMode=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This is a tool context command for uv cache sculpting tool.",
            "name": "texSculptCacheContext",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "texSculptCacheContext([adjustSize=boolean], [adjustStrength=boolean], [direction=int], [falloffType=int], [floodPin=float], [grabTwist=boolean], [inverted=boolean], [mode=string], [sculptFalloffCurve=string], [showBrushRingDuringStroke=boolean], [size=float], [strength=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Command used to register the texSelectCtx tool.",
            "name": "texSelectContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": ": name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "texSelectContext([exists=boolean], [image1=string], [image2=string], [image3=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Creates a new context to select shortest edge path between two vertices or UVs in the texture editor window.",
            "name": "texSelectShortestPathCtx",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "texSelectShortestPathCtx([exists=boolean], [image1=string], [image2=string], [image3=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context for smudge UV tool.",
            "name": "texSmudgeUVContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the effect type created.",
                    "type": "string"
                }
            ],
            "synopsis": "texSmudgeUVContext( contextName , [dragSlider=string], [effectType=string], [exists=boolean], [functionType=string], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [pressure=float], [radius=float], [smudgeIsMiddle=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Create a simple text label control.",
            "name": "text",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "text( [string] , [align=string], [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [dropRectCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [font=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [hyperlink=boolean], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [recomputeSize=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int], [wordWrap=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Curves"
            ],
            "description": "The textCurves command creates NURBS curves from a text string using the specified font.",
            "name": "textCurves",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "textCurves( [string] , [font=string], [name=string], [object=boolean], [text=string])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Create a text field control.",
            "name": "textField",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "textField( [string] , [alwaysInvokeEnterCommandOnReturn=boolean], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [disableButtons=boolean], [disableClearButton=boolean], [disableHistoryButton=boolean], [docTag=string], [dragCallback=script], [drawInactiveFrame=boolean], [dropCallback=script], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [enterCommand=script], [exists=boolean], [fileName=string], [font=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [insertText=string], [insertionPosition=int], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [placeholderText=string], [popupMenuArray=boolean], [preventOverride=boolean], [receiveFocusCommand=script], [searchField=boolean], [statusBarMessage=string], [text=string], [textChangedCommand=script], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "textFieldButtonGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "textFieldButtonGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [buttonCommand=script], [buttonLabel=string], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableButton=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fileName=string], [forceChangeCommand=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [insertText=string], [insertionPosition=int], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [placeholderText=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowAttach=[int, string, int]], [statusBarMessage=string], [text=string], [textChangedCommand=script], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "textFieldGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "textFieldGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fileName=string], [forceChangeCommand=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [insertText=string], [insertionPosition=int], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [placeholderText=string], [popupMenuArray=boolean], [preventOverride=boolean], [rowAttach=[int, string, int]], [statusBarMessage=string], [text=string], [textChangedCommand=script], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "Shows/hides the text manip.",
            "name": "textManip",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "textManip([visible=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates/edits/queries a text scrolling list.",
            "name": "textScrollList",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "textScrollList( [string] , [allItems=boolean], [allowAutomaticSelection=boolean], [allowMultiSelection=boolean], [annotation=string], [append=string], [appendPosition=[int, string]], [backgroundColor=[float, float, float]], [defineTemplate=string], [deleteKeyCommand=script], [deselectAll=boolean], [deselectIndexedItem=int], [deselectItem=string], [docTag=string], [doubleClickCommand=script], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [font=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [lineFont=[int, string]], [manage=boolean], [noBackground=boolean], [numberOfItems=boolean], [numberOfPopupMenus=boolean], [numberOfRows=int], [numberOfSelectedItems=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [removeAll=boolean], [removeIndexedItem=int], [removeItem=string], [selectCommand=script], [selectIndexedItem=int], [selectItem=string], [selectUniqueTagItem=string], [showIndexedItem=int], [statusBarMessage=string], [uniqueTag=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates a texture deformer for the object.",
            "name": "textureDeformer",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Texture deformer node name",
                    "type": "string"
                }
            ],
            "synopsis": "textureDeformer( selectionList , [after=boolean], [afterReference=boolean], [before=boolean], [components=boolean], [deformerTools=boolean], [direction=string], [envelope=float], [exclusive=string], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [name=string], [offset=float], [parallel=boolean], [pointSpace=string], [prune=boolean], [remove=boolean], [selectedComponents=boolean], [split=boolean], [strength=float], [useComponentTags=boolean], [vectorOffset=[float, float, float]], [vectorSpace=string], [vectorStrength=[float, float, float]])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "Create a command for creating new texture placement contexts.",
            "name": "texturePlacementContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "texturePlacementContext([exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [labelMapping=boolean], [name=string])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command is used to create a UV Editor and to query or edit the texture editor settings.",
            "name": "textureWindow",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the texture window",
                    "type": "string"
                }
            ],
            "synopsis": "textureWindow( string , [activeSelectionOnTop=boolean], [axesColor=[float, float, float]], [backFacingColor=[float, float, float, float]], [capture=string], [captureSequenceNumber=int], [changeCommand=[string, string, string, string]], [checkerColor1=[float, float, float]], [checkerColor2=[float, float, float]], [checkerColorMode=int], [checkerDensity=int], [checkerDrawTileLabels=boolean], [checkerGradient1=[float, float, float]], [checkerGradient2=[float, float, float]], [checkerGradientOverlay=boolean], [checkerTileLabelColor=[float, float, float]], [clearImage=boolean], [cmEnabled=boolean], [control=boolean], [defineTemplate=string], [displayAxes=boolean], [displayCheckered=boolean], [displayDistortion=boolean], [displayDivisionLines=boolean], [displayGridLines=boolean], [displayImage=int], [displayIsolateSelectHUD=boolean], [displayLabels=boolean], [displayOverlappingUVCountHUD=boolean], [displayPreselection=boolean], [displayReversedUVCountHUD=boolean], [displaySolidMap=boolean], [displayStyle=string], [displayTextureBorder=boolean], [displayUVPositionHUD=boolean], [displayUVShellCountHUD=boolean], [displayUVStatisticsHUD=boolean], [displayUsedPercentageHUD=boolean], [distortionAlpha=float], [distortionPerObject=boolean], [divisions=int], [docTag=string], [doubleBuffer=boolean], [drawAxis=boolean], [drawSubregions=boolean], [exists=boolean], [exposure=float], [filter=string], [forceMainConnection=string], [forceRebake=boolean], [frameAll=boolean], [frameSelected=boolean], [frontFacingColor=[float, float, float, float]], [gamma=float], [gridLinesColor=[float, float, float]], [gridNumbersColor=[float, float, float]], [highlightConnection=string], [imageBaseColor=[float, float, float]], [imageDim=boolean], [imageDisplay=boolean], [imageNames=boolean], [imageNumber=int], [imagePixelSnap=boolean], [imageRatio=boolean], [imageRatioValue=float], [imageSize=boolean], [imageTileRange=[float, float, float, float]], [imageUnfiltered=boolean], [internalFaces=boolean], [labelPosition=string], [loadImage=string], [lockMainConnection=boolean], [mainListConnection=string], [maxResolution=int], [multiColorAlpha=float], [nbImages=boolean], [nextView=boolean], [numUvSets=boolean], [numberOfImages=int], [numberOfTextures=int], [panel=string], [parent=string], [previousView=boolean], [realSize=boolean], [refresh=boolean], [relatedFaces=boolean], [removeAllImages=boolean], [removeImage=boolean], [rendererString=string], [reset=boolean], [saveImage=boolean], [scaleBlue=float], [scaleGreen=float], [scaleRed=float], [selectInternalFaces=boolean], [selectRelatedFaces=boolean], [selectionConnection=string], [setUvSet=int], [singleBuffer=boolean], [size=float], [solidMap3dView=boolean], [solidMapColorSeed=int], [solidMapPerShell=boolean], [spacing=float], [stateString=boolean], [style=int], [subdivisionLinesColor=[float, float, float]], [textureBorder3dView=boolean], [textureBorderColor=[float, float, float]], [textureBorderWidth=int], [textureNames=boolean], [textureNumber=int], [tileLabels=boolean], [tileLinesColor=[float, float, float]], [toggle=boolean], [toggleExposure=boolean], [toggleGamma=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useFaceGroup=boolean], [useTemplate=string], [usedPercentageHUDRange=[float, float, float, float]], [uvSets=boolean], [viewPortImage=boolean], [viewTransformName=string], [wireframeComponentColor=[float, float, float, float]], [wireframeObjectColor=[float, float, float, float]], [writeImage=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a texture editor move manip context.",
            "name": "texTweakUVContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(the name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "texTweakUVContext( [object] , [exists=boolean], [image1=string], [image2=string], [image3=string], [position=boolean], [tolerance=float])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This class creates a context for the View Tools \"track\", \"dolly\", and \"box zoom\" in the texture window.",
            "name": "texWinToolCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Context name",
                    "type": "string"
                }
            ],
            "synopsis": "texWinToolCtx([alternateContext=boolean], [boxzoom=boolean], [dolly=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [toolName=string], [track=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command sets the number of threads to be used by Maya in regions of code that are multithreaded.",
            "name": "threadCount",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "threadCount([numberOfThreads=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The threePointArcCtx command creates a new context for creating 3 point arcs.",
            "name": "threePointArcCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "(name of the new context)",
                    "type": "string"
                }
            ],
            "synopsis": "threePointArcCtx([degree=uint], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [spans=uint])"
        },
        {
            "categories": [
                "Windows",
                "Misc. UI"
            ],
            "description": "This command is used to generate a thumbnail/playblast sequence from the scene.",
            "name": "thumbnailCaptureComponent",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "thumbnailCaptureComponent( [string] , [capture=boolean], [capturedFrameCount=boolean], [closeCurrentSession=boolean], [delete=boolean], [endFrame=int], [fileDialogCallback=string], [isSessionOpened=boolean], [launchedFromOptionsBox=boolean], [previewPath=boolean], [removeProjectThumbnail=string], [save=string], [startFrame=int])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "Use this command to query and set the time code information in the file.",
            "name": "timeCode",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "values",
                    "type": "time"
                }
            ],
            "synopsis": "timeCode([mayaStartFrame=float], [productionStartFrame=float], [productionStartHour=float], [productionStartMinute=float], [productionStartSecond=float])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a control that can be used for changing current time, displaying/editing keys, and displaying/scrubbing sound.",
            "name": "timeControl",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of created or edited control",
                    "type": "string"
                }
            ],
            "synopsis": "timeControl( string , [animCurveNames=boolean], [animLayerFilterOptions=string], [animLayerShowWeight=boolean], [annotation=string], [backgroundColor=[float, float, float]], [beginScrub=boolean], [currentFrameColor=[float, float, float, float]], [defineTemplate=string], [displaySound=boolean], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [endScrub=boolean], [exists=boolean], [forceRedraw=boolean], [forceRefresh=boolean], [foregroundColor=[float, float, float]], [fullPathName=boolean], [globalTime=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [mainListConnection=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [pressCommand=script], [preventOverride=boolean], [range=boolean], [rangeArray=boolean], [rangeVisible=boolean], [releaseCommand=script], [repeatChunkSize=float], [repeatOnHold=boolean], [resample=boolean], [showKeys=string], [showKeysCombined=boolean], [snap=boolean], [sound=string], [statusBarMessage=string], [tickSize=int], [tickSpan=int], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [waveform=string], [width=int])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "General Time Editor commands.",
            "name": "timeEditor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "timeEditor([allClips=string], [clipId=int], [commonParentTrack=boolean], [composition=string], [drivingClipsForAttr=string], [drivingClipsForObj=[string, int]], [includeParent=boolean], [mute=boolean], [selectedClips=string], [topLevelClips=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Commands for managing animation sources.",
            "name": "timeEditorAnimSource",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "timeEditorAnimSource([addObjects=string], [addRelatedKG=boolean], [addSelectedObjects=boolean], [addSource=string], [apply=boolean], [attribute=string], [bakeToAnimSource=string], [calculateTiming=boolean], [copyAnimation=boolean], [drivenClips=boolean], [exclusive=boolean], [export=string], [importAllFbxTakes=boolean], [importFbx=string], [importFbxTakes=string], [importMayaFile=string], [importOption=string], [importPopulateOption=string], [importedContainerNames=string], [includeRoot=boolean], [isUnique=boolean], [populateImportedAnimSources=string], [poseClip=boolean], [recursively=boolean], [removeSceneAnimation=boolean], [removeSource=string], [showAnimSourceRemapping=boolean], [takeList=string], [takesToImport=string], [targetIndex=string], [targets=boolean], [type=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command is used to bake Time Editor clips and to blend them into a single clip.",
            "name": "timeEditorBakeClips",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "int"
                }
            ],
            "synopsis": "timeEditorBakeClips( objects , [bakeToAnimSource=string], [bakeToClip=string], [clipId=int], [combineLayers=boolean], [forceSampling=boolean], [keepOriginalClip=boolean], [path=string], [sampleBy=time], [targetTrackIndex=int], [targetTracksNode=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command edits/queries Time Editor clips.",
            "name": "timeEditorClip",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Return created clip's name.",
                    "type": "string"
                }
            ],
            "synopsis": "timeEditorClip([absolute=boolean], [addAttribute=string], [addObjects=string], [addRelatedKG=boolean], [addSelectedObjects=boolean], [allowShrinking=boolean], [animSource=string], [attribute=string], [audio=string], [blendMode=int], [children=int], [clipAfter=boolean], [clipBefore=boolean], [clipDataType=boolean], [clipId=int], [clipIdFromNodeName=int], [clipIdFromPath=boolean], [clipNode=boolean], [clipPath=boolean], [copyClip=boolean], [crossfadeMode=int], [crossfadePlug=boolean], [curveTime=time], [defaultGhostRoot=boolean], [drivenAttributes=boolean], [drivenClipsBySource=string], [drivenObjects=boolean], [drivenRootObjects=boolean], [drivingSources=string], [duplicateClip=boolean], [duration=time], [emptySource=boolean], [endTime=time], [exclusive=boolean], [existingOnly=boolean], [exists=boolean], [explode=int], [exportAllClips=boolean], [exportFbx=string], [extend=boolean], [extendParent=boolean], [ghost=boolean], [ghostRootAdd=string], [ghostRootRemove=string], [group=boolean], [holdEnd=time], [holdStart=time], [importAllFbxTakes=boolean], [importFbx=string], [importFbxTakes=string], [importMayaFile=string], [importOption=string], [importPopulateOption=string], [importTakeDestination=int], [importedContainerNames=string], [includeRoot=boolean], [isContainer=boolean], [listUserGhostRoot=boolean], [loopEnd=time], [loopStart=time], [minClipDuration=boolean], [modifyAnimSource=boolean], [moveClip=time], [mute=boolean], [name=string], [parent=int], [parentClipId=int], [parentGroupId=boolean], [pasteClip=time], [path=string], [populateImportedAnimSources=string], [poseClip=boolean], [preserveAnimationTiming=boolean], [razorClip=time], [recursively=boolean], [remap=[string, string]], [remapNamespace=[string, string]], [remapSource=[string, string]], [remappedSourceAttrs=boolean], [remappedTargetAttrs=boolean], [removeAttribute=string], [removeClip=boolean], [removeCrossfade=boolean], [removeSceneAnimation=boolean], [removeWeightCurve=boolean], [resetTiming=boolean], [resetTransition=boolean], [ripple=boolean], [rootClipId=int], [rootPath=string], [scaleEnd=time], [scalePivot=time], [scaleStart=time], [setKeyframe=string], [showAnimSourceRemapping=boolean], [speedRamping=int], [startTime=time], [takeList=string], [takesToImport=string], [timeWarp=boolean], [timeWarpCurve=boolean], [timeWarpType=int], [track=string], [tracksNode=boolean], [transition=boolean], [trimEnd=time], [trimStart=time], [truncated=boolean], [type=string], [uniqueAnimSource=boolean], [userGhostRoot=boolean], [weightCurve=boolean], [zeroKeying=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Time Editor clip layers commands.",
            "name": "timeEditorClipLayer",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "timeEditorClipLayer([addAttribute=string], [addLayer=string], [addObject=string], [allLayers=boolean], [attribute=string], [attributeKeyable=string], [clipId=int], [index=int], [keySiblings=boolean], [layerId=int], [layerName=string], [mode=int], [mute=boolean], [name=boolean], [path=string], [removeAttribute=string], [removeLayer=boolean], [removeObject=string], [resetSolo=boolean], [setKeyframe=boolean], [solo=boolean], [zeroKeying=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command is used to compute an offset to apply on a source clip in order to automatically align it to a destination clip at a specified match element.",
            "name": "timeEditorClipOffset",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "timeEditorClipOffset([applyToAllRoots=boolean], [clipId=int], [matchClipId=int], [matchDstTime=time], [matchObj=name], [matchOffsetRot=boolean], [matchOffsetTrans=boolean], [matchPath=string], [matchRotOp=int], [matchSrcTime=time], [matchTransOp=int], [offsetTransform=boolean], [path=string], [resetMatch=int], [resetMatchPath=string], [rootObj=string], [upVectorX=float], [upVectorY=float], [upVectorZ=float])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Commands related to composition management inside Time Editor.",
            "name": "timeEditorComposition",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Return values currently not documented.",
                    "type": "string"
                }
            ],
            "synopsis": "timeEditorComposition([active=boolean], [allCompositions=boolean], [createTrack=boolean], [delete=boolean], [duplicateFrom=string], [rename=[string, string]], [tracksNode=boolean])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Time Editor - non-linear animation editor.",
            "name": "timeEditorPanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "timeEditorPanel( editorName , [activeClipEditMode=int], [activeTabRootClipId=boolean], [activeTabTime=boolean], [activeTabView=int], [autoFit=string], [autoFitTime=string], [control=boolean], [defineTemplate=string], [displayActiveKeyTangents=string], [displayActiveKeys=string], [displayInfinities=string], [displayKeys=string], [displayTangents=string], [displayValues=string], [docTag=string], [exists=boolean], [filter=string], [forceMainConnection=string], [groupIdForTabView=int], [highlightConnection=string], [keyingTarget=int], [layerId=int], [lockMainConnection=boolean], [lookAt=string], [mainListConnection=string], [menu=script], [minClipWidth=int], [panel=string], [parent=string], [selectionConnection=string], [setToPrevClipEditMode=boolean], [snapTime=string], [snapToClip=boolean], [snapToFrame=boolean], [snapTolerance=int], [snapValue=string], [stateString=boolean], [tabView=int], [timeCursor=boolean], [unParent=boolean], [unlockMainConnection=boolean], [updateMainConnection=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Time Editor tracks commands.",
            "name": "timeEditorTracks",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "In edit mode, return the newly created Track index.",
                    "type": "Int"
                }
            ],
            "synopsis": "timeEditorTracks([activeClipWeight=time], [activeClipWeightId=time], [addTrack=int], [allClips=boolean], [allTracks=boolean], [allTracksRecursive=boolean], [composition=boolean], [path=string], [plugIndex=int], [removeTrack=int], [removeTrackByPath=string], [reorderTrack=[int, int]], [resetMute=boolean], [resetSolo=boolean], [selectedTracks=boolean], [trackGhost=boolean], [trackIndex=int], [trackMuted=boolean], [trackName=string], [trackSolo=boolean], [trackType=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "Create a field control that accepts only time values.",
            "name": "timeField",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "timeField( [string] , [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [editable=boolean], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [enterCommand=script], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [receiveFocusCommand=script], [statusBarMessage=string], [step=time], [useTemplate=string], [value=time], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "All of the group commands position their individual controls in columns starting at column 1.",
            "name": "timeFieldGrp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "timeFieldGrp( [groupName] , [adjustableColumn=int], [adjustableColumn2=int], [adjustableColumn3=int], [adjustableColumn4=int], [adjustableColumn5=int], [adjustableColumn6=int], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [columnAlign=[int, string]], [columnAlign2=[string, string]], [columnAlign3=[string, string, string]], [columnAlign4=[string, string, string, string]], [columnAlign5=[string, string, string, string, string]], [columnAlign6=[string, string, string, string, string, string]], [columnAttach=[int, string, int]], [columnAttach2=[string, string]], [columnAttach3=[string, string, string]], [columnAttach4=[string, string, string, string]], [columnAttach5=[string, string, string, string, string]], [columnAttach6=[string, string, string, string, string, string]], [columnOffset2=[int, int]], [columnOffset3=[int, int, int]], [columnOffset4=[int, int, int, int]], [columnOffset5=[int, int, int, int, int]], [columnOffset6=[int, int, int, int, int, int]], [columnWidth=[int, int]], [columnWidth1=int], [columnWidth2=[int, int]], [columnWidth3=[int, int, int]], [columnWidth4=[int, int, int, int]], [columnWidth5=[int, int, int, int, int]], [columnWidth6=[int, int, int, int, int, int]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dragCommand=script], [dropCallback=script], [enable=boolean], [enable1=boolean], [enable2=boolean], [enable3=boolean], [enable4=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [extraLabel=string], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfFields=int], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [precision=int], [preventOverride=boolean], [rowAttach=[int, string, int]], [statusBarMessage=string], [step=time], [useTemplate=string], [value=[time, time, time, time]], [value1=time], [value2=time], [value3=time], [value4=time], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a simple time control widget.",
            "name": "timePort",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Widget name",
                    "type": "string"
                }
            ],
            "synopsis": "timePort( name , [annotation=string], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [globalTime=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [snap=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Allow simple timing of scripts and commands.",
            "name": "timer",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "timer([endTimer=boolean], [lapTime=boolean], [name=string], [startTimer=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Used to calculate elapsed time.",
            "name": "timerX",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "This command returns a different value depending on the flag used. If no flag is used, then the start time is returned. If the \"-st\" flag is used, then it returns the elapsed time since the start time.",
                    "type": "float"
                }
            ],
            "synopsis": "timerX([startTime=float])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "This command is used to create a time warp input to a set of animation curves.",
            "name": "timeWarp",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "timeWarp name",
                    "type": "string"
                }
            ],
            "synopsis": "timeWarp([deleteFrame=int], [frame=float], [g=boolean], [interpType=[int, string]], [moveFrame=[int, float]])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "The toggle command is used to toggle the display of various object features for objects which have these components.",
            "name": "toggle",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "when in the query mode. none otherwise.",
                    "type": "boolean"
                }
            ],
            "synopsis": "toggle( [objects] , [above=boolean], [below=boolean], [boundary=boolean], [boundingBox=boolean], [controlVertex=boolean], [doNotWrite=boolean], [editPoint=boolean], [extent=boolean], [facet=boolean], [geometry=boolean], [gl=boolean], [highPrecisionNurbs=boolean], [hull=boolean], [latticePoint=boolean], [latticeShape=boolean], [localAxis=boolean], [newCurve=boolean], [newPolymesh=boolean], [newSurface=boolean], [normal=boolean], [origin=boolean], [point=boolean], [pointDisplay=boolean], [pointFacet=boolean], [rotatePivot=boolean], [scalePivot=boolean], [selectHandle=boolean], [state=boolean], [surfaceFace=boolean], [template=boolean], [uvCoords=boolean], [vertex=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Toggles the state of the display axis.",
            "name": "toggleAxis",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "if in the query mode, otherwise none.",
                    "type": "boolean"
                }
            ],
            "synopsis": "toggleAxis([origin=boolean], [view=boolean])"
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "This command toggles the displacement preview of the polygon.",
            "name": "toggleDisplacement",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "toggleDisplacement( [objects] )"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "Toggle the visibility of a window.",
            "name": "toggleWindowVisibility",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "toggleWindowVisibility( [string] )"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command sets tolerances used by modelling operations that require a tolerance, such as surface fillet.",
            "name": "tolerance",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "tolerance([angular=angle], [linear=linear])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "Create a toolbar.",
            "name": "toolBar",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "toolBar( [name] , [allowedArea=string], [annotation=string], [area=string], [backgroundColor=[float, float, float]], [content=string], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [label=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a toolButton that is added to the most recently created tool button collection unless the `cl/collection` flag is used.",
            "name": "toolButton",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the toolButton created.",
                    "type": "string"
                }
            ],
            "synopsis": "toolButton( [string] , [allowMultipleTools=boolean], [annotation=string], [backgroundColor=[float, float, float]], [changeCommand=script], [collection=string], [defineTemplate=string], [docTag=string], [doubleClickCommand=script], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [image1=string], [image2=string], [image3=string], [imageOverlayLabel=string], [isObscured=boolean], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [offCommand=script], [onCommand=script], [parent=string], [popupIndicatorVisible=boolean], [popupMenuArray=boolean], [preventOverride=boolean], [select=boolean], [statusBarMessage=string], [style=string], [tool=string], [toolArray=boolean], [toolCount=boolean], [toolImage1=[string, string]], [toolImage2=[string, string]], [toolImage3=[string, string]], [useTemplate=string], [version=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a tool button collection.",
            "name": "toolCollection",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the toolCollection created.",
                    "type": "string"
                }
            ],
            "synopsis": "toolCollection( [string] , [collectionItemArray=boolean], [defineTemplate=string], [exists=boolean], [gl=boolean], [numberOfCollectionItems=boolean], [parent=string], [select=string], [useTemplate=string])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command builds and executes the commands necessary to recreate the specified tool button.",
            "name": "toolDropped",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "toolDropped( [string] )"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command queries a tool to see if it has options.",
            "name": "toolHasOptions",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "True if the queried tool has options, otherwise false.",
                    "type": "boolean"
                }
            ],
            "synopsis": "toolHasOptions( string )"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "End users should only call this command as 1.",
            "name": "toolPropertyWindow",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "toolPropertyWindow([field=string], [helpButton=string], [icon=string], [inMainWindow=boolean], [location=string], [noviceMode=boolean], [resetButton=string], [restore=boolean], [selectCommand=string], [showCommand=string])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "The torus command creates a new torus and/or a dependency node that creates one, and returns their names.",
            "name": "torus",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "torus([axis=[linear, linear, linear]], [caching=boolean], [constructionHistory=boolean], [degree=int], [endSweep=angle], [heightRatio=float], [minorSweep=angle], [name=string], [nodeState=int], [object=boolean], [pivot=[linear, linear, linear]], [polygon=int], [radius=linear], [sections=int], [spans=int], [startSweep=angle], [tolerance=linear], [useTolerance=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The track command translates a camera horizontally or vertically in the world space.",
            "name": "track",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "track( [camera] , [down=linear], [left=linear], [right=linear], [upDistance01=linear], [upDistance02=linear])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create a track context.",
            "name": "trackCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context",
                    "type": "string"
                }
            ],
            "synopsis": "trackCtx([alternateContext=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [toolName=string], [trackGeometry=boolean], [trackScale=float])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Samples the attributes of a source surface (first argument) and transfers them onto a target surface (second argument).",
            "name": "transferAttributes",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The node name.",
                    "type": "string"
                }
            ],
            "synopsis": "transferAttributes( object object , [after=boolean], [afterReference=boolean], [before=boolean], [colorBorders=uint], [components=boolean], [deformerTools=boolean], [exclusive=string], [flipUVs=uint], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [matchChoice=uint], [name=string], [parallel=boolean], [prune=boolean], [remove=boolean], [sampleSpace=uint], [searchMethod=uint], [searchScaleX=float], [searchScaleY=float], [searchScaleZ=float], [selectedComponents=boolean], [sourceColorSet=string], [sourceUvSet=string], [sourceUvSpace=string], [split=boolean], [targetColorSet=string], [targetUvSet=string], [targetUvSpace=string], [transferColors=uint], [transferNormals=uint], [transferPositions=uint], [transferUVs=uint], [useComponentTags=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Command to transfer shading set assignments between meshes.",
            "name": "transferShadingSets",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "transferShadingSets([sampleSpace=uint], [searchMethod=uint])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "Compares two transforms passed as arguments.",
            "name": "transformCompare",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "0 if successful, 1 if transform1 and transform2 are not determined to be equal.",
                    "type": "int"
                }
            ],
            "synopsis": "transformCompare( [dagObject dagObject] , [root=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The transformLimits command allows us to set, edit, or query the limits of the transformation that can be applied to objects.",
            "name": "transformLimits",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "transformLimits( [object] , [enableRotationX=[boolean, boolean]], [enableRotationY=[boolean, boolean]], [enableRotationZ=[boolean, boolean]], [enableScaleX=[boolean, boolean]], [enableScaleY=[boolean, boolean]], [enableScaleZ=[boolean, boolean]], [enableTranslationX=[boolean, boolean]], [enableTranslationY=[boolean, boolean]], [enableTranslationZ=[boolean, boolean]], [remove=boolean], [rotationX=[angle, angle]], [rotationY=[angle, angle]], [rotationZ=[angle, angle]], [scaleX=[float, float]], [scaleY=[float, float]], [scaleZ=[float, float]], [translationX=[linear, linear]], [translationY=[linear, linear]], [translationZ=[linear, linear]])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Set or query parameters associated with the file translators specified in as the argument.",
            "name": "translator",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "or string array depending upon which flags are specified.",
                    "type": "boolean"
                }
            ],
            "synopsis": "translator( [string] , [defaultFileRule=boolean], [defaultOptions=string], [extension=boolean], [fileCompression=string], [filter=boolean], [list=boolean], [loaded=boolean], [objectType=boolean], [optionsScript=boolean], [readSupport=boolean], [writeSupport=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates/edits/queries the tree lister control.",
            "name": "treeLister",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the created control.",
                    "type": "string"
                }
            ],
            "synopsis": "treeLister( [string] , [addFavorite=string], [addItem=[string, string, script]], [addVnnItem=[string, string, string, string]], [annotation=string], [backgroundColor=[float, float, float]], [clearContents=boolean], [collapsePath=string], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [executeItem=string], [exists=boolean], [expandPath=string], [expandToDepth=int], [favoritesCallback=script], [favoritesList=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [isObscured=boolean], [itemScript=string], [manage=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [refreshCommand=script], [removeFavorite=string], [removeItem=string], [resultsPathUnderCursor=boolean], [selectPath=string], [statusBarMessage=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [vnnString=boolean], [width=int])"
        },
        {
            "categories": [
                "Windows",
                "Controls"
            ],
            "description": "This command creates a custom control.",
            "name": "treeView",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The full name of the control.",
                    "type": "string"
                }
            ],
            "synopsis": "treeView( [string] , [addItem=[string, string]], [allowDragAndDrop=boolean], [allowHiddenParents=boolean], [allowMultiSelection=boolean], [allowReparenting=boolean], [annotation=string], [attachButtonRight=int], [backgroundColor=[float, float, float]], [borderHighlite=[string, boolean]], [borderHighliteColor=[string, float, float, float]], [buttonErase=[string, boolean]], [buttonState=[string, int, string]], [buttonStyle=[string, int, string]], [buttonTextIcon=[string, int, string]], [buttonTooltip=[string, int, string]], [buttonTransparencyColor=[string, int, float, float, float]], [buttonTransparencyOverride=[string, int, boolean]], [buttonVisible=[string, int, boolean]], [children=string], [clearSelection=boolean], [contextMenuCommand=script], [defineTemplate=string], [displayLabel=[string, string]], [displayLabelSuffix=[string, string]], [docTag=string], [dragAndDropCommand=script], [dragCallback=script], [dropCallback=script], [editLabelCommand=script], [enable=boolean], [enableBackground=boolean], [enableButton=[string, int, int]], [enableKeyboardFocus=boolean], [enableKeys=boolean], [enableLabel=[string, int]], [exists=boolean], [expandCollapseCommand=script], [expandItem=[string, boolean]], [flatButton=int], [font=[string, string]], [fontFace=[string, int]], [fullPathName=boolean], [height=int], [hideButtons=boolean], [highlightColor=[float, float, float]], [highlite=[string, boolean]], [highliteColor=[string, float, float, float]], [ignoreButtonClick=[string, int, int]], [image=[string, int, string]], [insertItem=[string, string, int]], [isItemExpanded=string], [isLeaf=string], [isObscured=boolean], [item=string], [itemAnnotation=[string, string]], [itemDblClickCommand=script], [itemDblClickCommand2=script], [itemExists=string], [itemIndex=string], [itemParent=string], [itemRenamedCommand=script], [itemSelected=string], [itemVisible=[string, boolean]], [labelBackgroundColor=[string, float, float, float]], [manage=boolean], [noBackground=boolean], [numberOfButtons=int], [numberOfPopupMenus=boolean], [ornament=[string, int, int, int]], [ornamentColor=[string, float, float, float]], [parent=string], [popupMenuArray=boolean], [pressCommand=[int, script]], [preventOverride=boolean], [removeAll=boolean], [removeItem=string], [reverseTreeOrder=boolean], [rightPressCommand=[int, script]], [select=[string, int]], [selectCommand=script], [selectItem=[string, boolean]], [selectionChangedCommand=script], [selectionColor=[string, float, float, float]], [showItem=string], [statusBarMessage=string], [textColor=[string, float, float, float]], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "This command trims a surface to its curves on surface by first splitting the surface and then selecting which regions to keep or discard.",
            "name": "trim",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name.",
                    "type": "string[]"
                }
            ],
            "synopsis": "trim( objects , [caching=boolean], [constructionHistory=boolean], [locatorU=float], [locatorV=float], [name=string], [nodeState=int], [object=boolean], [selected=int], [shrink=boolean], [tolerance=linear])"
        },
        {
            "categories": [
                "Effects",
                "Fluids"
            ],
            "description": "This command sets the end time of a fluid cache to the current time.",
            "name": "truncateFluidCache",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "truncateFluidCache()"
        },
        {
            "categories": [
                "Effects",
                "Hair"
            ],
            "description": "This command sets the end time of a hair cache to the current time.",
            "name": "truncateHairCache",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "truncateHairCache()"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The tumble command revolves the camera(s) by varying the azimuth and elevation angles in the perspective window.",
            "name": "tumble",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "tumble( [camera] , [azimuthAngle=angle], [elevationAngle=angle], [localTumble=int], [pivotPoint=[linear, linear, linear]], [rotationAngles=[angle, angle]])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a tumble context.",
            "name": "tumbleCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context",
                    "type": "string"
                }
            ],
            "synopsis": "tumbleCtx([alternateContext=boolean], [autoOrthoConstrain=boolean], [autoSetPivot=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [localTumble=int], [name=string], [objectTumble=boolean], [orthoLock=boolean], [orthoStep=angle], [toolName=string], [tumbleScale=float])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "For each listed object, the command creates a new field.",
            "name": "turbulence",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "turbulence( selectionList , [attenuation=float], [frequency=float], [magnitude=float], [maxDistance=linear], [name=string], [noiseLevel=int], [noiseRatio=float], [perVertex=boolean], [phase=float], [phaseX=float], [phaseY=float], [phaseZ=float], [position=[linear, linear, linear]], [torusSectionRadius=linear], [volumeExclusion=boolean], [volumeOffset=[linear, linear, linear]], [volumeShape=string], [volumeSweep=angle])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "The twoPointArcCtx command creates a new context for creating two point circular arcs.",
            "name": "twoPointArcCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name of the new context",
                    "type": "string"
                }
            ],
            "synopsis": "twoPointArcCtx([degree=uint], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [spans=uint])"
        },
        {
            "categories": [
                "Animation"
            ],
            "description": "Use this command to create a \"ubercam\" with equivalent behavior to all cameras used by shots in the sequencer.",
            "name": "ubercam",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Ubercam name",
                    "type": "string"
                }
            ],
            "synopsis": "ubercam([string])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command creates a new command template object.",
            "name": "uiTemplate",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the uiTemplate created.",
                    "type": "string"
                }
            ],
            "synopsis": "uiTemplate( [string] , [defineTemplate=string], [exists=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "System",
                "Devices"
            ],
            "description": "This command deletes all command strings associated with this device.",
            "name": "unassignInputDevice",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "unassignInputDevice([clutch=string], [device=string])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Takes the most recent command from the undo list and undoes it.",
            "name": "undo",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "undo()"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This command controls the undo/redo parameters.",
            "name": "undoInfo",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "If querying undoName or redoName",
                    "type": "string"
                },
                {
                    "description": "If querying state, infinity, or length",
                    "type": "int"
                }
            ],
            "synopsis": "undoInfo([chunkName=string], [closeChunk=boolean], [infinity=boolean], [length=uint], [openChunk=boolean], [printQueue=boolean], [printRedoQueue=boolean], [redoName=string], [redoQueueEmpty=boolean], [state=boolean], [stateWithoutFlush=boolean], [undoName=string], [undoQueueEmpty=boolean])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "None.",
            "name": "unfold",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "the number of relaxation iterations carried out",
                    "type": "int"
                }
            ],
            "synopsis": "unfold([applyToShell=boolean], [areaWeight=float], [globalBlend=float], [globalMethodBlend=float], [iterations=int], [optimizeAxis=int], [pinSelected=boolean], [pinUvBorder=boolean], [scale=float], [stoppingThreshold=float], [useScale=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command ungroups the specified objects.",
            "name": "ungroup",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "ungroup( [objects...] , [absolute=boolean], [parent=string], [relative=boolean], [world=boolean])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "For each listed object, the command creates a new field.",
            "name": "uniform",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "uniform( selectionList , [attenuation=float], [directionX=float], [directionY=float], [directionZ=float], [magnitude=float], [maxDistance=linear], [name=string], [perVertex=boolean], [position=[linear, linear, linear]], [torusSectionRadius=linear], [volumeExclusion=boolean], [volumeOffset=[linear, linear, linear]], [volumeShape=string], [volumeSweep=angle])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Allows querying of the data stored for unknown nodes (nodes that are defined by a plug-in that Maya could not load when loading a scene file).",
            "name": "unknownNode",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "in query mode",
                    "type": "string[]"
                }
            ],
            "synopsis": "unknownNode([plugin=boolean], [realClassName=boolean], [realClassTag=boolean])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Allows querying of the unknown plug-ins used by the scene, and provides a means to remove them.",
            "name": "unknownPlugin",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "in query mode",
                    "type": "string[]"
                }
            ],
            "synopsis": "unknownPlugin([dataTypes=boolean], [list=boolean], [nodeTypes=boolean], [remove=boolean], [version=boolean])"
        },
        {
            "categories": [
                "System",
                "Plug-ins"
            ],
            "description": "Unload plug-ins from Maya.",
            "name": "unloadPlugin",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "the internal names of the successfully unloaded plug-ins",
                    "type": "string[]"
                }
            ],
            "synopsis": "unloadPlugin( string [string...] , [addCallback=script], [force=boolean], [removeCallback=script])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "This command will aid in the creation of non-overlapping regions (i.",
            "name": "untangleUV",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "the number of relaxation iterations carried out",
                    "type": "int"
                }
            ],
            "synopsis": "untangleUV([mapBorder=string], [maxRelaxIterations=int], [pinBorder=boolean], [pinSelected=boolean], [pinUnselected=boolean], [relax=string], [relaxTolerance=float], [shapeDetail=float])"
        },
        {
            "categories": [
                "Modeling",
                "NURBS"
            ],
            "description": "Untrim the surface.",
            "name": "untrim",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Object name and node name",
                    "type": "string[]"
                }
            ],
            "synopsis": "untrim( surface , [caching=boolean], [constructionHistory=boolean], [curveOnSurface=boolean], [name=string], [noChanges=boolean], [nodeState=int], [object=boolean], [replaceOriginal=boolean], [untrimAll=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "The upAxis command changes the world up direction.",
            "name": "upAxis",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "upAxis([axis=string], [rotateView=boolean])"
        },
        {
            "categories": [],
            "description": "",
            "name": "userCtx",
            "obsolete": true,
            "returnTypes": [],
            "synopsis": ""
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command is used to make, break and query UV linking relationships between UV sets on objects and textures that use those UV sets.",
            "name": "uvLink",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "or array of strings for query boolean for isValid",
                    "type": "string"
                }
            ],
            "synopsis": "uvLink( [objects] , [b=boolean], [isValid=boolean], [make=boolean], [queryObject=name], [texture=name], [uvSet=name])"
        },
        {
            "categories": [
                "Modeling",
                "Polygons"
            ],
            "description": "Builds an image containg the UVs of the selected objects.",
            "name": "uvSnapshot",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "uvSnapshot([antiAliased=boolean], [blueColor=int], [entireUVRange=boolean], [fileFormat=string], [greenColor=int], [name=string], [overwrite=boolean], [redColor=int], [uMax=float], [uMin=float], [uvSetName=string], [vMax=float], [vMin=float], [xResolution=int], [yResolution=int])"
        },
        {
            "categories": [
                "Rendering"
            ],
            "description": "This command renders Maya scenes to various vector and raster formats using the Maya Vector renderer.",
            "name": "vectorize",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "vectorize([browserView=boolean], [byFrame=float], [camera=string], [combineFillsEdges=boolean], [currentFrame=boolean], [curveTolerance=float], [customExtension=string], [detailLevel=int], [edgeColor=[int, int, int]], [edgeDetail=boolean], [edgeStyle=string], [edgeWeight=float], [endFrame=float], [filenameFormat=string], [fillStyle=string], [flashVersion=int], [frameRate=int], [height=int], [hiddenEdges=boolean], [highlightLevel=int], [highlights=boolean], [imageFormat=string], [layer=name], [minEdgeAngle=float], [outlinesAtIntersections=boolean], [outputFileName=string], [pixelAspectRatio=float], [reflectionDepth=int], [reflections=boolean], [renderLayers=boolean], [renderOptimization=string], [renderView=boolean], [secondaryCurveFitting=boolean], [shadows=boolean], [showBackFaces=boolean], [startFrame=float], [svgAnimation=string], [svgCompression=boolean], [width=int])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This class creates a context for the View Tools \"track\", \"dolly\", and \"box zoom\" in the Hypergraph.",
            "name": "view2dToolCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The context name",
                    "type": "string"
                }
            ],
            "synopsis": "view2dToolCtx([alternateContext=boolean], [boxzoom=boolean], [dolly=boolean], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [toolName=string], [track=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The viewCamera command is used to position a camera to look directly at the side or top of another camera.",
            "name": "viewCamera",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "viewCamera( [camera] , [move=name], [sideView=boolean], [topView=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The viewClipPlane command can be used to query or set a camera's clip planes.",
            "name": "viewClipPlane",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "viewClipPlane( [camera] , [autoClipPlane=boolean], [farClipPlane=linear], [nearClipPlane=linear], [surfacesOnly=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The viewFit command positions the specified camera so its point-of-view contains all selected objects other than itself.",
            "name": "viewFit",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "viewFit( [camera...] , [allObjects=boolean], [animate=boolean], [center=boolean], [fitFactor=float], [namespace=string], [noChildren=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The viewHeadOn command positions the specified camera so it is looking \"down\" the normal of the live object, and fitted to the live object.",
            "name": "viewHeadOn",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "viewHeadOn( [camera] )"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "The viewLookAt command positions the specified camera so it is looking at the centroid of all selected objects.",
            "name": "viewLookAt",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "viewLookAt( [camera] , [position=[linear, linear, linear]])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "Mel access to the view cube manipulator.",
            "name": "viewManip",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "viewManip([bottomLeft=boolean], [bottomRight=boolean], [compassAngle=float], [dragSnap=boolean], [drawCompass=boolean], [fitToView=boolean], [frontParameters=string], [goDefault=boolean], [goHome=boolean], [homeParameters=string], [levelCamera=boolean], [minOpacity=float], [namespace=string], [postCommand=string], [preCommand=string], [preserveSceneUp=boolean], [resetFront=boolean], [resetHome=boolean], [restoreCenter=boolean], [selectionLockParameters=string], [setFront=boolean], [setHome=boolean], [size=string], [toggleSelectionLock=boolean], [topLeft=boolean], [topRight=boolean], [visible=boolean], [zoomToFitScene=boolean])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "This command positions the camera as specified.",
            "name": "viewPlace",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "viewPlace( [camera] , [animate=boolean], [eyePoint=[linear, linear, linear]], [fieldOfView=angle], [lookAt=[linear, linear, linear]], [ortho=boolean], [perspective=boolean], [upDirection=[linear, linear, linear]], [viewDirection=[linear, linear, linear]])"
        },
        {
            "categories": [
                "Rendering",
                "Camera"
            ],
            "description": "This command positions the camera to one of the pre-defined positions.",
            "name": "viewSet",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "viewSet( [camera] , [animate=boolean], [back=boolean], [bottom=boolean], [fit=boolean], [fitFactor=float], [front=boolean], [home=boolean], [keepRenderSettings=boolean], [leftSide=boolean], [namespace=string], [nextView=boolean], [persp=boolean], [previousView=boolean], [rightSide=boolean], [side=boolean], [top=boolean], [viewNegativeX=boolean], [viewNegativeY=boolean], [viewNegativeZ=boolean], [viewX=boolean], [viewY=boolean], [viewZ=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "Command for the creation and manipulation of a Visor UI element.",
            "name": "visor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "visor([addFolder=boolean], [addNodes=string], [allowPanningInX=boolean], [allowPanningInY=boolean], [allowZooming=boolean], [command=string], [deleteFolder=string], [editFolder=string], [folderList=string], [menu=string], [name=string], [nodeType=string], [openDirectories=boolean], [openFolder=boolean], [parent=string], [path=string], [popupMenuScript=string], [rebuild=boolean], [refreshAllSwatches=boolean], [refreshSelectedSwatches=boolean], [refreshSwatch=string], [reset=boolean], [restrictPanAndZoom=boolean], [saveSwatches=boolean], [scrollBar=string], [scrollPercent=float], [selectedGadgets=string], [showDividers=boolean], [showFiles=boolean], [showFolders=boolean], [showNodes=boolean], [stateString=boolean], [style=string], [transform=string], [type=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "For each listed object, the command creates a new field.",
            "name": "volumeAxis",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "volumeAxis( selectionList , [alongAxis=float], [aroundAxis=float], [attenuation=float], [awayFromAxis=float], [awayFromCenter=float], [detailTurbulence=float], [directionX=float], [directionY=float], [directionZ=float], [directionalSpeed=float], [invertAttenuation=boolean], [magnitude=float], [maxDistance=linear], [name=string], [perVertex=boolean], [position=[linear, linear, linear]], [torusSectionRadius=linear], [turbulence=float], [turbulenceFrequencyX=float], [turbulenceFrequencyY=float], [turbulenceFrequencyZ=float], [turbulenceOffsetX=float], [turbulenceOffsetY=float], [turbulenceOffsetZ=float], [turbulenceSpeed=float], [volumeExclusion=boolean], [volumeOffset=[linear, linear, linear]], [volumeShape=string], [volumeSweep=angle])"
        },
        {
            "categories": [
                "Animation",
                "Skinning"
            ],
            "description": "Command for creating and editing volume binding nodes.",
            "name": "volumeBind",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of queried influences",
                    "type": "string[]"
                }
            ],
            "synopsis": "volumeBind( objects , [influence=string], [name=string])"
        },
        {
            "categories": [
                "Effects",
                "Dynamics"
            ],
            "description": "For each listed object, the command creates a new field.",
            "name": "vortex",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Command result",
                    "type": "string"
                }
            ],
            "synopsis": "vortex( selectionList , [attenuation=float], [axisX=float], [axisY=float], [axisZ=float], [magnitude=float], [maxDistance=linear], [name=string], [perVertex=boolean], [position=[linear, linear, linear]], [torusSectionRadius=linear], [volumeExclusion=boolean], [volumeOffset=[linear, linear, linear]], [volumeShape=string], [volumeSweep=angle])"
        },
        {
            "categories": [
                "Language",
                "Scripting"
            ],
            "description": "This command sets/resets a wait cursor for the entire Maya application.",
            "name": "waitCursor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "True if the wait cursor is on.",
                    "type": "boolean"
                }
            ],
            "synopsis": "waitCursor([state=boolean])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command can be used to create, edit, or query a walk context.",
            "name": "walkCtx",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context",
                    "type": "string"
                }
            ],
            "synopsis": "walkCtx([alternateContext=boolean], [crouchCount=float], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [toolName=string], [walkHeight=float], [walkSensitivity=float], [walkSpeed=float], [walkToolHud=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "The warning command is provided so that the user can issue warning messages from his/her scripts.",
            "name": "warning",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "warning([noContext=boolean], [showLineNumber=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Panels"
            ],
            "description": "This command is obsolete and will be removed in next version of Maya.",
            "name": "webBrowser",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control",
                    "type": "string"
                }
            ],
            "synopsis": "webBrowser( [string] , [annotation=string], [back=boolean], [backgroundColor=[float, float, float]], [defineTemplate=string], [docTag=string], [dragCallback=script], [dropCallback=script], [enable=boolean], [enableBackground=boolean], [enableKeyboardFocus=boolean], [exists=boolean], [find=string], [forward=boolean], [fullPathName=boolean], [height=int], [highlightColor=[float, float, float]], [home=boolean], [isObscured=boolean], [manage=boolean], [matchCase=boolean], [matchWholeWorld=boolean], [noBackground=boolean], [numberOfPopupMenus=boolean], [openURL=string], [parent=string], [popupMenuArray=boolean], [preventOverride=boolean], [reload=boolean], [searchForward=boolean], [statusBarMessage=string], [stop=boolean], [urlChangedCb=string], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=int], [wrap=boolean])"
        },
        {
            "categories": [],
            "description": "",
            "name": "webBrowserPrefs",
            "obsolete": true,
            "returnTypes": [],
            "synopsis": ""
        },
        {
            "categories": [
                "General",
                "Display"
            ],
            "description": "Controls the coloring of deformer weights.",
            "name": "weightsColor",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "For query operation",
                    "type": "string[]"
                }
            ],
            "synopsis": "weightsColor( [objects...] , [colorRamp=string], [deformer=string], [falseColor=boolean], [outOfRangeColor=[float, float, float]], [rampMaxColor=[float, float, float]], [rampMinColor=[float, float, float]], [useColorRamp=boolean], [useMaxMinColor=boolean])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "This command is used to toggle the What's New highlighting feature, and the display of the settings dialog for the feature that appears on startup.",
            "name": "whatsNewHighlight",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "whatsNewHighlight([highlightColor=[float, float, float]], [highlightOn=boolean], [showStartupDialog=boolean])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "This command creates a new window but leaves it invisible.",
            "name": "window",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Name to the window.",
                    "type": "string"
                }
            ],
            "synopsis": "window( [string] , [backgroundColor=[float, float, float]], [closeCommand=script], [defineTemplate=string], [docTag=string], [dockCorner=[string, string]], [dockStation=boolean], [dockingLayout=string], [exists=boolean], [frontWindow=boolean], [height=int], [iconName=string], [iconify=boolean], [interactivePlacement=boolean], [leftEdge=int], [mainMenuBar=boolean], [mainWindow=boolean], [maximizeButton=boolean], [menuArray=boolean], [menuBar=boolean], [menuBarCornerWidget=[string, string]], [menuBarResize=boolean], [menuBarVisible=boolean], [menuIndex=[string, uint]], [minimizeButton=boolean], [minimizeCommand=script], [nestedDockingEnabled=boolean], [numberOfMenus=boolean], [parent=string], [resizeToFitChildren=boolean], [restoreCommand=script], [retain=boolean], [sizeable=boolean], [state=string], [title=string], [titleBar=boolean], [titleBarMenu=boolean], [toolbox=boolean], [topEdge=int], [topLeftCorner=[int, int]], [useTemplate=string], [visible=boolean], [width=int], [widthHeight=[int, int]])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "Create or modify preferred window attributes.",
            "name": "windowPref",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "windowPref( string , [enableAll=boolean], [exists=boolean], [height=int], [leftEdge=int], [loadAll=boolean], [maximized=boolean], [parentMain=boolean], [remove=boolean], [removeAll=boolean], [restoreMainWindowState=string], [saveAll=boolean], [saveMainWindowState=string], [topEdge=int], [topLeftCorner=[int, int]], [width=int], [widthHeight=[int, int]])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "This command creates a wire deformer.",
            "name": "wire",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The wire node name and the wire curve name",
                    "type": "string[]"
                }
            ],
            "synopsis": "wire( [objects] , [after=boolean], [afterReference=boolean], [before=boolean], [components=boolean], [crossingEffect=float], [deformerTools=boolean], [dropoffDistance=[uint, linear]], [envelope=float], [exclusive=string], [frontOfChain=boolean], [geometry=string], [geometryIndices=boolean], [groupWithBase=boolean], [holder=[uint, string]], [ignoreSelected=boolean], [includeHiddenSelections=boolean], [localInfluence=float], [name=string], [parallel=boolean], [prune=boolean], [remove=boolean], [selectedComponents=boolean], [split=boolean], [useComponentTags=boolean], [wire=string], [wireCount=uint])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a tool that can be used to create a wire deformer.",
            "name": "wireContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "wireContext( string , [crossingEffect=linear], [deformationOrder=string], [dropoffDistance=linear], [envelope=linear], [exclusive=boolean], [exclusivePartition=string], [exists=boolean], [groupWithBase=boolean], [history=boolean], [holder=boolean], [image1=string], [image2=string], [image3=string], [localInfluence=linear], [name=string])"
        },
        {
            "categories": [
                "System",
                "Files"
            ],
            "description": "Create, open, or edit a workspace associated with a given workspace file.",
            "name": "workspace",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Project short name when querying the 'shortName' flag.",
                    "type": "string"
                },
                {
                    "description": "Project full name when querying the 'fullName' flag.",
                    "type": "string"
                },
                {
                    "description": "Current workspace name when querying the 'openWorkspace' flag and there is a current one.",
                    "type": "string"
                },
                {
                    "description": "Working space directory when querying the 'directory' flag.",
                    "type": "string"
                },
                {
                    "description": "File rule on the current workspace when querying one of the 'renderTypeEntry', 'fileRuleEntry', or 'objectTypeEntry' flags.",
                    "type": "string"
                },
                {
                    "description": "File rule on the current workspace when querying the 'variableEntry' flag.",
                    "type": "string"
                },
                {
                    "description": "Resolved full name of the given file name, or the current root directory if no name given when querying the 'expandName' flag.",
                    "type": "string"
                },
                {
                    "description": "Path to the current project workspace when querying the 'projectPath' flag.",
                    "type": "string"
                },
                {
                    "description": "Current workspace's base workspace name when querying the 'baseWorkspace' flag.",
                    "type": "string"
                },
                {
                    "description": "Current workspace's root directory when querying the 'rootDirectory' flag.",
                    "type": "string"
                },
                {
                    "description": "List of file rules when querying the 'fileRule' flag.",
                    "type": "string[]"
                },
                {
                    "description": "List of variables when querying the 'variableList' flag.",
                    "type": "string[]"
                },
                {
                    "description": "List of all workspaces when querying the 'listWorkspaces' flag.",
                    "type": "string[]"
                },
                {
                    "description": "List of full names of all workspaces when querying the 'listFullWorkspaces' flag.",
                    "type": "string[]"
                },
                {
                    "description": "List of path names for all workspace in the directory named when querying the 'list' flag or the current workspace if no directory is named.",
                    "type": "string[]"
                },
                {
                    "description": "List of alternating (file rule, rule location) strings corresponding to the current workspace's file rules.",
                    "type": "string[]"
                },
                {
                    "description": "List of alternating (variable, value) strings corresponding to the current workspace's variables.",
                    "type": "string[]"
                }
            ],
            "synopsis": "workspace( [string] , [active=boolean], [baseWorkspace=string], [create=string], [directory=string], [expandName=string], [fileRule=[string, string]], [fileRuleEntry=string], [fileRuleList=boolean], [filter=boolean], [fullName=boolean], [list=boolean], [listFullWorkspaces=boolean], [listWorkspaces=boolean], [newWorkspace=boolean], [objectType=[string, string]], [objectTypeEntry=string], [objectTypeList=boolean], [openWorkspace=boolean], [projectPath=string], [removeFileRuleEntry=string], [removeVariableEntry=string], [renderType=[string, string]], [renderTypeEntry=string], [renderTypeList=boolean], [rootDirectory=boolean], [saveWorkspace=boolean], [shortName=boolean], [update=boolean], [updateAll=boolean], [variable=[string, string]], [variableEntry=string], [variableList=boolean])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "Creates and manages the widget used to host windows in a layout that enables docking and stacking windows together.",
            "name": "workspaceControl",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the control.",
                    "type": "string"
                }
            ],
            "synopsis": "workspaceControl( [name] , [actLikeMayaUIElement=boolean], [checksPlugins=boolean], [close=boolean], [closeCommand=script], [collapse=boolean], [defineTemplate=string], [dockToControl=[string, string]], [dockToMainWindow=[string, boolean]], [dockToPanel=[string, string, boolean]], [duplicatable=boolean], [exists=boolean], [floating=boolean], [height=boolean], [heightProperty=string], [horizontal=boolean], [initCallback=string], [initialHeight=int], [initialWidth=int], [label=string], [layoutDirectionCallback=string], [loadImmediately=boolean], [minimumHeight=int], [minimumWidth=int], [r=boolean], [requiredControl=string], [requiredPlugin=string], [resizeHeight=int], [resizeWidth=int], [restore=boolean], [retain=boolean], [stateString=string], [tabPosition=[string, boolean]], [tabToControl=[string, int]], [uiScript=script], [useTemplate=string], [visible=boolean], [visibleChangeCommand=script], [width=boolean], [widthProperty=string])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "Create or modify preferred window attributes for workspace controls.",
            "name": "workspaceControlState",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "workspaceControlState( string , [defaultTopLeftCorner=[int, int]], [defaultWidthHeight=[int, int]], [exists=boolean], [height=int], [leftEdge=int], [maximized=boolean], [remove=boolean], [topEdge=int], [topLeftCorner=[int, int]], [width=int], [widthHeight=[int, int]])"
        },
        {
            "categories": [
                "Windows",
                "Layouts"
            ],
            "description": "The Workspace Layout Manager loads and saves the layout of the various toolbars and windows in the user interface.",
            "name": "workspaceLayoutManager",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "depending on arguments",
                    "type": "string[]"
                }
            ],
            "synopsis": "workspaceLayoutManager( [name] , [collapseMainWindowControls=[string, boolean]], [current=boolean], [delete=string], [i=string], [listLayouts=boolean], [listModuleLayouts=boolean], [listUserLayouts=boolean], [modified=string], [parentWorkspaceControl=string], [reset=boolean], [restoreMainWindowControls=boolean], [save=boolean], [saveAs=string], [setCurrent=string], [setCurrentCallback=string], [setModifiedCallback=string], [type=string])"
        },
        {
            "categories": [
                "Windows"
            ],
            "description": "Workspace panel.",
            "name": "workspacePanel",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "Full path name to the workspace panel.",
                    "type": "string"
                }
            ],
            "synopsis": "workspacePanel([defineTemplate=string], [exists=boolean], [mainWindow=boolean], [useTemplate=string])"
        },
        {
            "categories": [
                "Animation",
                "Deformation"
            ],
            "description": "The wrinkle command is used to create a network of wrinkles on a surface.",
            "name": "wrinkle",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "List of clusters created followed by list of wire deformers created.",
                    "type": "string[]"
                }
            ],
            "synopsis": "wrinkle( objects , [axis=[linear, linear, linear]], [branchCount=uint], [branchDepth=uint], [center=[linear, linear, linear]], [crease=string], [dropoffDistance=linear], [envelope=linear], [randomness=linear], [style=string], [thickness=linear], [uvSpace=[linear, linear, linear, linear, linear]], [wrinkleCount=uint], [wrinkleIntensity=linear])"
        },
        {
            "categories": [
                "General",
                "Contexts"
            ],
            "description": "This command creates a context that creates wrinkles.",
            "name": "wrinkleContext",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The name of the context created",
                    "type": "string"
                }
            ],
            "synopsis": "wrinkleContext( string , [branchCount=uint], [branchDepth=uint], [exists=boolean], [history=boolean], [image1=string], [image2=string], [image3=string], [name=string], [randomness=linear], [style=string], [thickness=linear], [wrinkleCount=uint], [wrinkleIntensity=linear])"
        },
        {
            "categories": [
                "Animation",
                "MoCap"
            ],
            "description": "This action writes a take from a device with recorded data to a take (.",
            "name": "writeTake",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "writeTake([angle=string], [device=string], [linear=string], [noTime=boolean], [precision=int], [take=string], [virtualDevice=string])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command can be used query/set any element in a transformation node.",
            "name": "xform",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "xform( [objects...] , [absolute=boolean], [boundingBox=boolean], [boundingBoxInvisible=boolean], [centerPivots=boolean], [centerPivotsOnComponents=boolean], [deletePriorHistory=boolean], [euler=boolean], [matrix=[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float]], [objectSpace=boolean], [pivots=[linear, linear, linear]], [preserve=boolean], [preserveUV=boolean], [reflection=boolean], [reflectionAboutBBox=boolean], [reflectionAboutOrigin=boolean], [reflectionAboutX=boolean], [reflectionAboutY=boolean], [reflectionAboutZ=boolean], [reflectionTolerance=float], [relative=boolean], [rotateAxis=[angle, angle, angle]], [rotateOrder=string], [rotatePivot=[linear, linear, linear]], [rotateTranslation=[linear, linear, linear]], [rotation=[angle, angle, angle]], [scale=[float, float, float]], [scalePivot=[linear, linear, linear]], [scaleTranslation=[linear, linear, linear]], [shear=[float, float, float]], [translation=[linear, linear, linear]], [worldSpace=boolean], [worldSpaceDistance=boolean], [zeroTransformPivots=boolean])"
        },
        {
            "categories": [
                "General"
            ],
            "description": "This command allows you to change the transform constraint used by the transform tools during component transforms.",
            "name": "xformConstraint",
            "obsolete": false,
            "returnTypes": [],
            "synopsis": "xformConstraint([alongNormal=int], [live=boolean], [type=string])"
        },
        {
            "categories": [
                "System",
                "Utilities"
            ],
            "description": "Open a dialog and ask you to choose a xpm file.",
            "name": "xpmPicker",
            "obsolete": false,
            "returnTypes": [
                {
                    "description": "The full name of the xpm file",
                    "type": "string"
                }
            ],
            "synopsis": "xpmPicker([fileName=string], [parent=string])"
        }
    ]
}
